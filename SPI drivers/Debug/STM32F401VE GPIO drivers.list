
STM32F401VE GPIO drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001240  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080013d4  080013dc  000023dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080013d4  080013d4  000023dc  2**0
                  CONTENTS
  4 .ARM          00000000  080013d4  080013d4  000023dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013d4  080013dc  000023dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013d4  080013d4  000023d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080013d8  080013d8  000023d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000023dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  080013dc  00003000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080013dc  00003028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000023dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c41  00000000  00000000  0000240c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000911  00000000  00000000  0000504d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000330  00000000  00000000  00005960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000024e  00000000  00000000  00005c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e394  00000000  00000000  00005ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000029d3  00000000  00000000  00014272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00051ac4  00000000  00000000  00016c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00068709  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c6c  00000000  00000000  0006874c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000693b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080013bc 	.word	0x080013bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080013bc 	.word	0x080013bc

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <stoplight_initialize>:
uint16_t rx_data;
uint32_t ms;
volatile uint16_t state = STOPLIGHT_STATE_STOP;

void stoplight_initialize(uint32_t type)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b0ac      	sub	sp, #176	@ 0xb0
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	if(type == STOPLIGHT_MASTER)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2b01      	cmp	r3, #1
 800021c:	f040 80b4 	bne.w	8000388 <stoplight_initialize+0x178>
	{
		RCC->AHB1ENR = RCC->AHB1ENR | 0x1;
 8000220:	4b9b      	ldr	r3, [pc, #620]	@ (8000490 <stoplight_initialize+0x280>)
 8000222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000224:	4a9a      	ldr	r2, [pc, #616]	@ (8000490 <stoplight_initialize+0x280>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6313      	str	r3, [r2, #48]	@ 0x30
		gpio_pin buttons;
		buttons.mode = GPIO_PIN_MODE_INPUT;
 800022c:	2300      	movs	r3, #0
 800022e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		buttons.pull = GPIO_PIN_PULL_NONE;
 8000232:	2300      	movs	r3, #0
 8000234:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		buttons.alternate_function = GPIO_PIN_ALTERNATE_FUNCTION_AF0_SYSTEM;
 8000238:	2300      	movs	r3, #0
 800023a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for(int i = 0; i < 4; i++)
 800023e:	2300      	movs	r3, #0
 8000240:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000244:	e00e      	b.n	8000264 <stoplight_initialize+0x54>
		{
			buttons.pin = i;
 8000246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800024a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			gpio_init(GPIOA, &buttons);
 800024e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000252:	4619      	mov	r1, r3
 8000254:	488f      	ldr	r0, [pc, #572]	@ (8000494 <stoplight_initialize+0x284>)
 8000256:	f000 fadd 	bl	8000814 <gpio_init>
		for(int i = 0; i < 4; i++)
 800025a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800025e:	3301      	adds	r3, #1
 8000260:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000268:	2b03      	cmp	r3, #3
 800026a:	ddec      	ble.n	8000246 <stoplight_initialize+0x36>
		}
		gpio_pin spi;
		spi.mode = GPIO_PIN_MODE_ALT_FUNCTION;
 800026c:	2302      	movs	r3, #2
 800026e:	677b      	str	r3, [r7, #116]	@ 0x74
		spi.alternate_function = GPIO_PIN_ALTERNATE_FUNCTION_AF5_SPI1_2_3_4;
 8000270:	2305      	movs	r3, #5
 8000272:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		for(int i = 4; i < 8; i++)
 8000276:	2304      	movs	r3, #4
 8000278:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800027c:	e00d      	b.n	800029a <stoplight_initialize+0x8a>
		{
			spi.pin = i;
 800027e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000282:	673b      	str	r3, [r7, #112]	@ 0x70
			gpio_init(GPIOA, &spi);
 8000284:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000288:	4619      	mov	r1, r3
 800028a:	4882      	ldr	r0, [pc, #520]	@ (8000494 <stoplight_initialize+0x284>)
 800028c:	f000 fac2 	bl	8000814 <gpio_init>
		for(int i = 4; i < 8; i++)
 8000290:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000294:	3301      	adds	r3, #1
 8000296:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800029a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800029e:	2b07      	cmp	r3, #7
 80002a0:	dded      	ble.n	800027e <stoplight_initialize+0x6e>
		}
		spi_type spi1;
		spi1.spi = SPI1;
 80002a2:	4b7d      	ldr	r3, [pc, #500]	@ (8000498 <stoplight_initialize+0x288>)
 80002a4:	60fb      	str	r3, [r7, #12]
		spi1.type = SPI1_TYPE;
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
		spi1.bidimode = SPI_BIDIMODE_UNI;
 80002aa:	2300      	movs	r3, #0
 80002ac:	82bb      	strh	r3, [r7, #20]
		spi1.bidioe = SPI_BIDIOE_DISABLED;
 80002ae:	2300      	movs	r3, #0
 80002b0:	82fb      	strh	r3, [r7, #22]
		spi1.crcen = SPI_CRCEN_DISABLED;
 80002b2:	2300      	movs	r3, #0
 80002b4:	833b      	strh	r3, [r7, #24]
		spi1.crcnext = SPI_CRCNEXT_NO_PHASE;
 80002b6:	2300      	movs	r3, #0
 80002b8:	837b      	strh	r3, [r7, #26]
		spi1.dff = SPI_DFF_8_BIT;
 80002ba:	2300      	movs	r3, #0
 80002bc:	83bb      	strh	r3, [r7, #28]
		spi1.rxonly = SPI_RXONLY_FULL_DUPLEX;
 80002be:	2300      	movs	r3, #0
 80002c0:	83fb      	strh	r3, [r7, #30]
		spi1.ssm = SPI_SSM_DISABLED;
 80002c2:	2300      	movs	r3, #0
 80002c4:	843b      	strh	r3, [r7, #32]
		spi1.ssi = SPI_SSI_SELECT;
 80002c6:	2300      	movs	r3, #0
 80002c8:	847b      	strh	r3, [r7, #34]	@ 0x22
		spi1.lsbfirst = SPI_LSBFIRST_MSB;
 80002ca:	2300      	movs	r3, #0
 80002cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		spi1.spe = SPI_SPE_ENABLE;
 80002ce:	2301      	movs	r3, #1
 80002d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
		spi1.br = SPI_BR_64;
 80002d2:	f240 1301 	movw	r3, #257	@ 0x101
 80002d6:	853b      	strh	r3, [r7, #40]	@ 0x28
		spi1.mstr = SPI_MSTR_MASTER;
 80002d8:	2301      	movs	r3, #1
 80002da:	857b      	strh	r3, [r7, #42]	@ 0x2a
		spi1.cpol = SPI_CPOL_1;
 80002dc:	2301      	movs	r3, #1
 80002de:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		spi1.cpha = SPI_CPHA_SECOND;
 80002e0:	2301      	movs	r3, #1
 80002e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		spi1.txeie = SPI_TXEIE_MASKED;
 80002e4:	2300      	movs	r3, #0
 80002e6:	863b      	strh	r3, [r7, #48]	@ 0x30
		spi1.rxneie = SPI_RXNEIE_NOT_MASKED;
 80002e8:	2301      	movs	r3, #1
 80002ea:	867b      	strh	r3, [r7, #50]	@ 0x32
		spi1.errie = SPI_ERRIE_MASKED;
 80002ec:	2300      	movs	r3, #0
 80002ee:	86bb      	strh	r3, [r7, #52]	@ 0x34
		spi1.frf = SPI_FRF_MOTOROLA;
 80002f0:	2300      	movs	r3, #0
 80002f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
		spi1.ssoe = SPI_SSOE_ENABLED;
 80002f4:	2301      	movs	r3, #1
 80002f6:	873b      	strh	r3, [r7, #56]	@ 0x38
		spi1.txdmaen = SPI_TXDMAEN_DISABLED;
 80002f8:	2300      	movs	r3, #0
 80002fa:	877b      	strh	r3, [r7, #58]	@ 0x3a
		spi1.rxdmaen = SPI_RXDMAEN_DISABLED;
 80002fc:	2300      	movs	r3, #0
 80002fe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
		spi_configure(&spi1);
 8000300:	f107 030c 	add.w	r3, r7, #12
 8000304:	4618      	mov	r0, r3
 8000306:	f000 fd6b 	bl	8000de0 <spi_configure>
		stoplight_configure_interrupts(type);
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f000 f8ca 	bl	80004a4 <stoplight_configure_interrupts>

		RCC->APB1ENR = RCC->APB1ENR | 0x1;
 8000310:	4b5f      	ldr	r3, [pc, #380]	@ (8000490 <stoplight_initialize+0x280>)
 8000312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000314:	4a5e      	ldr	r2, [pc, #376]	@ (8000490 <stoplight_initialize+0x280>)
 8000316:	f043 0301 	orr.w	r3, r3, #1
 800031a:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2->CR1 = 0x0310;
 800031c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000320:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8000324:	601a      	str	r2, [r3, #0]
		TIM2->EGR = TIM2->EGR | 0x0001;
 8000326:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6153      	str	r3, [r2, #20]
		TIM2->PSC = 0xFFF;
 8000336:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800033a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800033e:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = STOPLIGHT_TIMER_STOP;
 8000340:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000344:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000348:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->DIER = TIM2->DIER | 0x0001;
 800034a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 = TIM2->CR1 | 0x0001;
 800035a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6013      	str	r3, [r2, #0]
		NVIC_EnableIRQ(TIM2_IRQn);
 800036a:	201c      	movs	r0, #28
 800036c:	f7ff ff32 	bl	80001d4 <__NVIC_EnableIRQ>
		spi_master_transmit(SPI1, STOPLIGHT_RED);
 8000370:	2101      	movs	r1, #1
 8000372:	4849      	ldr	r0, [pc, #292]	@ (8000498 <stoplight_initialize+0x288>)
 8000374:	f000 ffda 	bl	800132c <spi_master_transmit>
		state = STOPLIGHT_STATE_STOP;
 8000378:	4b48      	ldr	r3, [pc, #288]	@ (800049c <stoplight_initialize+0x28c>)
 800037a:	2200      	movs	r2, #0
 800037c:	801a      	strh	r2, [r3, #0]
		TIM2->ARR = STOPLIGHT_TIMER_READY;
 800037e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000382:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000386:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
	if(type == STOPLIGHT_SLAVE)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d17c      	bne.n	8000488 <stoplight_initialize+0x278>
	{
		RCC->AHB1ENR = RCC->AHB1ENR | 0x1;
 800038e:	4b40      	ldr	r3, [pc, #256]	@ (8000490 <stoplight_initialize+0x280>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000392:	4a3f      	ldr	r2, [pc, #252]	@ (8000490 <stoplight_initialize+0x280>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6313      	str	r3, [r2, #48]	@ 0x30
		RCC->AHB1ENR = RCC->AHB1ENR | 0x8;
 800039a:	4b3d      	ldr	r3, [pc, #244]	@ (8000490 <stoplight_initialize+0x280>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039e:	4a3c      	ldr	r2, [pc, #240]	@ (8000490 <stoplight_initialize+0x280>)
 80003a0:	f043 0308 	orr.w	r3, r3, #8
 80003a4:	6313      	str	r3, [r2, #48]	@ 0x30
		gpio_pin light;
		light.mode = GPIO_PIN_MODE_OUTPUT;
 80003a6:	2301      	movs	r3, #1
 80003a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
		light.output_type = GPIO_PIN_OUTPUT_TYPE_PUSH_PULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	663b      	str	r3, [r7, #96]	@ 0x60
		light.output_speed = GPIO_PIN_OUTPUT_SPEED_MEDIUM;
 80003ae:	2301      	movs	r3, #1
 80003b0:	667b      	str	r3, [r7, #100]	@ 0x64
		light.pull = GPIO_PIN_PULL_NONE;
 80003b2:	2300      	movs	r3, #0
 80003b4:	66bb      	str	r3, [r7, #104]	@ 0x68
		light.alternate_function = GPIO_PIN_ALTERNATE_FUNCTION_AF0_SYSTEM;
 80003b6:	2300      	movs	r3, #0
 80003b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
		for(int i = 0; i < 3; i++)
 80003ba:	2300      	movs	r3, #0
 80003bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80003c0:	e00d      	b.n	80003de <stoplight_initialize+0x1ce>
		{
			light.pin = i;
 80003c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80003c6:	65bb      	str	r3, [r7, #88]	@ 0x58
			gpio_init(GPIOD, &light);
 80003c8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80003cc:	4619      	mov	r1, r3
 80003ce:	4834      	ldr	r0, [pc, #208]	@ (80004a0 <stoplight_initialize+0x290>)
 80003d0:	f000 fa20 	bl	8000814 <gpio_init>
		for(int i = 0; i < 3; i++)
 80003d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80003d8:	3301      	adds	r3, #1
 80003da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80003de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80003e2:	2b02      	cmp	r3, #2
 80003e4:	dded      	ble.n	80003c2 <stoplight_initialize+0x1b2>
		}
		gpio_pin spi;
		spi.mode = GPIO_PIN_MODE_ALT_FUNCTION;
 80003e6:	2302      	movs	r3, #2
 80003e8:	647b      	str	r3, [r7, #68]	@ 0x44
		spi.alternate_function = GPIO_PIN_ALTERNATE_FUNCTION_AF5_SPI1_2_3_4;
 80003ea:	2305      	movs	r3, #5
 80003ec:	657b      	str	r3, [r7, #84]	@ 0x54
		for(int i = 4; i < 8; i++)
 80003ee:	2304      	movs	r3, #4
 80003f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80003f4:	e00d      	b.n	8000412 <stoplight_initialize+0x202>
		{
			spi.pin = i;
 80003f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80003fa:	643b      	str	r3, [r7, #64]	@ 0x40
			gpio_init(GPIOA, &spi);
 80003fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000400:	4619      	mov	r1, r3
 8000402:	4824      	ldr	r0, [pc, #144]	@ (8000494 <stoplight_initialize+0x284>)
 8000404:	f000 fa06 	bl	8000814 <gpio_init>
		for(int i = 4; i < 8; i++)
 8000408:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800040c:	3301      	adds	r3, #1
 800040e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000416:	2b07      	cmp	r3, #7
 8000418:	dded      	ble.n	80003f6 <stoplight_initialize+0x1e6>
		}
		spi_type spi1;
		spi1.spi = SPI1;
 800041a:	4b1f      	ldr	r3, [pc, #124]	@ (8000498 <stoplight_initialize+0x288>)
 800041c:	60fb      	str	r3, [r7, #12]
		spi1.type = SPI1_TYPE;
 800041e:	2300      	movs	r3, #0
 8000420:	613b      	str	r3, [r7, #16]
		spi1.bidimode = SPI_BIDIMODE_UNI;
 8000422:	2300      	movs	r3, #0
 8000424:	82bb      	strh	r3, [r7, #20]
		spi1.bidioe = SPI_BIDIOE_DISABLED;
 8000426:	2300      	movs	r3, #0
 8000428:	82fb      	strh	r3, [r7, #22]
		spi1.crcen = SPI_CRCEN_DISABLED;
 800042a:	2300      	movs	r3, #0
 800042c:	833b      	strh	r3, [r7, #24]
		spi1.crcnext = SPI_CRCNEXT_NO_PHASE;
 800042e:	2300      	movs	r3, #0
 8000430:	837b      	strh	r3, [r7, #26]
		spi1.dff = SPI_DFF_8_BIT;
 8000432:	2300      	movs	r3, #0
 8000434:	83bb      	strh	r3, [r7, #28]
		spi1.rxonly = SPI_RXONLY_FULL_DUPLEX;
 8000436:	2300      	movs	r3, #0
 8000438:	83fb      	strh	r3, [r7, #30]
		spi1.ssm = SPI_SSM_DISABLED;
 800043a:	2300      	movs	r3, #0
 800043c:	843b      	strh	r3, [r7, #32]
		spi1.ssi = SPI_SSI_SELECT;
 800043e:	2300      	movs	r3, #0
 8000440:	847b      	strh	r3, [r7, #34]	@ 0x22
		spi1.lsbfirst = SPI_LSBFIRST_MSB;
 8000442:	2300      	movs	r3, #0
 8000444:	84bb      	strh	r3, [r7, #36]	@ 0x24
		spi1.spe = SPI_SPE_ENABLE;
 8000446:	2301      	movs	r3, #1
 8000448:	84fb      	strh	r3, [r7, #38]	@ 0x26
		spi1.br = SPI_BR_64;
 800044a:	f240 1301 	movw	r3, #257	@ 0x101
 800044e:	853b      	strh	r3, [r7, #40]	@ 0x28
		spi1.mstr = SPI_MSTR_SLAVE;
 8000450:	2300      	movs	r3, #0
 8000452:	857b      	strh	r3, [r7, #42]	@ 0x2a
		spi1.cpol = SPI_CPOL_1;
 8000454:	2301      	movs	r3, #1
 8000456:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		spi1.cpha = SPI_CPHA_SECOND;
 8000458:	2301      	movs	r3, #1
 800045a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		spi1.txeie = SPI_TXEIE_MASKED;
 800045c:	2300      	movs	r3, #0
 800045e:	863b      	strh	r3, [r7, #48]	@ 0x30
		spi1.rxneie = SPI_RXNEIE_NOT_MASKED;
 8000460:	2301      	movs	r3, #1
 8000462:	867b      	strh	r3, [r7, #50]	@ 0x32
		spi1.errie = SPI_ERRIE_MASKED;
 8000464:	2300      	movs	r3, #0
 8000466:	86bb      	strh	r3, [r7, #52]	@ 0x34
		spi1.frf = SPI_FRF_MOTOROLA;
 8000468:	2300      	movs	r3, #0
 800046a:	86fb      	strh	r3, [r7, #54]	@ 0x36
		spi1.ssoe = SPI_SSOE_ENABLED;
 800046c:	2301      	movs	r3, #1
 800046e:	873b      	strh	r3, [r7, #56]	@ 0x38
		spi1.txdmaen = SPI_TXDMAEN_DISABLED;
 8000470:	2300      	movs	r3, #0
 8000472:	877b      	strh	r3, [r7, #58]	@ 0x3a
		spi1.rxdmaen = SPI_RXDMAEN_DISABLED;
 8000474:	2300      	movs	r3, #0
 8000476:	87bb      	strh	r3, [r7, #60]	@ 0x3c
		spi_configure(&spi1);
 8000478:	f107 030c 	add.w	r3, r7, #12
 800047c:	4618      	mov	r0, r3
 800047e:	f000 fcaf 	bl	8000de0 <spi_configure>
		stoplight_configure_interrupts(type);
 8000482:	6878      	ldr	r0, [r7, #4]
 8000484:	f000 f80e 	bl	80004a4 <stoplight_configure_interrupts>
	}
}
 8000488:	bf00      	nop
 800048a:	37b0      	adds	r7, #176	@ 0xb0
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40023800 	.word	0x40023800
 8000494:	40020000 	.word	0x40020000
 8000498:	40013000 	.word	0x40013000
 800049c:	20000024 	.word	0x20000024
 80004a0:	40020c00 	.word	0x40020c00

080004a4 <stoplight_configure_interrupts>:

void stoplight_configure_interrupts(uint32_t type)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	if(type == STOPLIGHT_MASTER)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d11f      	bne.n	80004f2 <stoplight_configure_interrupts+0x4e>
	{
		gpio_configure_interrupt(STOPLIGHT_TRAFFIC_SENSOR, GPIO_FALLING_EDGE);
 80004b2:	2101      	movs	r1, #1
 80004b4:	2000      	movs	r0, #0
 80004b6:	f000 faf7 	bl	8000aa8 <gpio_configure_interrupt>
		gpio_enable_interrupt(STOPLIGHT_TRAFFIC_SENSOR, EXTI0_IRQn);
 80004ba:	2106      	movs	r1, #6
 80004bc:	2000      	movs	r0, #0
 80004be:	f000 fb67 	bl	8000b90 <gpio_enable_interrupt>
		gpio_configure_interrupt(STOPLIGHT_PEDESTRIAN_BUTTON, GPIO_FALLING_EDGE);
 80004c2:	2101      	movs	r1, #1
 80004c4:	2001      	movs	r0, #1
 80004c6:	f000 faef 	bl	8000aa8 <gpio_configure_interrupt>
		gpio_enable_interrupt(STOPLIGHT_PEDESTRIAN_BUTTON, EXTI1_IRQn);
 80004ca:	2107      	movs	r1, #7
 80004cc:	2001      	movs	r0, #1
 80004ce:	f000 fb5f 	bl	8000b90 <gpio_enable_interrupt>
		gpio_configure_interrupt(STOPLIGHT_EMERGENCY_BUTTON, GPIO_FALLING_EDGE);
 80004d2:	2101      	movs	r1, #1
 80004d4:	2002      	movs	r0, #2
 80004d6:	f000 fae7 	bl	8000aa8 <gpio_configure_interrupt>
		gpio_enable_interrupt(STOPLIGHT_EMERGENCY_BUTTON, EXTI2_IRQn);
 80004da:	2108      	movs	r1, #8
 80004dc:	2002      	movs	r0, #2
 80004de:	f000 fb57 	bl	8000b90 <gpio_enable_interrupt>
		gpio_configure_interrupt(STOPLIGHT_OUT_OF_ORDER_BUTTON, GPIO_FALLING_EDGE);
 80004e2:	2101      	movs	r1, #1
 80004e4:	2003      	movs	r0, #3
 80004e6:	f000 fadf 	bl	8000aa8 <gpio_configure_interrupt>
		gpio_enable_interrupt(STOPLIGHT_OUT_OF_ORDER_BUTTON, EXTI3_IRQn);
 80004ea:	2109      	movs	r1, #9
 80004ec:	2003      	movs	r0, #3
 80004ee:	f000 fb4f 	bl	8000b90 <gpio_enable_interrupt>
	}
	spi_enable_interrupt(SPI1_IRQn);
 80004f2:	2023      	movs	r0, #35	@ 0x23
 80004f4:	f000 ff30 	bl	8001358 <spi_enable_interrupt>
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <stoplight_slave_change_light>:

void stoplight_slave_change_light(uint16_t color)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]
	gpio_write_to_port(GPIOD, color);
 800050a:	88fb      	ldrh	r3, [r7, #6]
 800050c:	4619      	mov	r1, r3
 800050e:	4803      	ldr	r0, [pc, #12]	@ (800051c <stoplight_slave_change_light+0x1c>)
 8000510:	f000 faa7 	bl	8000a62 <gpio_write_to_port>
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40020c00 	.word	0x40020c00

08000520 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	rx_data = spi_dr_read(SPI1);
 8000524:	4805      	ldr	r0, [pc, #20]	@ (800053c <SPI1_IRQHandler+0x1c>)
 8000526:	f000 fef4 	bl	8001312 <spi_dr_read>
 800052a:	4603      	mov	r3, r0
 800052c:	461a      	mov	r2, r3
 800052e:	4b04      	ldr	r3, [pc, #16]	@ (8000540 <SPI1_IRQHandler+0x20>)
 8000530:	801a      	strh	r2, [r3, #0]
	stoplight_handle_rx_data();
 8000532:	f000 f83b 	bl	80005ac <stoplight_handle_rx_data>
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40013000 	.word	0x40013000
 8000540:	2000001c 	.word	0x2000001c

08000544 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	gpio_clear_interrupt(STOPLIGHT_TRAFFIC_SENSOR);
 8000548:	2000      	movs	r0, #0
 800054a:	f000 fb4b 	bl	8000be4 <gpio_clear_interrupt>
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}

08000552 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	af00      	add	r7, sp, #0
	gpio_clear_interrupt(STOPLIGHT_PEDESTRIAN_BUTTON);
 8000556:	2001      	movs	r0, #1
 8000558:	f000 fb44 	bl	8000be4 <gpio_clear_interrupt>
	stoplight_pedestian_crossing();
 800055c:	f000 f8b4 	bl	80006c8 <stoplight_pedestian_crossing>
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}

08000564 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	gpio_clear_interrupt(STOPLIGHT_EMERGENCY_BUTTON);
 8000568:	2002      	movs	r0, #2
 800056a:	f000 fb3b 	bl	8000be4 <gpio_clear_interrupt>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}

08000572 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	af00      	add	r7, sp, #0
	gpio_clear_interrupt(STOPLIGHT_OUT_OF_ORDER_BUTTON);
 8000576:	2003      	movs	r0, #3
 8000578:	f000 fb34 	bl	8000be4 <gpio_clear_interrupt>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	if (TIM2->SR & 0x1)
 8000584:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000588:	691b      	ldr	r3, [r3, #16]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	2b00      	cmp	r3, #0
 8000590:	d009      	beq.n	80005a6 <TIM2_IRQHandler+0x26>
	{
		TIM2->SR &= ~0x1;
 8000592:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000596:	691b      	ldr	r3, [r3, #16]
 8000598:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800059c:	f023 0301 	bic.w	r3, r3, #1
 80005a0:	6113      	str	r3, [r2, #16]
	    stoplight_timer_handler();
 80005a2:	f000 f827 	bl	80005f4 <stoplight_timer_handler>
	}
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <stoplight_handle_rx_data>:

void stoplight_handle_rx_data()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	if(ms == STOPLIGHT_SLAVE)
 80005b0:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <stoplight_handle_rx_data+0x40>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d114      	bne.n	80005e2 <stoplight_handle_rx_data+0x36>
	{
		if(rx_data == STOPLIGHT_RED || rx_data == STOPLIGHT_YELLOW || rx_data == STOPLIGHT_GREEN || rx_data == STOPLIGHT_OFF)
 80005b8:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <stoplight_handle_rx_data+0x44>)
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d00b      	beq.n	80005d8 <stoplight_handle_rx_data+0x2c>
 80005c0:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <stoplight_handle_rx_data+0x44>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d007      	beq.n	80005d8 <stoplight_handle_rx_data+0x2c>
 80005c8:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <stoplight_handle_rx_data+0x44>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	2b04      	cmp	r3, #4
 80005ce:	d003      	beq.n	80005d8 <stoplight_handle_rx_data+0x2c>
 80005d0:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <stoplight_handle_rx_data+0x44>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d104      	bne.n	80005e2 <stoplight_handle_rx_data+0x36>
		{
			stoplight_slave_change_light(rx_data);
 80005d8:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <stoplight_handle_rx_data+0x44>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ff8f 	bl	8000500 <stoplight_slave_change_light>
		{
			//spi_slave_transmit(SPI1, STOPLIGHT_NACK);
		}

	}
	if(ms == STOPLIGHT_MASTER)
 80005e2:	4b02      	ldr	r3, [pc, #8]	@ (80005ec <stoplight_handle_rx_data+0x40>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b01      	cmp	r3, #1
		if(rx_data == STOPLIGHT_NACK)
		{

		}
	}
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000020 	.word	0x20000020
 80005f0:	2000001c 	.word	0x2000001c

080005f4 <stoplight_timer_handler>:

void stoplight_timer_handler()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	switch(state)
 80005f8:	4b31      	ldr	r3, [pc, #196]	@ (80006c0 <stoplight_timer_handler+0xcc>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	2b05      	cmp	r3, #5
 8000600:	d85c      	bhi.n	80006bc <stoplight_timer_handler+0xc8>
 8000602:	a201      	add	r2, pc, #4	@ (adr r2, 8000608 <stoplight_timer_handler+0x14>)
 8000604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000608:	08000621 	.word	0x08000621
 800060c:	0800063b 	.word	0x0800063b
 8000610:	08000655 	.word	0x08000655
 8000614:	08000689 	.word	0x08000689
 8000618:	0800066f 	.word	0x0800066f
 800061c:	080006a3 	.word	0x080006a3
	{
	case STOPLIGHT_STATE_STOP:
	{
		TIM2->ARR = STOPLIGHT_TIMER_GO;
 8000620:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000624:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000628:	62da      	str	r2, [r3, #44]	@ 0x2c
		spi_master_transmit(SPI1, STOPLIGHT_YELLOW);
 800062a:	2102      	movs	r1, #2
 800062c:	4825      	ldr	r0, [pc, #148]	@ (80006c4 <stoplight_timer_handler+0xd0>)
 800062e:	f000 fe7d 	bl	800132c <spi_master_transmit>
		state = STOPLIGHT_STATE_READY;
 8000632:	4b23      	ldr	r3, [pc, #140]	@ (80006c0 <stoplight_timer_handler+0xcc>)
 8000634:	2201      	movs	r2, #1
 8000636:	801a      	strh	r2, [r3, #0]
	}break;
 8000638:	e040      	b.n	80006bc <stoplight_timer_handler+0xc8>
	case STOPLIGHT_STATE_READY:
	{
		TIM2->ARR = STOPLIGHT_TIMER_BLINKING_OFF;
 800063a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800063e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000642:	62da      	str	r2, [r3, #44]	@ 0x2c
		spi_master_transmit(SPI1, STOPLIGHT_GREEN);
 8000644:	2104      	movs	r1, #4
 8000646:	481f      	ldr	r0, [pc, #124]	@ (80006c4 <stoplight_timer_handler+0xd0>)
 8000648:	f000 fe70 	bl	800132c <spi_master_transmit>
		state = STOPLIGHT_STATE_GO;
 800064c:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <stoplight_timer_handler+0xcc>)
 800064e:	2202      	movs	r2, #2
 8000650:	801a      	strh	r2, [r3, #0]
	}break;
 8000652:	e033      	b.n	80006bc <stoplight_timer_handler+0xc8>
	case STOPLIGHT_STATE_GO:
	{
		TIM2->ARR = STOPLIGHT_TIMER_BLINKING_GREEN;
 8000654:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800065c:	62da      	str	r2, [r3, #44]	@ 0x2c
		spi_master_transmit(SPI1, STOPLIGHT_OFF);
 800065e:	2100      	movs	r1, #0
 8000660:	4818      	ldr	r0, [pc, #96]	@ (80006c4 <stoplight_timer_handler+0xd0>)
 8000662:	f000 fe63 	bl	800132c <spi_master_transmit>
		state = STOPLIGHT_STATE_BLINKING_OFF;
 8000666:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <stoplight_timer_handler+0xcc>)
 8000668:	2204      	movs	r2, #4
 800066a:	801a      	strh	r2, [r3, #0]
	}break;
 800066c:	e026      	b.n	80006bc <stoplight_timer_handler+0xc8>
	case STOPLIGHT_STATE_BLINKING_OFF:
	{
		TIM2->ARR = STOPLIGHT_TIMER_BLINKING_END;
 800066e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000672:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000676:	62da      	str	r2, [r3, #44]	@ 0x2c
		spi_master_transmit(SPI1, STOPLIGHT_GREEN);
 8000678:	2104      	movs	r1, #4
 800067a:	4812      	ldr	r0, [pc, #72]	@ (80006c4 <stoplight_timer_handler+0xd0>)
 800067c:	f000 fe56 	bl	800132c <spi_master_transmit>
		state = STOPLIGHT_STATE_BLINKING_GREEN;
 8000680:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <stoplight_timer_handler+0xcc>)
 8000682:	2203      	movs	r2, #3
 8000684:	801a      	strh	r2, [r3, #0]
	}break;
 8000686:	e019      	b.n	80006bc <stoplight_timer_handler+0xc8>
	case STOPLIGHT_STATE_BLINKING_GREEN:
	{
		TIM2->ARR = STOPLIGHT_TIMER_STOP;
 8000688:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800068c:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000690:	62da      	str	r2, [r3, #44]	@ 0x2c
		spi_master_transmit(SPI1, STOPLIGHT_YELLOW);
 8000692:	2102      	movs	r1, #2
 8000694:	480b      	ldr	r0, [pc, #44]	@ (80006c4 <stoplight_timer_handler+0xd0>)
 8000696:	f000 fe49 	bl	800132c <spi_master_transmit>
		state = STOPLIGHT_STATE_BLINKING_END;
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <stoplight_timer_handler+0xcc>)
 800069c:	2205      	movs	r2, #5
 800069e:	801a      	strh	r2, [r3, #0]
	}break;
 80006a0:	e00c      	b.n	80006bc <stoplight_timer_handler+0xc8>
	case STOPLIGHT_STATE_BLINKING_END:
	{
		TIM2->ARR = STOPLIGHT_TIMER_READY;
 80006a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006a6:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80006aa:	62da      	str	r2, [r3, #44]	@ 0x2c
		spi_master_transmit(SPI1, STOPLIGHT_RED);
 80006ac:	2101      	movs	r1, #1
 80006ae:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <stoplight_timer_handler+0xd0>)
 80006b0:	f000 fe3c 	bl	800132c <spi_master_transmit>
		state = STOPLIGHT_STATE_STOP;
 80006b4:	4b02      	ldr	r3, [pc, #8]	@ (80006c0 <stoplight_timer_handler+0xcc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	801a      	strh	r2, [r3, #0]
	}break;
 80006ba:	bf00      	nop
	default:
	{};
	}
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000024 	.word	0x20000024
 80006c4:	40013000 	.word	0x40013000

080006c8 <stoplight_pedestian_crossing>:
{

}

void stoplight_pedestian_crossing()
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
	if(state != STOPLIGHT_STATE_STOP)
 80006cc:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <stoplight_pedestian_crossing+0x5c>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d010      	beq.n	80006f8 <stoplight_pedestian_crossing+0x30>
	{
		state = STOPLIGHT_STATE_BLINKING_GREEN;
 80006d6:	4b13      	ldr	r3, [pc, #76]	@ (8000724 <stoplight_pedestian_crossing+0x5c>)
 80006d8:	2203      	movs	r2, #3
 80006da:	801a      	strh	r2, [r3, #0]
		TIM2->ARR = STOPLIGHT_TIMER_BLINKING_OFF;
 80006dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e4:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->EGR = TIM2->EGR | 0x1;
 80006e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6153      	str	r3, [r2, #20]
	{
		state = STOPLIGHT_STATE_BLINKING_END;
		TIM2->ARR = STOPLIGHT_TIMER_STOP;
		TIM2->EGR = TIM2->EGR | 0x1;
	}
}
 80006f6:	e00f      	b.n	8000718 <stoplight_pedestian_crossing+0x50>
		state = STOPLIGHT_STATE_BLINKING_END;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <stoplight_pedestian_crossing+0x5c>)
 80006fa:	2205      	movs	r2, #5
 80006fc:	801a      	strh	r2, [r3, #0]
		TIM2->ARR = STOPLIGHT_TIMER_STOP;
 80006fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000702:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000706:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->EGR = TIM2->EGR | 0x1;
 8000708:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	6153      	str	r3, [r2, #20]
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	20000024 	.word	0x20000024

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072e:	f000 f80f 	bl	8000750 <SystemClock_Config>

	    spi_cr1_configure_spe(spi1.spi, SPI_SPE_DISABLE);
  }
*/

  int mstr = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	607b      	str	r3, [r7, #4]

  if(mstr)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d003      	beq.n	8000744 <main+0x1c>
  {
	  stoplight_initialize(STOPLIGHT_MASTER);
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff fd67 	bl	8000210 <stoplight_initialize>
 8000742:	e003      	b.n	800074c <main+0x24>
  }
  else
  {
	  stoplight_initialize(STOPLIGHT_SLAVE);
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff fd63 	bl	8000210 <stoplight_initialize>

  }

  while (1)
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <main+0x24>

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }*/
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
	...

08000760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <SystemInit+0x20>)
 8000766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800076a:	4a05      	ldr	r2, [pc, #20]	@ (8000780 <SystemInit+0x20>)
 800076c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000770:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000784:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000788:	f7ff ffea 	bl	8000760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800078c:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800078e:	490d      	ldr	r1, [pc, #52]	@ (80007c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000790:	4a0d      	ldr	r2, [pc, #52]	@ (80007c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000794:	e002      	b.n	800079c <LoopCopyDataInit>

08000796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079a:	3304      	adds	r3, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800079c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a0:	d3f9      	bcc.n	8000796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a2:	4a0a      	ldr	r2, [pc, #40]	@ (80007cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007a4:	4c0a      	ldr	r4, [pc, #40]	@ (80007d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a8:	e001      	b.n	80007ae <LoopFillZerobss>

080007aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ac:	3204      	adds	r2, #4

080007ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b0:	d3fb      	bcc.n	80007aa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80007b2:	f000 fddf 	bl	8001374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007b6:	f7ff ffb7 	bl	8000728 <main>
  bx  lr    
 80007ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007c8:	080013dc 	.word	0x080013dc
  ldr r2, =_sbss
 80007cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007d0:	20000028 	.word	0x20000028

080007d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007d4:	e7fe      	b.n	80007d4 <ADC_IRQHandler>
	...

080007d8 <__NVIC_EnableIRQ>:
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	db0b      	blt.n	8000802 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	f003 021f 	and.w	r2, r3, #31
 80007f0:	4907      	ldr	r1, [pc, #28]	@ (8000810 <__NVIC_EnableIRQ+0x38>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	095b      	lsrs	r3, r3, #5
 80007f8:	2001      	movs	r0, #1
 80007fa:	fa00 f202 	lsl.w	r2, r0, r2
 80007fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000e100 	.word	0xe000e100

08000814 <gpio_init>:
}

//**************************************GPIO PIN CONFIGURATION FUNCTIONS****************************************

int gpio_init(GPIO_TypeDef* port, gpio_pin* pin)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
	if(gpio_configure_pin_mode(port, pin->pin, pin->mode) != 0)
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	b299      	uxth	r1, r3
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	461a      	mov	r2, r3
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f000 f847 	bl	80008be <gpio_configure_pin_mode>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d002      	beq.n	800083c <gpio_init+0x28>
	{
		return -1;
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	e03c      	b.n	80008b6 <gpio_init+0xa2>
	}
	if(gpio_configure_pin_output_type(port, pin->pin, pin->output_type) != 0)
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	b299      	uxth	r1, r3
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	461a      	mov	r2, r3
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f000 f85b 	bl	8000904 <gpio_configure_pin_output_type>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <gpio_init+0x46>
	{
		return -1;
 8000854:	f04f 33ff 	mov.w	r3, #4294967295
 8000858:	e02d      	b.n	80008b6 <gpio_init+0xa2>
	}
	if(gpio_configure_pin_output_speed(port, pin->pin, pin->output_speed) != 0)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	b299      	uxth	r1, r3
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	461a      	mov	r2, r3
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f000 f86d 	bl	8000946 <gpio_configure_pin_output_speed>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <gpio_init+0x64>
	{
		return -1;
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	e01e      	b.n	80008b6 <gpio_init+0xa2>
	}
	if(gpio_configure_pin_pull(port, pin->pin, pin->pull) != 0)
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	b299      	uxth	r1, r3
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	691b      	ldr	r3, [r3, #16]
 8000882:	461a      	mov	r2, r3
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f000 f881 	bl	800098c <gpio_configure_pin_pull>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d002      	beq.n	8000896 <gpio_init+0x82>
	{
		return -1;
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
 8000894:	e00f      	b.n	80008b6 <gpio_init+0xa2>
	}
	if(gpio_configure_pin_alternate_function(port, pin->pin, pin->alternate_function) != 0)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	b299      	uxth	r1, r3
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	461a      	mov	r2, r3
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f000 f895 	bl	80009d2 <gpio_configure_pin_alternate_function>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <gpio_init+0xa0>
	{
		return -1;
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	e000      	b.n	80008b6 <gpio_init+0xa2>
	}
	return 0;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <gpio_configure_pin_mode>:

int gpio_configure_pin_mode(GPIO_TypeDef* port, uint16_t pin, uint32_t mode)
{
 80008be:	b480      	push	{r7}
 80008c0:	b085      	sub	sp, #20
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	60f8      	str	r0, [r7, #12]
 80008c6:	460b      	mov	r3, r1
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	817b      	strh	r3, [r7, #10]
	port->MODER = port->MODER & ~(0x00000003 << (pin*2));
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	897a      	ldrh	r2, [r7, #10]
 80008d2:	0052      	lsls	r2, r2, #1
 80008d4:	2103      	movs	r1, #3
 80008d6:	fa01 f202 	lsl.w	r2, r1, r2
 80008da:	43d2      	mvns	r2, r2
 80008dc:	401a      	ands	r2, r3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	601a      	str	r2, [r3, #0]
	port->MODER = port->MODER | (mode << (pin*2));
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	897b      	ldrh	r3, [r7, #10]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	fa01 f303 	lsl.w	r3, r1, r3
 80008f0:	431a      	orrs	r2, r3
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	601a      	str	r2, [r3, #0]

	return 0;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <gpio_configure_pin_output_type>:

int gpio_configure_pin_output_type(GPIO_TypeDef* port, uint16_t pin, uint32_t type)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	460b      	mov	r3, r1
 800090e:	607a      	str	r2, [r7, #4]
 8000910:	817b      	strh	r3, [r7, #10]
	port->OTYPER = port->OTYPER & ~(0x00000001 << pin);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	897a      	ldrh	r2, [r7, #10]
 8000918:	2101      	movs	r1, #1
 800091a:	fa01 f202 	lsl.w	r2, r1, r2
 800091e:	43d2      	mvns	r2, r2
 8000920:	401a      	ands	r2, r3
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	605a      	str	r2, [r3, #4]
	port->OTYPER = port->OTYPER | (type << pin);
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	685a      	ldr	r2, [r3, #4]
 800092a:	897b      	ldrh	r3, [r7, #10]
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	431a      	orrs	r2, r3
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	605a      	str	r2, [r3, #4]

	return 0;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <gpio_configure_pin_output_speed>:

int gpio_configure_pin_output_speed(GPIO_TypeDef* port, uint16_t pin, uint32_t speed)
{
 8000946:	b480      	push	{r7}
 8000948:	b085      	sub	sp, #20
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	460b      	mov	r3, r1
 8000950:	607a      	str	r2, [r7, #4]
 8000952:	817b      	strh	r3, [r7, #10]
	port->OSPEEDR = port->OSPEEDR & ~(0x00000003 << (pin*2));
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	897a      	ldrh	r2, [r7, #10]
 800095a:	0052      	lsls	r2, r2, #1
 800095c:	2103      	movs	r1, #3
 800095e:	fa01 f202 	lsl.w	r2, r1, r2
 8000962:	43d2      	mvns	r2, r2
 8000964:	401a      	ands	r2, r3
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	609a      	str	r2, [r3, #8]
	port->OSPEEDR = port->OSPEEDR | (speed << (pin*2));
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	689a      	ldr	r2, [r3, #8]
 800096e:	897b      	ldrh	r3, [r7, #10]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	fa01 f303 	lsl.w	r3, r1, r3
 8000978:	431a      	orrs	r2, r3
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	609a      	str	r2, [r3, #8]

	return 0;
 800097e:	2300      	movs	r3, #0
}
 8000980:	4618      	mov	r0, r3
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <gpio_configure_pin_pull>:

int gpio_configure_pin_pull(GPIO_TypeDef* port, uint16_t pin, uint32_t pull)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	460b      	mov	r3, r1
 8000996:	607a      	str	r2, [r7, #4]
 8000998:	817b      	strh	r3, [r7, #10]
	port->PUPDR = port->PUPDR & ~(0x00000003 << (pin*2));
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	897a      	ldrh	r2, [r7, #10]
 80009a0:	0052      	lsls	r2, r2, #1
 80009a2:	2103      	movs	r1, #3
 80009a4:	fa01 f202 	lsl.w	r2, r1, r2
 80009a8:	43d2      	mvns	r2, r2
 80009aa:	401a      	ands	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	60da      	str	r2, [r3, #12]
	port->PUPDR = port->PUPDR | (pull << (pin*2));
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	68da      	ldr	r2, [r3, #12]
 80009b4:	897b      	ldrh	r3, [r7, #10]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	fa01 f303 	lsl.w	r3, r1, r3
 80009be:	431a      	orrs	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	60da      	str	r2, [r3, #12]

	return 0;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <gpio_configure_pin_alternate_function>:

int gpio_configure_pin_alternate_function(GPIO_TypeDef* port, uint16_t pin, uint32_t alt_function)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b085      	sub	sp, #20
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	460b      	mov	r3, r1
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	817b      	strh	r3, [r7, #10]
	if(pin < 8)
 80009e0:	897b      	ldrh	r3, [r7, #10]
 80009e2:	2b07      	cmp	r3, #7
 80009e4:	d814      	bhi.n	8000a10 <gpio_configure_pin_alternate_function+0x3e>
	{
		port->AFR[0] = port->AFR[0] & ~(0x0000000F << (pin*4));
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	6a1b      	ldr	r3, [r3, #32]
 80009ea:	897a      	ldrh	r2, [r7, #10]
 80009ec:	0092      	lsls	r2, r2, #2
 80009ee:	210f      	movs	r1, #15
 80009f0:	fa01 f202 	lsl.w	r2, r1, r2
 80009f4:	43d2      	mvns	r2, r2
 80009f6:	401a      	ands	r2, r3
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	621a      	str	r2, [r3, #32]
		port->AFR[0] = port->AFR[0] | (alt_function << (pin*4));
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	6a1a      	ldr	r2, [r3, #32]
 8000a00:	897b      	ldrh	r3, [r7, #10]
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	621a      	str	r2, [r3, #32]
	{
		//port->AFR[1] = port-AFR[1] & ~(0x0000000F << (pin*4));
		//port->AFR[1] = port->AFR[1] | (alt_function << (pin*4));
	}

	return 0;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <gpio_write_to_pin>:
{
	return ((port->IDR >> pin) & 0x1);
}

int gpio_write_to_pin(GPIO_TypeDef* port, uint16_t pin, uint8_t value)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	460b      	mov	r3, r1
 8000a28:	807b      	strh	r3, [r7, #2]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	707b      	strb	r3, [r7, #1]
	port->ODR = port->ODR & ~(0x00000001 << pin);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	887a      	ldrh	r2, [r7, #2]
 8000a34:	2101      	movs	r1, #1
 8000a36:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3a:	43d2      	mvns	r2, r2
 8000a3c:	401a      	ands	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	615a      	str	r2, [r3, #20]
	port->ODR = port->ODR | (value << pin);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	7879      	ldrb	r1, [r7, #1]
 8000a48:	887a      	ldrh	r2, [r7, #2]
 8000a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4e:	431a      	orrs	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	615a      	str	r2, [r3, #20]

	return 0;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <gpio_write_to_port>:
	}
	return value;
}

int gpio_write_to_port(GPIO_TypeDef* port, uint16_t value)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	for(int i = 0; i < 15; i++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	e011      	b.n	8000a98 <gpio_write_to_port+0x36>
	{
		tmp = value % 2;
 8000a74:	887b      	ldrh	r3, [r7, #2]
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	817b      	strh	r3, [r7, #10]
		gpio_write_to_pin(port, i, tmp);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	897a      	ldrh	r2, [r7, #10]
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	4619      	mov	r1, r3
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff ffc9 	bl	8000a1e <gpio_write_to_pin>
		value = value >> 1;
 8000a8c:	887b      	ldrh	r3, [r7, #2]
 8000a8e:	085b      	lsrs	r3, r3, #1
 8000a90:	807b      	strh	r3, [r7, #2]
	for(int i = 0; i < 15; i++)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	3301      	adds	r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	2b0e      	cmp	r3, #14
 8000a9c:	ddea      	ble.n	8000a74 <gpio_write_to_port+0x12>
	}

	return 0;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <gpio_configure_interrupt>:

//*************************************GPIO INTERRUPT HANDLING FUNTIONS***************************************

int gpio_configure_interrupt(uint16_t pin, uint32_t edge)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	80fb      	strh	r3, [r7, #6]
	if(edge == GPIO_RISING_EDGE)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d116      	bne.n	8000ae8 <gpio_configure_interrupt+0x40>
	{
		EXTI->RTSR = EXTI->RTSR & ~(0x00000001 << pin);
 8000aba:	4b34      	ldr	r3, [pc, #208]	@ (8000b8c <gpio_configure_interrupt+0xe4>)
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	88fa      	ldrh	r2, [r7, #6]
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac6:	43d2      	mvns	r2, r2
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4a30      	ldr	r2, [pc, #192]	@ (8000b8c <gpio_configure_interrupt+0xe4>)
 8000acc:	400b      	ands	r3, r1
 8000ace:	6093      	str	r3, [r2, #8]
		EXTI->RTSR = EXTI->RTSR | (1 << pin);
 8000ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b8c <gpio_configure_interrupt+0xe4>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	88fa      	ldrh	r2, [r7, #6]
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8000adc:	4611      	mov	r1, r2
 8000ade:	4a2b      	ldr	r2, [pc, #172]	@ (8000b8c <gpio_configure_interrupt+0xe4>)
 8000ae0:	430b      	orrs	r3, r1
 8000ae2:	6093      	str	r3, [r2, #8]

		return 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	e04a      	b.n	8000b7e <gpio_configure_interrupt+0xd6>
	}
	else if(edge == GPIO_FALLING_EDGE)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d116      	bne.n	8000b1c <gpio_configure_interrupt+0x74>
	{
		EXTI->FTSR = EXTI->FTSR & ~(0x00000001 << pin);
 8000aee:	4b27      	ldr	r3, [pc, #156]	@ (8000b8c <gpio_configure_interrupt+0xe4>)
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	88fa      	ldrh	r2, [r7, #6]
 8000af4:	2101      	movs	r1, #1
 8000af6:	fa01 f202 	lsl.w	r2, r1, r2
 8000afa:	43d2      	mvns	r2, r2
 8000afc:	4611      	mov	r1, r2
 8000afe:	4a23      	ldr	r2, [pc, #140]	@ (8000b8c <gpio_configure_interrupt+0xe4>)
 8000b00:	400b      	ands	r3, r1
 8000b02:	60d3      	str	r3, [r2, #12]
		EXTI->FTSR = EXTI->FTSR | (1 << pin);
 8000b04:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <gpio_configure_interrupt+0xe4>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	88fa      	ldrh	r2, [r7, #6]
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b10:	4611      	mov	r1, r2
 8000b12:	4a1e      	ldr	r2, [pc, #120]	@ (8000b8c <gpio_configure_interrupt+0xe4>)
 8000b14:	430b      	orrs	r3, r1
 8000b16:	60d3      	str	r3, [r2, #12]

		return 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e030      	b.n	8000b7e <gpio_configure_interrupt+0xd6>
	}
	else if(edge == GPIO_RISING_FALLING_EDGE)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d12b      	bne.n	8000b7a <gpio_configure_interrupt+0xd2>
	{
		EXTI->RTSR = EXTI->RTSR & ~(0x00000001 << pin);
 8000b22:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <gpio_configure_interrupt+0xe4>)
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	88fa      	ldrh	r2, [r7, #6]
 8000b28:	2101      	movs	r1, #1
 8000b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2e:	43d2      	mvns	r2, r2
 8000b30:	4611      	mov	r1, r2
 8000b32:	4a16      	ldr	r2, [pc, #88]	@ (8000b8c <gpio_configure_interrupt+0xe4>)
 8000b34:	400b      	ands	r3, r1
 8000b36:	6093      	str	r3, [r2, #8]
		EXTI->RTSR = EXTI->RTSR | (1 << pin);
 8000b38:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <gpio_configure_interrupt+0xe4>)
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	88fa      	ldrh	r2, [r7, #6]
 8000b3e:	2101      	movs	r1, #1
 8000b40:	fa01 f202 	lsl.w	r2, r1, r2
 8000b44:	4611      	mov	r1, r2
 8000b46:	4a11      	ldr	r2, [pc, #68]	@ (8000b8c <gpio_configure_interrupt+0xe4>)
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	6093      	str	r3, [r2, #8]
		EXTI->FTSR = EXTI->FTSR & ~(0x00000001 << pin);
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <gpio_configure_interrupt+0xe4>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	88fa      	ldrh	r2, [r7, #6]
 8000b52:	2101      	movs	r1, #1
 8000b54:	fa01 f202 	lsl.w	r2, r1, r2
 8000b58:	43d2      	mvns	r2, r2
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b8c <gpio_configure_interrupt+0xe4>)
 8000b5e:	400b      	ands	r3, r1
 8000b60:	60d3      	str	r3, [r2, #12]
		EXTI->FTSR = EXTI->FTSR | (1 << pin);
 8000b62:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <gpio_configure_interrupt+0xe4>)
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	88fa      	ldrh	r2, [r7, #6]
 8000b68:	2101      	movs	r1, #1
 8000b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <gpio_configure_interrupt+0xe4>)
 8000b72:	430b      	orrs	r3, r1
 8000b74:	60d3      	str	r3, [r2, #12]

		return 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e001      	b.n	8000b7e <gpio_configure_interrupt+0xd6>
	}
	else
	{
		return -1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40013c00 	.word	0x40013c00

08000b90 <gpio_enable_interrupt>:

int gpio_enable_interrupt(uint16_t pin, IRQn_Type irq)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	460a      	mov	r2, r1
 8000b9a:	80fb      	strh	r3, [r7, #6]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	717b      	strb	r3, [r7, #5]
	EXTI->IMR = EXTI->IMR & ~(0x00000001 << pin);
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <gpio_enable_interrupt+0x50>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	88fa      	ldrh	r2, [r7, #6]
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bac:	43d2      	mvns	r2, r2
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8000be0 <gpio_enable_interrupt+0x50>)
 8000bb2:	400b      	ands	r3, r1
 8000bb4:	6013      	str	r3, [r2, #0]
	EXTI->IMR = EXTI->IMR | (1 << pin);
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <gpio_enable_interrupt+0x50>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	88fa      	ldrh	r2, [r7, #6]
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4a06      	ldr	r2, [pc, #24]	@ (8000be0 <gpio_enable_interrupt+0x50>)
 8000bc6:	430b      	orrs	r3, r1
 8000bc8:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(irq);
 8000bca:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fe02 	bl	80007d8 <__NVIC_EnableIRQ>

	return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40013c00 	.word	0x40013c00

08000be4 <gpio_clear_interrupt>:

int gpio_clear_interrupt(uint16_t pin)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	80fb      	strh	r3, [r7, #6]
	if(EXTI->PR & (1 << pin))
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <gpio_clear_interrupt+0x44>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	88fa      	ldrh	r2, [r7, #6]
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d00b      	beq.n	8000c18 <gpio_clear_interrupt+0x34>
	{
		EXTI->PR = EXTI->PR | (1 << pin);
 8000c00:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <gpio_clear_interrupt+0x44>)
 8000c02:	695b      	ldr	r3, [r3, #20]
 8000c04:	88fa      	ldrh	r2, [r7, #6]
 8000c06:	2101      	movs	r1, #1
 8000c08:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4a06      	ldr	r2, [pc, #24]	@ (8000c28 <gpio_clear_interrupt+0x44>)
 8000c10:	430b      	orrs	r3, r1
 8000c12:	6153      	str	r3, [r2, #20]

		return 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	e000      	b.n	8000c1a <gpio_clear_interrupt+0x36>
	}

	return 0;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40013c00 	.word	0x40013c00

08000c2c <__NVIC_EnableIRQ>:
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	db0b      	blt.n	8000c56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f003 021f 	and.w	r2, r3, #31
 8000c44:	4907      	ldr	r1, [pc, #28]	@ (8000c64 <__NVIC_EnableIRQ+0x38>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <spi_choose_type>:
 */

#include <STM32F401VE_SPI_driver.h>

void spi_choose_type(uint32_t spi)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	switch(spi)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d826      	bhi.n	8000cc4 <spi_choose_type+0x5c>
 8000c76:	a201      	add	r2, pc, #4	@ (adr r2, 8000c7c <spi_choose_type+0x14>)
 8000c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7c:	08000c8d 	.word	0x08000c8d
 8000c80:	08000c9b 	.word	0x08000c9b
 8000c84:	08000ca9 	.word	0x08000ca9
 8000c88:	08000cb7 	.word	0x08000cb7
	{
	case SPI1_TYPE:
	{
		RCC->APB2ENR = RCC->APB2ENR | SPI1EN;
 8000c8c:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <spi_choose_type+0x68>)
 8000c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c90:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd0 <spi_choose_type+0x68>)
 8000c92:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c96:	6453      	str	r3, [r2, #68]	@ 0x44
	}break;
 8000c98:	e014      	b.n	8000cc4 <spi_choose_type+0x5c>
	case SPI2_TYPE:
	{
		RCC->APB1ENR = RCC->APB1ENR | SPI2EN;
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <spi_choose_type+0x68>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd0 <spi_choose_type+0x68>)
 8000ca0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca4:	6413      	str	r3, [r2, #64]	@ 0x40
	}break;
 8000ca6:	e00d      	b.n	8000cc4 <spi_choose_type+0x5c>
	case SPI3_TYPE:
	{
		RCC->APB1ENR = RCC->APB1ENR | SPI3EN;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <spi_choose_type+0x68>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cac:	4a08      	ldr	r2, [pc, #32]	@ (8000cd0 <spi_choose_type+0x68>)
 8000cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cb2:	6413      	str	r3, [r2, #64]	@ 0x40
	}break;
 8000cb4:	e006      	b.n	8000cc4 <spi_choose_type+0x5c>
	case SPI4_TYPE:
	{
		RCC->APB2ENR = RCC->APB2ENR | SPI4EN;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <spi_choose_type+0x68>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cba:	4a05      	ldr	r2, [pc, #20]	@ (8000cd0 <spi_choose_type+0x68>)
 8000cbc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cc0:	6453      	str	r3, [r2, #68]	@ 0x44
	}break;
 8000cc2:	bf00      	nop
	}
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <spi_configure_cr1>:

void spi_configure_cr1(SPI_TypeDef* type, uint16_t bidimode, uint16_t bidioe, uint16_t crcen, uint16_t crcnext, uint16_t dff, uint16_t rxonly, uint16_t ssm, uint16_t ssi, uint16_t lsbfirst, uint16_t br, uint16_t mstr, uint16_t cpol, uint16_t cpha)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	4608      	mov	r0, r1
 8000cde:	4611      	mov	r1, r2
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	817b      	strh	r3, [r7, #10]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	813b      	strh	r3, [r7, #8]
 8000cea:	4613      	mov	r3, r2
 8000cec:	80fb      	strh	r3, [r7, #6]
	spi_cr1_configure_bidimode(type, bidimode);
 8000cee:	897b      	ldrh	r3, [r7, #10]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f000 f8e2 	bl	8000ebc <spi_cr1_configure_bidimode>
	spi_cr1_configure_bidioe(type, bidioe);
 8000cf8:	893b      	ldrh	r3, [r7, #8]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	68f8      	ldr	r0, [r7, #12]
 8000cfe:	f000 f8f6 	bl	8000eee <spi_cr1_configure_bidioe>
	spi_cr1_configure_crcen(type, crcen);
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	4619      	mov	r1, r3
 8000d06:	68f8      	ldr	r0, [r7, #12]
 8000d08:	f000 f90a 	bl	8000f20 <spi_cr1_configure_crcen>
	spi_cr1_configure_crcnext(type, crcnext);
 8000d0c:	8b3b      	ldrh	r3, [r7, #24]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f000 f91e 	bl	8000f52 <spi_cr1_configure_crcnext>
	spi_cr1_configure_dff(type, dff);
 8000d16:	8bbb      	ldrh	r3, [r7, #28]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f000 f932 	bl	8000f84 <spi_cr1_configure_dff>
	spi_cr1_configure_rxonly(type, rxonly);
 8000d20:	8c3b      	ldrh	r3, [r7, #32]
 8000d22:	4619      	mov	r1, r3
 8000d24:	68f8      	ldr	r0, [r7, #12]
 8000d26:	f000 f946 	bl	8000fb6 <spi_cr1_configure_rxonly>
	spi_cr1_configure_ssm(type, ssm);
 8000d2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	f000 f95a 	bl	8000fe8 <spi_cr1_configure_ssm>
	spi_cr1_configure_ssi(type, ssi);
 8000d34:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d36:	4619      	mov	r1, r3
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f000 f96e 	bl	800101a <spi_cr1_configure_ssi>
	spi_cr1_configure_lsbfirst(type, lsbfirst);
 8000d3e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d40:	4619      	mov	r1, r3
 8000d42:	68f8      	ldr	r0, [r7, #12]
 8000d44:	f000 f982 	bl	800104c <spi_cr1_configure_lsbfirst>
	spi_cr1_configure_br(type, br);
 8000d48:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f000 f9af 	bl	80010b0 <spi_cr1_configure_br>
	spi_cr1_configure_mstr(type, mstr);
 8000d52:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000d54:	4619      	mov	r1, r3
 8000d56:	68f8      	ldr	r0, [r7, #12]
 8000d58:	f000 f9c3 	bl	80010e2 <spi_cr1_configure_mstr>
	spi_cr1_configure_cpol(type, cpol);
 8000d5c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000d5e:	4619      	mov	r1, r3
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f000 f9d7 	bl	8001114 <spi_cr1_configure_cpol>
	spi_cr1_configure_cpha(type, cpha);
 8000d66:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000d68:	4619      	mov	r1, r3
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f000 f9eb 	bl	8001146 <spi_cr1_configure_cpha>
}
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <spi_configure_cr2>:

void spi_configure_cr2(SPI_TypeDef* type, uint16_t txeie, uint16_t rxneie, uint16_t errie, uint16_t frf, uint16_t ssoe, uint16_t txdmaen, uint16_t rxdmaen)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	4608      	mov	r0, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	4603      	mov	r3, r0
 8000d88:	817b      	strh	r3, [r7, #10]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	813b      	strh	r3, [r7, #8]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	80fb      	strh	r3, [r7, #6]
	spi_cr2_configure_txeie(type, txeie);
 8000d92:	897b      	ldrh	r3, [r7, #10]
 8000d94:	4619      	mov	r1, r3
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f000 f9ed 	bl	8001176 <spi_cr2_configure_txeie>
	spi_cr2_configure_rxneie(type, rxneie);
 8000d9c:	893b      	ldrh	r3, [r7, #8]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f000 fa01 	bl	80011a8 <spi_cr2_configure_rxneie>
	spi_cr2_configure_errie(type, errie);
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	4619      	mov	r1, r3
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f000 fa15 	bl	80011da <spi_cr2_configure_errie>
	spi_cr2_configure_frf(type, frf);
 8000db0:	8b3b      	ldrh	r3, [r7, #24]
 8000db2:	4619      	mov	r1, r3
 8000db4:	68f8      	ldr	r0, [r7, #12]
 8000db6:	f000 fa29 	bl	800120c <spi_cr2_configure_frf>
	spi_cr2_configure_ssoe(type, ssoe);
 8000dba:	8bbb      	ldrh	r3, [r7, #28]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	68f8      	ldr	r0, [r7, #12]
 8000dc0:	f000 fa3d 	bl	800123e <spi_cr2_configure_ssoe>
	spi_cr2_configure_txdmaen(type, txdmaen);
 8000dc4:	8c3b      	ldrh	r3, [r7, #32]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	68f8      	ldr	r0, [r7, #12]
 8000dca:	f000 fa51 	bl	8001270 <spi_cr2_configure_txdmaen>
	spi_cr2_configure_rxdmaen(type, rxdmaen);
 8000dce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	68f8      	ldr	r0, [r7, #12]
 8000dd4:	f000 fa65 	bl	80012a2 <spi_cr2_configure_rxdmaen>
}
 8000dd8:	bf00      	nop
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <spi_configure>:

void spi_configure(spi_type* spi)
{
 8000de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000de4:	b091      	sub	sp, #68	@ 0x44
 8000de6:	af0a      	add	r7, sp, #40	@ 0x28
 8000de8:	6178      	str	r0, [r7, #20]
	spi_choose_type(spi->type);
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff3a 	bl	8000c68 <spi_choose_type>
	spi_cr1_configure_spe(spi->spi, 0x0);
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f93f 	bl	800107e <spi_cr1_configure_spe>
	spi_configure_cr1(spi->spi, spi->bidimode, spi->bidioe, spi->crcen, spi->crcnext, spi->dff, spi->rxonly, spi->ssm, spi->ssi, spi->lsbfirst, spi->br, spi->mstr, spi->cpol, spi->cpha);
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	89da      	ldrh	r2, [r3, #14]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	8a19      	ldrh	r1, [r3, #16]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	8a58      	ldrh	r0, [r3, #18]
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	8a9c      	ldrh	r4, [r3, #20]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	8add      	ldrh	r5, [r3, #22]
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	8b1e      	ldrh	r6, [r3, #24]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	8b9b      	ldrh	r3, [r3, #28]
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	8bdb      	ldrh	r3, [r3, #30]
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	f8b3 9020 	ldrh.w	r9, [r3, #32]
 8000e42:	464b      	mov	r3, r9
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000e4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	9308      	str	r3, [sp, #32]
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	9307      	str	r3, [sp, #28]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	9306      	str	r3, [sp, #24]
 8000e58:	9605      	str	r6, [sp, #20]
 8000e5a:	9504      	str	r5, [sp, #16]
 8000e5c:	9403      	str	r4, [sp, #12]
 8000e5e:	9002      	str	r0, [sp, #8]
 8000e60:	9101      	str	r1, [sp, #4]
 8000e62:	9200      	str	r2, [sp, #0]
 8000e64:	4643      	mov	r3, r8
 8000e66:	4672      	mov	r2, lr
 8000e68:	4661      	mov	r1, ip
 8000e6a:	6938      	ldr	r0, [r7, #16]
 8000e6c:	f7ff ff32 	bl	8000cd4 <spi_configure_cr1>
	spi_configure_cr2(spi->spi, spi->txeie, spi->rxneie, spi->errie, spi->frf, spi->ssoe, spi->txdmaen, spi->rxdmaen);
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	681c      	ldr	r4, [r3, #0]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	8c9d      	ldrh	r5, [r3, #36]	@ 0x24
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	8cde      	ldrh	r6, [r3, #38]	@ 0x26
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	f8b3 c028 	ldrh.w	ip, [r3, #40]	@ 0x28
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8000e8a:	6979      	ldr	r1, [r7, #20]
 8000e8c:	8dc9      	ldrh	r1, [r1, #46]	@ 0x2e
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
 8000e92:	9003      	str	r0, [sp, #12]
 8000e94:	9102      	str	r1, [sp, #8]
 8000e96:	9201      	str	r2, [sp, #4]
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	4663      	mov	r3, ip
 8000e9c:	4632      	mov	r2, r6
 8000e9e:	4629      	mov	r1, r5
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f7ff ff69 	bl	8000d78 <spi_configure_cr2>
	spi_cr1_configure_spe(spi->spi, 0x1);
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2101      	movs	r1, #1
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 f8e6 	bl	800107e <spi_cr1_configure_spe>
}
 8000eb2:	bf00      	nop
 8000eb4:	371c      	adds	r7, #28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000ebc <spi_cr1_configure_bidimode>:


void spi_cr1_configure_bidimode(SPI_TypeDef* type, uint16_t bidimode)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_BIDIMODE);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (bidimode << SPI_BIDIMODE);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	887b      	ldrh	r3, [r7, #2]
 8000eda:	03db      	lsls	r3, r3, #15
 8000edc:	431a      	orrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	601a      	str	r2, [r3, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <spi_cr1_configure_bidioe>:

void spi_cr1_configure_bidioe(SPI_TypeDef* type, uint16_t bidioe)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_BIDIOE);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (bidioe << SPI_BIDIOE);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	887b      	ldrh	r3, [r7, #2]
 8000f0c:	039b      	lsls	r3, r3, #14
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	601a      	str	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <spi_cr1_configure_crcen>:

void spi_cr1_configure_crcen(SPI_TypeDef* type, uint16_t crcen)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_CRCEN);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (crcen << SPI_CRCEN);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	887b      	ldrh	r3, [r7, #2]
 8000f3e:	035b      	lsls	r3, r3, #13
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <spi_cr1_configure_crcnext>:

void spi_cr1_configure_crcnext(SPI_TypeDef* type, uint16_t crcnext)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_CRCNEXT);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (crcnext << SPI_CRCNEXT);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	887b      	ldrh	r3, [r7, #2]
 8000f70:	031b      	lsls	r3, r3, #12
 8000f72:	431a      	orrs	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	601a      	str	r2, [r3, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <spi_cr1_configure_dff>:

void spi_cr1_configure_dff(SPI_TypeDef* type, uint16_t dff)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_DFF);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (dff << SPI_DFF);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	02db      	lsls	r3, r3, #11
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	601a      	str	r2, [r3, #0]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <spi_cr1_configure_rxonly>:

void spi_cr1_configure_rxonly(SPI_TypeDef* type, uint16_t rxonly)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_RXONLY);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (rxonly << SPI_RXONLY);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	887b      	ldrh	r3, [r7, #2]
 8000fd4:	029b      	lsls	r3, r3, #10
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <spi_cr1_configure_ssm>:

void spi_cr1_configure_ssm(SPI_TypeDef* type, uint16_t ssm)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_SSM);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (ssm << SPI_SSM);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	025b      	lsls	r3, r3, #9
 8001008:	431a      	orrs	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	601a      	str	r2, [r3, #0]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <spi_cr1_configure_ssi>:

void spi_cr1_configure_ssi(SPI_TypeDef* type, uint16_t ssi)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_SSI);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (ssi << SPI_SSI);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	601a      	str	r2, [r3, #0]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <spi_cr1_configure_lsbfirst>:

void spi_cr1_configure_lsbfirst(SPI_TypeDef* type, uint16_t lsbfirst)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_LSBFIRST);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (lsbfirst << SPI_LSBFIRST);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	01db      	lsls	r3, r3, #7
 800106c:	431a      	orrs	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	601a      	str	r2, [r3, #0]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <spi_cr1_configure_spe>:

void spi_cr1_configure_spe(SPI_TypeDef* type, uint16_t spe)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_SPE);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (spe << SPI_SPE);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	019b      	lsls	r3, r3, #6
 800109e:	431a      	orrs	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	601a      	str	r2, [r3, #0]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <spi_cr1_configure_br>:

void spi_cr1_configure_br(SPI_TypeDef* type, uint16_t br)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0007 << SPI_BR);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (br << SPI_BR);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	431a      	orrs	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	601a      	str	r2, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <spi_cr1_configure_mstr>:

void spi_cr1_configure_mstr(SPI_TypeDef* type, uint16_t mstr)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_MSTR);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f023 0204 	bic.w	r2, r3, #4
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (mstr << SPI_MSTR);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	601a      	str	r2, [r3, #0]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <spi_cr1_configure_cpol>:

void spi_cr1_configure_cpol(SPI_TypeDef* type, uint16_t cpol)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_CPOL);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f023 0202 	bic.w	r2, r3, #2
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (cpol << SPI_CPOL);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	431a      	orrs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	601a      	str	r2, [r3, #0]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <spi_cr1_configure_cpha>:

void spi_cr1_configure_cpha(SPI_TypeDef* type, uint16_t cpha)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	460b      	mov	r3, r1
 8001150:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_CPHA);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f023 0201 	bic.w	r2, r3, #1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (cpha << SPI_CPHA);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <spi_cr2_configure_txeie>:

void spi_cr2_configure_txeie(SPI_TypeDef* type, uint16_t txeie)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_TXEIE);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (txeie << SPI_TXEIE);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	01db      	lsls	r3, r3, #7
 8001196:	431a      	orrs	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	605a      	str	r2, [r3, #4]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <spi_cr2_configure_rxneie>:

void spi_cr2_configure_rxneie(SPI_TypeDef* type, uint16_t rxneie)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_RXNEIE);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (rxneie << SPI_RXNEIE);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	887b      	ldrh	r3, [r7, #2]
 80011c6:	019b      	lsls	r3, r3, #6
 80011c8:	431a      	orrs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	605a      	str	r2, [r3, #4]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <spi_cr2_configure_errie>:

void spi_cr2_configure_errie(SPI_TypeDef* type, uint16_t errie)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	460b      	mov	r3, r1
 80011e4:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_ERRIE);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f023 0220 	bic.w	r2, r3, #32
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (errie << SPI_ERRIE);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	015b      	lsls	r3, r3, #5
 80011fa:	431a      	orrs	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	605a      	str	r2, [r3, #4]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <spi_cr2_configure_frf>:

void spi_cr2_configure_frf(SPI_TypeDef* type, uint16_t frf)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_FRF);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f023 0210 	bic.w	r2, r3, #16
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (frf << SPI_FRF);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	605a      	str	r2, [r3, #4]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <spi_cr2_configure_ssoe>:

void spi_cr2_configure_ssoe(SPI_TypeDef* type, uint16_t ssoe)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	460b      	mov	r3, r1
 8001248:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_SSOE);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f023 0204 	bic.w	r2, r3, #4
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (ssoe << SPI_SSOE);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	605a      	str	r2, [r3, #4]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <spi_cr2_configure_txdmaen>:

void spi_cr2_configure_txdmaen(SPI_TypeDef* type, uint16_t txdmaen)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_TXDMAEN);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f023 0202 	bic.w	r2, r3, #2
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (txdmaen << SPI_TXDMAEN);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	887b      	ldrh	r3, [r7, #2]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	605a      	str	r2, [r3, #4]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <spi_cr2_configure_rxdmaen>:

void spi_cr2_configure_rxdmaen(SPI_TypeDef* type, uint16_t rxdmaen)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_RXDMAEN);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f023 0201 	bic.w	r2, r3, #1
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (rxdmaen << SPI_RXDMAEN);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	887b      	ldrh	r3, [r7, #2]
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	605a      	str	r2, [r3, #4]
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <spi_sr_check_txe>:
{
	return ((type->SR & (0x0001 << SPI_CHSIDE)) >> SPI_CHSIDE);
}

uint16_t spi_sr_check_txe(SPI_TypeDef* type)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	return ((type->SR & (0x0001 << SPI_TXE)) >> SPI_TXE);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	085b      	lsrs	r3, r3, #1
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	b29b      	uxth	r3, r3
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <spi_dr_write>:


//**************************************SPI TRANSFER FUNCTIONS*****************************************************

void spi_dr_write(SPI_TypeDef* type, uint16_t data)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
	type->DR = data;
 8001300:	887a      	ldrh	r2, [r7, #2]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	60da      	str	r2, [r3, #12]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <spi_dr_read>:

uint16_t spi_dr_read(SPI_TypeDef* type)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
	return type->DR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	b29b      	uxth	r3, r3
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <spi_master_transmit>:
	while(spi_sr_check_rxne(type) == SPI_RXNE_EMPTY);
	return spi_dr_read(type);
}

void spi_master_transmit(SPI_TypeDef* type, uint16_t data)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
	while(spi_sr_check_txe(type) == SPI_TXE_NO_EMPTY);
 8001338:	bf00      	nop
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ffc9 	bl	80012d2 <spi_sr_check_txe>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f9      	beq.n	800133a <spi_master_transmit+0xe>
	spi_dr_write(type, data);
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	4619      	mov	r1, r3
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffd2 	bl	80012f4 <spi_dr_write>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <spi_enable_interrupt>:
}

//********************************************************SPI INTERRUPT HANDLING************************************

void spi_enable_interrupt(IRQn_Type irq)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	NVIC_EnableIRQ(irq);
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fc60 	bl	8000c2c <__NVIC_EnableIRQ>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <__libc_init_array>:
 8001374:	b570      	push	{r4, r5, r6, lr}
 8001376:	4d0d      	ldr	r5, [pc, #52]	@ (80013ac <__libc_init_array+0x38>)
 8001378:	4c0d      	ldr	r4, [pc, #52]	@ (80013b0 <__libc_init_array+0x3c>)
 800137a:	1b64      	subs	r4, r4, r5
 800137c:	10a4      	asrs	r4, r4, #2
 800137e:	2600      	movs	r6, #0
 8001380:	42a6      	cmp	r6, r4
 8001382:	d109      	bne.n	8001398 <__libc_init_array+0x24>
 8001384:	4d0b      	ldr	r5, [pc, #44]	@ (80013b4 <__libc_init_array+0x40>)
 8001386:	4c0c      	ldr	r4, [pc, #48]	@ (80013b8 <__libc_init_array+0x44>)
 8001388:	f000 f818 	bl	80013bc <_init>
 800138c:	1b64      	subs	r4, r4, r5
 800138e:	10a4      	asrs	r4, r4, #2
 8001390:	2600      	movs	r6, #0
 8001392:	42a6      	cmp	r6, r4
 8001394:	d105      	bne.n	80013a2 <__libc_init_array+0x2e>
 8001396:	bd70      	pop	{r4, r5, r6, pc}
 8001398:	f855 3b04 	ldr.w	r3, [r5], #4
 800139c:	4798      	blx	r3
 800139e:	3601      	adds	r6, #1
 80013a0:	e7ee      	b.n	8001380 <__libc_init_array+0xc>
 80013a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80013a6:	4798      	blx	r3
 80013a8:	3601      	adds	r6, #1
 80013aa:	e7f2      	b.n	8001392 <__libc_init_array+0x1e>
 80013ac:	080013d4 	.word	0x080013d4
 80013b0:	080013d4 	.word	0x080013d4
 80013b4:	080013d4 	.word	0x080013d4
 80013b8:	080013d8 	.word	0x080013d8

080013bc <_init>:
 80013bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013be:	bf00      	nop
 80013c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013c2:	bc08      	pop	{r3}
 80013c4:	469e      	mov	lr, r3
 80013c6:	4770      	bx	lr

080013c8 <_fini>:
 80013c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ca:	bf00      	nop
 80013cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ce:	bc08      	pop	{r3}
 80013d0:	469e      	mov	lr, r3
 80013d2:	4770      	bx	lr
