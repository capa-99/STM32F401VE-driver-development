
STM32F401VE GPIO drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014a8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800163c  08001644  00002644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800163c  0800163c  00002644  2**0
                  CONTENTS
  4 .ARM          00000000  0800163c  0800163c  00002644  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800163c  08001644  00002644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800163c  0800163c  0000263c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001640  08001640  00002640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00002644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000000  08001644  00003000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001644  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002cc5  00000000  00000000  00002674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000928  00000000  00000000  00005339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000328  00000000  00000000  00005c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000249  00000000  00000000  00005f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e3b2  00000000  00000000  000061d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002aba  00000000  00000000  0001458b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00051b7b  00000000  00000000  00017045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00068bc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c50  00000000  00000000  00068c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00069854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001624 	.word	0x08001624

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08001624 	.word	0x08001624

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <stoplight_initialize>:
volatile uint8_t out_of_order;
volatile uint8_t flag = 0;
volatile uint8_t emergency = 0;

void stoplight_initialize(uint32_t type)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b0ac      	sub	sp, #176	@ 0xb0
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	if(type == STOPLIGHT_MASTER)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2b01      	cmp	r3, #1
 800021c:	f040 80bd 	bne.w	800039a <stoplight_initialize+0x18a>
	{
		RCC->AHB1ENR = RCC->AHB1ENR | 0x1;
 8000220:	4ba1      	ldr	r3, [pc, #644]	@ (80004a8 <stoplight_initialize+0x298>)
 8000222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000224:	4aa0      	ldr	r2, [pc, #640]	@ (80004a8 <stoplight_initialize+0x298>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6313      	str	r3, [r2, #48]	@ 0x30
		gpio_pin buttons;
		buttons.mode = GPIO_PIN_MODE_INPUT;
 800022c:	2300      	movs	r3, #0
 800022e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		buttons.alternate_function = GPIO_PIN_ALTERNATE_FUNCTION_AF0_SYSTEM;
 8000232:	2300      	movs	r3, #0
 8000234:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		buttons.pull = GPIO_PIN_PULL_DOWN;
 8000238:	2302      	movs	r3, #2
 800023a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		for(int i = 0; i < 4; i++)
 800023e:	2300      	movs	r3, #0
 8000240:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000244:	e00e      	b.n	8000264 <stoplight_initialize+0x54>
		{
			buttons.pin = i;
 8000246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800024a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			gpio_init(GPIOA, &buttons);
 800024e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000252:	4619      	mov	r1, r3
 8000254:	4895      	ldr	r0, [pc, #596]	@ (80004ac <stoplight_initialize+0x29c>)
 8000256:	f000 fbe5 	bl	8000a24 <gpio_init>
		for(int i = 0; i < 4; i++)
 800025a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800025e:	3301      	adds	r3, #1
 8000260:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000268:	2b03      	cmp	r3, #3
 800026a:	ddec      	ble.n	8000246 <stoplight_initialize+0x36>
		}
		gpio_pin spi;
		spi.mode = GPIO_PIN_MODE_ALT_FUNCTION;
 800026c:	2302      	movs	r3, #2
 800026e:	677b      	str	r3, [r7, #116]	@ 0x74
		spi.alternate_function = GPIO_PIN_ALTERNATE_FUNCTION_AF5_SPI1_2_3_4;
 8000270:	2305      	movs	r3, #5
 8000272:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		for(int i = 4; i < 8; i++)
 8000276:	2304      	movs	r3, #4
 8000278:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800027c:	e00d      	b.n	800029a <stoplight_initialize+0x8a>
		{
			spi.pin = i;
 800027e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000282:	673b      	str	r3, [r7, #112]	@ 0x70
			gpio_init(GPIOA, &spi);
 8000284:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000288:	4619      	mov	r1, r3
 800028a:	4888      	ldr	r0, [pc, #544]	@ (80004ac <stoplight_initialize+0x29c>)
 800028c:	f000 fbca 	bl	8000a24 <gpio_init>
		for(int i = 4; i < 8; i++)
 8000290:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000294:	3301      	adds	r3, #1
 8000296:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800029a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800029e:	2b07      	cmp	r3, #7
 80002a0:	dded      	ble.n	800027e <stoplight_initialize+0x6e>
		}
		spi_type spi1;
		spi1.spi = SPI1;
 80002a2:	4b83      	ldr	r3, [pc, #524]	@ (80004b0 <stoplight_initialize+0x2a0>)
 80002a4:	60fb      	str	r3, [r7, #12]
		spi1.type = SPI1_TYPE;
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
		spi1.bidimode = SPI_BIDIMODE_UNI;
 80002aa:	2300      	movs	r3, #0
 80002ac:	82bb      	strh	r3, [r7, #20]
		spi1.bidioe = SPI_BIDIOE_DISABLED;
 80002ae:	2300      	movs	r3, #0
 80002b0:	82fb      	strh	r3, [r7, #22]
		spi1.crcen = SPI_CRCEN_DISABLED;
 80002b2:	2300      	movs	r3, #0
 80002b4:	833b      	strh	r3, [r7, #24]
		spi1.crcnext = SPI_CRCNEXT_NO_PHASE;
 80002b6:	2300      	movs	r3, #0
 80002b8:	837b      	strh	r3, [r7, #26]
		spi1.dff = SPI_DFF_8_BIT;
 80002ba:	2300      	movs	r3, #0
 80002bc:	83bb      	strh	r3, [r7, #28]
		spi1.rxonly = SPI_RXONLY_FULL_DUPLEX;
 80002be:	2300      	movs	r3, #0
 80002c0:	83fb      	strh	r3, [r7, #30]
		spi1.ssm = SPI_SSM_DISABLED;
 80002c2:	2300      	movs	r3, #0
 80002c4:	843b      	strh	r3, [r7, #32]
		spi1.ssi = SPI_SSI_SELECT;
 80002c6:	2300      	movs	r3, #0
 80002c8:	847b      	strh	r3, [r7, #34]	@ 0x22
		spi1.lsbfirst = SPI_LSBFIRST_MSB;
 80002ca:	2300      	movs	r3, #0
 80002cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		spi1.spe = SPI_SPE_ENABLE;
 80002ce:	2301      	movs	r3, #1
 80002d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
		spi1.br = SPI_BR_64;
 80002d2:	f240 1301 	movw	r3, #257	@ 0x101
 80002d6:	853b      	strh	r3, [r7, #40]	@ 0x28
		spi1.mstr = SPI_MSTR_MASTER;
 80002d8:	2301      	movs	r3, #1
 80002da:	857b      	strh	r3, [r7, #42]	@ 0x2a
		spi1.cpol = SPI_CPOL_1;
 80002dc:	2301      	movs	r3, #1
 80002de:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		spi1.cpha = SPI_CPHA_SECOND;
 80002e0:	2301      	movs	r3, #1
 80002e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		spi1.txeie = SPI_TXEIE_MASKED;
 80002e4:	2300      	movs	r3, #0
 80002e6:	863b      	strh	r3, [r7, #48]	@ 0x30
		spi1.rxneie = SPI_RXNEIE_NOT_MASKED;
 80002e8:	2301      	movs	r3, #1
 80002ea:	867b      	strh	r3, [r7, #50]	@ 0x32
		spi1.errie = SPI_ERRIE_MASKED;
 80002ec:	2300      	movs	r3, #0
 80002ee:	86bb      	strh	r3, [r7, #52]	@ 0x34
		spi1.frf = SPI_FRF_MOTOROLA;
 80002f0:	2300      	movs	r3, #0
 80002f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
		spi1.ssoe = SPI_SSOE_ENABLED;
 80002f4:	2301      	movs	r3, #1
 80002f6:	873b      	strh	r3, [r7, #56]	@ 0x38
		spi1.txdmaen = SPI_TXDMAEN_DISABLED;
 80002f8:	2300      	movs	r3, #0
 80002fa:	877b      	strh	r3, [r7, #58]	@ 0x3a
		spi1.rxdmaen = SPI_RXDMAEN_DISABLED;
 80002fc:	2300      	movs	r3, #0
 80002fe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
		spi_configure(&spi1);
 8000300:	f107 030c 	add.w	r3, r7, #12
 8000304:	4618      	mov	r0, r3
 8000306:	f000 fe89 	bl	800101c <spi_configure>
		stoplight_configure_interrupts(type);
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f000 f8dc 	bl	80004c8 <stoplight_configure_interrupts>

		RCC->APB1ENR = RCC->APB1ENR | 0x1;
 8000310:	4b65      	ldr	r3, [pc, #404]	@ (80004a8 <stoplight_initialize+0x298>)
 8000312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000314:	4a64      	ldr	r2, [pc, #400]	@ (80004a8 <stoplight_initialize+0x298>)
 8000316:	f043 0301 	orr.w	r3, r3, #1
 800031a:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2->CR1 = 0x0310;
 800031c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000320:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8000324:	601a      	str	r2, [r3, #0]
		TIM2->EGR = TIM2->EGR | 0x0001;
 8000326:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6153      	str	r3, [r2, #20]
		TIM2->PSC = 0xFFF;
 8000336:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800033a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800033e:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = STOPLIGHT_TIMER_STOP;
 8000340:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000344:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000348:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->DIER = TIM2->DIER | 0x0001;
 800034a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 = TIM2->CR1 | 0x0001;
 800035a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6013      	str	r3, [r2, #0]
		NVIC_EnableIRQ(TIM2_IRQn);
 800036a:	201c      	movs	r0, #28
 800036c:	f7ff ff32 	bl	80001d4 <__NVIC_EnableIRQ>
		spi_master_transmit(SPI1, STOPLIGHT_RED);
 8000370:	2101      	movs	r1, #1
 8000372:	484f      	ldr	r0, [pc, #316]	@ (80004b0 <stoplight_initialize+0x2a0>)
 8000374:	f001 f90e 	bl	8001594 <spi_master_transmit>
		state = STOPLIGHT_STATE_STOP;
 8000378:	4b4e      	ldr	r3, [pc, #312]	@ (80004b4 <stoplight_initialize+0x2a4>)
 800037a:	2200      	movs	r2, #0
 800037c:	801a      	strh	r2, [r3, #0]
		TIM2->ARR = STOPLIGHT_TIMER_READY;
 800037e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000382:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000386:	62da      	str	r2, [r3, #44]	@ 0x2c
		night_mode = STOPLIGHT_NIGHT_MODE_OFF;
 8000388:	4b4b      	ldr	r3, [pc, #300]	@ (80004b8 <stoplight_initialize+0x2a8>)
 800038a:	2201      	movs	r2, #1
 800038c:	701a      	strb	r2, [r3, #0]
		out_of_order = 0;
 800038e:	4b4b      	ldr	r3, [pc, #300]	@ (80004bc <stoplight_initialize+0x2ac>)
 8000390:	2200      	movs	r2, #0
 8000392:	701a      	strb	r2, [r3, #0]
		ms = STOPLIGHT_MASTER;
 8000394:	4b4a      	ldr	r3, [pc, #296]	@ (80004c0 <stoplight_initialize+0x2b0>)
 8000396:	2201      	movs	r2, #1
 8000398:	601a      	str	r2, [r3, #0]
	}
	if(type == STOPLIGHT_SLAVE)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d17f      	bne.n	80004a0 <stoplight_initialize+0x290>
	{
		RCC->AHB1ENR = RCC->AHB1ENR | 0x1;
 80003a0:	4b41      	ldr	r3, [pc, #260]	@ (80004a8 <stoplight_initialize+0x298>)
 80003a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a4:	4a40      	ldr	r2, [pc, #256]	@ (80004a8 <stoplight_initialize+0x298>)
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	6313      	str	r3, [r2, #48]	@ 0x30
		RCC->AHB1ENR = RCC->AHB1ENR | 0x8;
 80003ac:	4b3e      	ldr	r3, [pc, #248]	@ (80004a8 <stoplight_initialize+0x298>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b0:	4a3d      	ldr	r2, [pc, #244]	@ (80004a8 <stoplight_initialize+0x298>)
 80003b2:	f043 0308 	orr.w	r3, r3, #8
 80003b6:	6313      	str	r3, [r2, #48]	@ 0x30
		gpio_pin light;
		light.mode = GPIO_PIN_MODE_OUTPUT;
 80003b8:	2301      	movs	r3, #1
 80003ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
		light.output_type = GPIO_PIN_OUTPUT_TYPE_PUSH_PULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	663b      	str	r3, [r7, #96]	@ 0x60
		light.output_speed = GPIO_PIN_OUTPUT_SPEED_MEDIUM;
 80003c0:	2301      	movs	r3, #1
 80003c2:	667b      	str	r3, [r7, #100]	@ 0x64
		light.pull = GPIO_PIN_PULL_NONE;
 80003c4:	2300      	movs	r3, #0
 80003c6:	66bb      	str	r3, [r7, #104]	@ 0x68
		light.alternate_function = GPIO_PIN_ALTERNATE_FUNCTION_AF0_SYSTEM;
 80003c8:	2300      	movs	r3, #0
 80003ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
		for(int i = 0; i < 4; i++)
 80003cc:	2300      	movs	r3, #0
 80003ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80003d2:	e00d      	b.n	80003f0 <stoplight_initialize+0x1e0>
		{
			light.pin = i;
 80003d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80003d8:	65bb      	str	r3, [r7, #88]	@ 0x58
			gpio_init(GPIOD, &light);
 80003da:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80003de:	4619      	mov	r1, r3
 80003e0:	4838      	ldr	r0, [pc, #224]	@ (80004c4 <stoplight_initialize+0x2b4>)
 80003e2:	f000 fb1f 	bl	8000a24 <gpio_init>
		for(int i = 0; i < 4; i++)
 80003e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80003ea:	3301      	adds	r3, #1
 80003ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80003f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80003f4:	2b03      	cmp	r3, #3
 80003f6:	dded      	ble.n	80003d4 <stoplight_initialize+0x1c4>
		}
		gpio_pin spi;
		spi.mode = GPIO_PIN_MODE_ALT_FUNCTION;
 80003f8:	2302      	movs	r3, #2
 80003fa:	647b      	str	r3, [r7, #68]	@ 0x44
		spi.alternate_function = GPIO_PIN_ALTERNATE_FUNCTION_AF5_SPI1_2_3_4;
 80003fc:	2305      	movs	r3, #5
 80003fe:	657b      	str	r3, [r7, #84]	@ 0x54
		for(int i = 4; i < 8; i++)
 8000400:	2304      	movs	r3, #4
 8000402:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000406:	e00d      	b.n	8000424 <stoplight_initialize+0x214>
		{
			spi.pin = i;
 8000408:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800040c:	643b      	str	r3, [r7, #64]	@ 0x40
			gpio_init(GPIOA, &spi);
 800040e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000412:	4619      	mov	r1, r3
 8000414:	4825      	ldr	r0, [pc, #148]	@ (80004ac <stoplight_initialize+0x29c>)
 8000416:	f000 fb05 	bl	8000a24 <gpio_init>
		for(int i = 4; i < 8; i++)
 800041a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800041e:	3301      	adds	r3, #1
 8000420:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000424:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000428:	2b07      	cmp	r3, #7
 800042a:	dded      	ble.n	8000408 <stoplight_initialize+0x1f8>
		}
		spi_type spi1;
		spi1.spi = SPI1;
 800042c:	4b20      	ldr	r3, [pc, #128]	@ (80004b0 <stoplight_initialize+0x2a0>)
 800042e:	60fb      	str	r3, [r7, #12]
		spi1.type = SPI1_TYPE;
 8000430:	2300      	movs	r3, #0
 8000432:	613b      	str	r3, [r7, #16]
		spi1.bidimode = SPI_BIDIMODE_UNI;
 8000434:	2300      	movs	r3, #0
 8000436:	82bb      	strh	r3, [r7, #20]
		spi1.bidioe = SPI_BIDIOE_DISABLED;
 8000438:	2300      	movs	r3, #0
 800043a:	82fb      	strh	r3, [r7, #22]
		spi1.crcen = SPI_CRCEN_DISABLED;
 800043c:	2300      	movs	r3, #0
 800043e:	833b      	strh	r3, [r7, #24]
		spi1.crcnext = SPI_CRCNEXT_NO_PHASE;
 8000440:	2300      	movs	r3, #0
 8000442:	837b      	strh	r3, [r7, #26]
		spi1.dff = SPI_DFF_8_BIT;
 8000444:	2300      	movs	r3, #0
 8000446:	83bb      	strh	r3, [r7, #28]
		spi1.rxonly = SPI_RXONLY_FULL_DUPLEX;
 8000448:	2300      	movs	r3, #0
 800044a:	83fb      	strh	r3, [r7, #30]
		spi1.ssm = SPI_SSM_DISABLED;
 800044c:	2300      	movs	r3, #0
 800044e:	843b      	strh	r3, [r7, #32]
		spi1.ssi = SPI_SSI_SELECT;
 8000450:	2300      	movs	r3, #0
 8000452:	847b      	strh	r3, [r7, #34]	@ 0x22
		spi1.lsbfirst = SPI_LSBFIRST_MSB;
 8000454:	2300      	movs	r3, #0
 8000456:	84bb      	strh	r3, [r7, #36]	@ 0x24
		spi1.spe = SPI_SPE_ENABLE;
 8000458:	2301      	movs	r3, #1
 800045a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		spi1.br = SPI_BR_64;
 800045c:	f240 1301 	movw	r3, #257	@ 0x101
 8000460:	853b      	strh	r3, [r7, #40]	@ 0x28
		spi1.mstr = SPI_MSTR_SLAVE;
 8000462:	2300      	movs	r3, #0
 8000464:	857b      	strh	r3, [r7, #42]	@ 0x2a
		spi1.cpol = SPI_CPOL_1;
 8000466:	2301      	movs	r3, #1
 8000468:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		spi1.cpha = SPI_CPHA_SECOND;
 800046a:	2301      	movs	r3, #1
 800046c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		spi1.txeie = SPI_TXEIE_MASKED;
 800046e:	2300      	movs	r3, #0
 8000470:	863b      	strh	r3, [r7, #48]	@ 0x30
		spi1.rxneie = SPI_RXNEIE_NOT_MASKED;
 8000472:	2301      	movs	r3, #1
 8000474:	867b      	strh	r3, [r7, #50]	@ 0x32
		spi1.errie = SPI_ERRIE_MASKED;
 8000476:	2300      	movs	r3, #0
 8000478:	86bb      	strh	r3, [r7, #52]	@ 0x34
		spi1.frf = SPI_FRF_MOTOROLA;
 800047a:	2300      	movs	r3, #0
 800047c:	86fb      	strh	r3, [r7, #54]	@ 0x36
		spi1.ssoe = SPI_SSOE_ENABLED;
 800047e:	2301      	movs	r3, #1
 8000480:	873b      	strh	r3, [r7, #56]	@ 0x38
		spi1.txdmaen = SPI_TXDMAEN_DISABLED;
 8000482:	2300      	movs	r3, #0
 8000484:	877b      	strh	r3, [r7, #58]	@ 0x3a
		spi1.rxdmaen = SPI_RXDMAEN_DISABLED;
 8000486:	2300      	movs	r3, #0
 8000488:	87bb      	strh	r3, [r7, #60]	@ 0x3c
		spi_configure(&spi1);
 800048a:	f107 030c 	add.w	r3, r7, #12
 800048e:	4618      	mov	r0, r3
 8000490:	f000 fdc4 	bl	800101c <spi_configure>
		stoplight_configure_interrupts(type);
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f000 f817 	bl	80004c8 <stoplight_configure_interrupts>
		ms = STOPLIGHT_SLAVE;
 800049a:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <stoplight_initialize+0x2b0>)
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
	}
}
 80004a0:	bf00      	nop
 80004a2:	37b0      	adds	r7, #176	@ 0xb0
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40023800 	.word	0x40023800
 80004ac:	40020000 	.word	0x40020000
 80004b0:	40013000 	.word	0x40013000
 80004b4:	20000024 	.word	0x20000024
 80004b8:	20000026 	.word	0x20000026
 80004bc:	20000027 	.word	0x20000027
 80004c0:	20000020 	.word	0x20000020
 80004c4:	40020c00 	.word	0x40020c00

080004c8 <stoplight_configure_interrupts>:

void stoplight_configure_interrupts(uint32_t type)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	if(type == STOPLIGHT_MASTER)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d11f      	bne.n	8000516 <stoplight_configure_interrupts+0x4e>
	{
		gpio_configure_interrupt(STOPLIGHT_NIGHT_SENSOR, GPIO_RISING_FALLING_EDGE);
 80004d6:	2102      	movs	r1, #2
 80004d8:	2000      	movs	r0, #0
 80004da:	f000 fc03 	bl	8000ce4 <gpio_configure_interrupt>
		gpio_enable_interrupt(STOPLIGHT_NIGHT_SENSOR, EXTI0_IRQn);
 80004de:	2106      	movs	r1, #6
 80004e0:	2000      	movs	r0, #0
 80004e2:	f000 fc73 	bl	8000dcc <gpio_enable_interrupt>
		gpio_configure_interrupt(STOPLIGHT_PEDESTRIAN_BUTTON, GPIO_RISING_EDGE);
 80004e6:	2100      	movs	r1, #0
 80004e8:	2001      	movs	r0, #1
 80004ea:	f000 fbfb 	bl	8000ce4 <gpio_configure_interrupt>
		gpio_enable_interrupt(STOPLIGHT_PEDESTRIAN_BUTTON, EXTI1_IRQn);
 80004ee:	2107      	movs	r1, #7
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 fc6b 	bl	8000dcc <gpio_enable_interrupt>
		gpio_configure_interrupt(STOPLIGHT_EMERGENCY_BUTTON, GPIO_RISING_EDGE);
 80004f6:	2100      	movs	r1, #0
 80004f8:	2002      	movs	r0, #2
 80004fa:	f000 fbf3 	bl	8000ce4 <gpio_configure_interrupt>
		gpio_enable_interrupt(STOPLIGHT_EMERGENCY_BUTTON, EXTI2_IRQn);
 80004fe:	2108      	movs	r1, #8
 8000500:	2002      	movs	r0, #2
 8000502:	f000 fc63 	bl	8000dcc <gpio_enable_interrupt>
		gpio_configure_interrupt(STOPLIGHT_OUT_OF_ORDER_BUTTON, GPIO_RISING_FALLING_EDGE);
 8000506:	2102      	movs	r1, #2
 8000508:	2003      	movs	r0, #3
 800050a:	f000 fbeb 	bl	8000ce4 <gpio_configure_interrupt>
		gpio_enable_interrupt(STOPLIGHT_OUT_OF_ORDER_BUTTON, EXTI3_IRQn);
 800050e:	2109      	movs	r1, #9
 8000510:	2003      	movs	r0, #3
 8000512:	f000 fc5b 	bl	8000dcc <gpio_enable_interrupt>
	}
	spi_enable_interrupt(SPI1_IRQn);
 8000516:	2023      	movs	r0, #35	@ 0x23
 8000518:	f001 f852 	bl	80015c0 <spi_enable_interrupt>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <stoplight_slave_change_light>:

void stoplight_slave_change_light(uint16_t color)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	80fb      	strh	r3, [r7, #6]
	gpio_write_to_port(GPIOD, color);
 800052e:	88fb      	ldrh	r3, [r7, #6]
 8000530:	4619      	mov	r1, r3
 8000532:	4803      	ldr	r0, [pc, #12]	@ (8000540 <stoplight_slave_change_light+0x1c>)
 8000534:	f000 fbb2 	bl	8000c9c <gpio_write_to_port>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40020c00 	.word	0x40020c00

08000544 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	rx_data = spi_dr_read(SPI1);
 8000548:	4805      	ldr	r0, [pc, #20]	@ (8000560 <SPI1_IRQHandler+0x1c>)
 800054a:	f001 f800 	bl	800154e <spi_dr_read>
 800054e:	4603      	mov	r3, r0
 8000550:	461a      	mov	r2, r3
 8000552:	4b04      	ldr	r3, [pc, #16]	@ (8000564 <SPI1_IRQHandler+0x20>)
 8000554:	801a      	strh	r2, [r3, #0]
	stoplight_handle_rx_data();
 8000556:	f000 f841 	bl	80005dc <stoplight_handle_rx_data>
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40013000 	.word	0x40013000
 8000564:	2000001c 	.word	0x2000001c

08000568 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	gpio_clear_interrupt(STOPLIGHT_NIGHT_SENSOR);
 800056c:	2000      	movs	r0, #0
 800056e:	f000 fc57 	bl	8000e20 <gpio_clear_interrupt>
	stoplight_night_mode();
 8000572:	f000 f951 	bl	8000818 <stoplight_night_mode>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}

0800057a <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0
	gpio_clear_interrupt(STOPLIGHT_PEDESTRIAN_BUTTON);
 800057e:	2001      	movs	r0, #1
 8000580:	f000 fc4e 	bl	8000e20 <gpio_clear_interrupt>
	stoplight_pedestian_crossing();
 8000584:	f000 f95e 	bl	8000844 <stoplight_pedestian_crossing>
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}

0800058c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	gpio_clear_interrupt(STOPLIGHT_EMERGENCY_BUTTON);
 8000590:	2002      	movs	r0, #2
 8000592:	f000 fc45 	bl	8000e20 <gpio_clear_interrupt>
	stoplight_emergency_mode();
 8000596:	f000 f985 	bl	80008a4 <stoplight_emergency_mode>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}

0800059e <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
	gpio_clear_interrupt(STOPLIGHT_OUT_OF_ORDER_BUTTON);
 80005a2:	2003      	movs	r0, #3
 80005a4:	f000 fc3c 	bl	8000e20 <gpio_clear_interrupt>
	stoplight_out_of_order();
 80005a8:	f000 f9b0 	bl	800090c <stoplight_out_of_order>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	if (TIM2->SR & 0x1)
 80005b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005b8:	691b      	ldr	r3, [r3, #16]
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d009      	beq.n	80005d6 <TIM2_IRQHandler+0x26>
	{
		TIM2->SR &= ~0x1;
 80005c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005cc:	f023 0301 	bic.w	r3, r3, #1
 80005d0:	6113      	str	r3, [r2, #16]
	    stoplight_timer_handler();
 80005d2:	f000 f85d 	bl	8000690 <stoplight_timer_handler>
	}
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <stoplight_handle_rx_data>:

void stoplight_handle_rx_data()
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	if(ms == STOPLIGHT_SLAVE)
 80005e0:	4b25      	ldr	r3, [pc, #148]	@ (8000678 <stoplight_handle_rx_data+0x9c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d125      	bne.n	8000634 <stoplight_handle_rx_data+0x58>
	{
		if(rx_data == 0x0 || rx_data == 0x01 || rx_data == 0x2 || rx_data  == 0x4 || rx_data == 0x9 || rx_data == 0xA)
 80005e8:	4b24      	ldr	r3, [pc, #144]	@ (800067c <stoplight_handle_rx_data+0xa0>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d013      	beq.n	8000618 <stoplight_handle_rx_data+0x3c>
 80005f0:	4b22      	ldr	r3, [pc, #136]	@ (800067c <stoplight_handle_rx_data+0xa0>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d00f      	beq.n	8000618 <stoplight_handle_rx_data+0x3c>
 80005f8:	4b20      	ldr	r3, [pc, #128]	@ (800067c <stoplight_handle_rx_data+0xa0>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d00b      	beq.n	8000618 <stoplight_handle_rx_data+0x3c>
 8000600:	4b1e      	ldr	r3, [pc, #120]	@ (800067c <stoplight_handle_rx_data+0xa0>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	2b04      	cmp	r3, #4
 8000606:	d007      	beq.n	8000618 <stoplight_handle_rx_data+0x3c>
 8000608:	4b1c      	ldr	r3, [pc, #112]	@ (800067c <stoplight_handle_rx_data+0xa0>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	2b09      	cmp	r3, #9
 800060e:	d003      	beq.n	8000618 <stoplight_handle_rx_data+0x3c>
 8000610:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <stoplight_handle_rx_data+0xa0>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	2b0a      	cmp	r3, #10
 8000616:	d109      	bne.n	800062c <stoplight_handle_rx_data+0x50>
		{
			stoplight_slave_change_light(rx_data);
 8000618:	4b18      	ldr	r3, [pc, #96]	@ (800067c <stoplight_handle_rx_data+0xa0>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ff81 	bl	8000524 <stoplight_slave_change_light>
			spi_slave_transmit(SPI1, STOPLIGHT_ACK);
 8000622:	21aa      	movs	r1, #170	@ 0xaa
 8000624:	4816      	ldr	r0, [pc, #88]	@ (8000680 <stoplight_handle_rx_data+0xa4>)
 8000626:	f000 ff9f 	bl	8001568 <spi_slave_transmit>
 800062a:	e003      	b.n	8000634 <stoplight_handle_rx_data+0x58>
		}
		else
		{
			spi_slave_transmit(SPI1, STOPLIGHT_NACK);
 800062c:	21ff      	movs	r1, #255	@ 0xff
 800062e:	4814      	ldr	r0, [pc, #80]	@ (8000680 <stoplight_handle_rx_data+0xa4>)
 8000630:	f000 ff9a 	bl	8001568 <spi_slave_transmit>
		}
	}
	if(ms == STOPLIGHT_MASTER)
 8000634:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <stoplight_handle_rx_data+0x9c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d11a      	bne.n	8000672 <stoplight_handle_rx_data+0x96>
	{
		if(rx_data == STOPLIGHT_NACK)
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <stoplight_handle_rx_data+0xa0>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	2bff      	cmp	r3, #255	@ 0xff
 8000642:	d116      	bne.n	8000672 <stoplight_handle_rx_data+0x96>
		{
			TIM2->ARR = STOPLIGHT_TIMER_STOP;
 8000644:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000648:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800064c:	62da      	str	r2, [r3, #44]	@ 0x2c
			spi_master_transmit(SPI1, STOPLIGHT_RED);
 800064e:	2101      	movs	r1, #1
 8000650:	480b      	ldr	r0, [pc, #44]	@ (8000680 <stoplight_handle_rx_data+0xa4>)
 8000652:	f000 ff9f 	bl	8001594 <spi_master_transmit>
			state = STOPLIGHT_STATE_STOP;
 8000656:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <stoplight_handle_rx_data+0xa8>)
 8000658:	2200      	movs	r2, #0
 800065a:	801a      	strh	r2, [r3, #0]
			TIM2->ARR = STOPLIGHT_TIMER_READY;
 800065c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000660:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
			night_mode = STOPLIGHT_NIGHT_MODE_OFF;
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <stoplight_handle_rx_data+0xac>)
 8000668:	2201      	movs	r2, #1
 800066a:	701a      	strb	r2, [r3, #0]
			out_of_order = 0;
 800066c:	4b07      	ldr	r3, [pc, #28]	@ (800068c <stoplight_handle_rx_data+0xb0>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000020 	.word	0x20000020
 800067c:	2000001c 	.word	0x2000001c
 8000680:	40013000 	.word	0x40013000
 8000684:	20000024 	.word	0x20000024
 8000688:	20000026 	.word	0x20000026
 800068c:	20000027 	.word	0x20000027

08000690 <stoplight_timer_handler>:

void stoplight_timer_handler()
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
	if(out_of_order)
 8000696:	4b5a      	ldr	r3, [pc, #360]	@ (8000800 <stoplight_timer_handler+0x170>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d01c      	beq.n	80006da <stoplight_timer_handler+0x4a>
	{
		state = STOPLIGHT_STATE_OUT_OF_ORDER;
 80006a0:	4b58      	ldr	r3, [pc, #352]	@ (8000804 <stoplight_timer_handler+0x174>)
 80006a2:	2206      	movs	r2, #6
 80006a4:	801a      	strh	r2, [r3, #0]
		TIM2->ARR = STOPLIGHT_TIMER_BLINKING_OFF;
 80006a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ae:	62da      	str	r2, [r3, #44]	@ 0x2c
		if(flag)
 80006b0:	4b55      	ldr	r3, [pc, #340]	@ (8000808 <stoplight_timer_handler+0x178>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d007      	beq.n	80006ca <stoplight_timer_handler+0x3a>
		{
			spi_master_transmit(SPI1, STOPLIGHT_YELLOW);
 80006ba:	2102      	movs	r1, #2
 80006bc:	4853      	ldr	r0, [pc, #332]	@ (800080c <stoplight_timer_handler+0x17c>)
 80006be:	f000 ff69 	bl	8001594 <spi_master_transmit>
			flag = 0;
 80006c2:	4b51      	ldr	r3, [pc, #324]	@ (8000808 <stoplight_timer_handler+0x178>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
				spi_master_transmit(SPI1, STOPLIGHT_YELLOW);
				state = STOPLIGHT_STATE_READY;
			};
			}
	}
}
 80006c8:	e096      	b.n	80007f8 <stoplight_timer_handler+0x168>
			spi_master_transmit(SPI1, STOPLIGHT_OFF);
 80006ca:	2100      	movs	r1, #0
 80006cc:	484f      	ldr	r0, [pc, #316]	@ (800080c <stoplight_timer_handler+0x17c>)
 80006ce:	f000 ff61 	bl	8001594 <spi_master_transmit>
			flag = 1;
 80006d2:	4b4d      	ldr	r3, [pc, #308]	@ (8000808 <stoplight_timer_handler+0x178>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	701a      	strb	r2, [r3, #0]
}
 80006d8:	e08e      	b.n	80007f8 <stoplight_timer_handler+0x168>
		uint16_t send = 0x0;
 80006da:	2300      	movs	r3, #0
 80006dc:	80fb      	strh	r3, [r7, #6]
		if(emergency)
 80006de:	4b4c      	ldr	r3, [pc, #304]	@ (8000810 <stoplight_timer_handler+0x180>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d004      	beq.n	80006f2 <stoplight_timer_handler+0x62>
			send = STOPLIGHT_ALARM;
 80006e8:	2308      	movs	r3, #8
 80006ea:	80fb      	strh	r3, [r7, #6]
			emergency = 0;
 80006ec:	4b48      	ldr	r3, [pc, #288]	@ (8000810 <stoplight_timer_handler+0x180>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
		switch(state)
 80006f2:	4b44      	ldr	r3, [pc, #272]	@ (8000804 <stoplight_timer_handler+0x174>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	2b05      	cmp	r3, #5
 80006fa:	d870      	bhi.n	80007de <stoplight_timer_handler+0x14e>
 80006fc:	a201      	add	r2, pc, #4	@ (adr r2, 8000704 <stoplight_timer_handler+0x74>)
 80006fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000702:	bf00      	nop
 8000704:	0800071d 	.word	0x0800071d
 8000708:	08000737 	.word	0x08000737
 800070c:	08000751 	.word	0x08000751
 8000710:	08000785 	.word	0x08000785
 8000714:	0800076b 	.word	0x0800076b
 8000718:	080007bd 	.word	0x080007bd
				TIM2->ARR = STOPLIGHT_TIMER_GO;
 800071c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000720:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000724:	62da      	str	r2, [r3, #44]	@ 0x2c
				spi_master_transmit(SPI1, STOPLIGHT_YELLOW);
 8000726:	2102      	movs	r1, #2
 8000728:	4838      	ldr	r0, [pc, #224]	@ (800080c <stoplight_timer_handler+0x17c>)
 800072a:	f000 ff33 	bl	8001594 <spi_master_transmit>
				state = STOPLIGHT_STATE_READY;
 800072e:	4b35      	ldr	r3, [pc, #212]	@ (8000804 <stoplight_timer_handler+0x174>)
 8000730:	2201      	movs	r2, #1
 8000732:	801a      	strh	r2, [r3, #0]
			}break;
 8000734:	e060      	b.n	80007f8 <stoplight_timer_handler+0x168>
				TIM2->ARR = STOPLIGHT_TIMER_BLINKING_OFF;
 8000736:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800073a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
				spi_master_transmit(SPI1, STOPLIGHT_GREEN);
 8000740:	2104      	movs	r1, #4
 8000742:	4832      	ldr	r0, [pc, #200]	@ (800080c <stoplight_timer_handler+0x17c>)
 8000744:	f000 ff26 	bl	8001594 <spi_master_transmit>
				state = STOPLIGHT_STATE_GO;
 8000748:	4b2e      	ldr	r3, [pc, #184]	@ (8000804 <stoplight_timer_handler+0x174>)
 800074a:	2202      	movs	r2, #2
 800074c:	801a      	strh	r2, [r3, #0]
			}break;
 800074e:	e053      	b.n	80007f8 <stoplight_timer_handler+0x168>
				TIM2->ARR = STOPLIGHT_TIMER_BLINKING_GREEN;
 8000750:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000758:	62da      	str	r2, [r3, #44]	@ 0x2c
				spi_master_transmit(SPI1, STOPLIGHT_OFF);
 800075a:	2100      	movs	r1, #0
 800075c:	482b      	ldr	r0, [pc, #172]	@ (800080c <stoplight_timer_handler+0x17c>)
 800075e:	f000 ff19 	bl	8001594 <spi_master_transmit>
				state = STOPLIGHT_STATE_BLINKING_OFF;
 8000762:	4b28      	ldr	r3, [pc, #160]	@ (8000804 <stoplight_timer_handler+0x174>)
 8000764:	2204      	movs	r2, #4
 8000766:	801a      	strh	r2, [r3, #0]
			}break;
 8000768:	e046      	b.n	80007f8 <stoplight_timer_handler+0x168>
				TIM2->ARR = STOPLIGHT_TIMER_BLINKING_END;
 800076a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800076e:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000772:	62da      	str	r2, [r3, #44]	@ 0x2c
				spi_master_transmit(SPI1, STOPLIGHT_GREEN);
 8000774:	2104      	movs	r1, #4
 8000776:	4825      	ldr	r0, [pc, #148]	@ (800080c <stoplight_timer_handler+0x17c>)
 8000778:	f000 ff0c 	bl	8001594 <spi_master_transmit>
				state = STOPLIGHT_STATE_BLINKING_GREEN;
 800077c:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <stoplight_timer_handler+0x174>)
 800077e:	2203      	movs	r2, #3
 8000780:	801a      	strh	r2, [r3, #0]
			}break;
 8000782:	e039      	b.n	80007f8 <stoplight_timer_handler+0x168>
				if(night_mode == STOPLIGHT_NIGHT_MODE_ON)
 8000784:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <stoplight_timer_handler+0x184>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d105      	bne.n	800079a <stoplight_timer_handler+0x10a>
					TIM2->ARR = STOPLIGHT_TIMER_NIGHT_STOP;
 800078e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000792:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000796:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000798:	e004      	b.n	80007a4 <stoplight_timer_handler+0x114>
					TIM2->ARR = STOPLIGHT_TIMER_STOP;
 800079a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800079e:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80007a2:	62da      	str	r2, [r3, #44]	@ 0x2c
				spi_master_transmit(SPI1, STOPLIGHT_YELLOW | send);
 80007a4:	88fb      	ldrh	r3, [r7, #6]
 80007a6:	f043 0302 	orr.w	r3, r3, #2
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	4619      	mov	r1, r3
 80007ae:	4817      	ldr	r0, [pc, #92]	@ (800080c <stoplight_timer_handler+0x17c>)
 80007b0:	f000 fef0 	bl	8001594 <spi_master_transmit>
				state = STOPLIGHT_STATE_BLINKING_END;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <stoplight_timer_handler+0x174>)
 80007b6:	2205      	movs	r2, #5
 80007b8:	801a      	strh	r2, [r3, #0]
			}break;
 80007ba:	e01d      	b.n	80007f8 <stoplight_timer_handler+0x168>
				TIM2->ARR = STOPLIGHT_TIMER_READY;
 80007bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007c0:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80007c4:	62da      	str	r2, [r3, #44]	@ 0x2c
				spi_master_transmit(SPI1, STOPLIGHT_RED | send);
 80007c6:	88fb      	ldrh	r3, [r7, #6]
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	4619      	mov	r1, r3
 80007d0:	480e      	ldr	r0, [pc, #56]	@ (800080c <stoplight_timer_handler+0x17c>)
 80007d2:	f000 fedf 	bl	8001594 <spi_master_transmit>
				state = STOPLIGHT_STATE_STOP;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <stoplight_timer_handler+0x174>)
 80007d8:	2200      	movs	r2, #0
 80007da:	801a      	strh	r2, [r3, #0]
			}break;
 80007dc:	e00c      	b.n	80007f8 <stoplight_timer_handler+0x168>
				TIM2->ARR = STOPLIGHT_TIMER_GO;
 80007de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007e6:	62da      	str	r2, [r3, #44]	@ 0x2c
				spi_master_transmit(SPI1, STOPLIGHT_YELLOW);
 80007e8:	2102      	movs	r1, #2
 80007ea:	4808      	ldr	r0, [pc, #32]	@ (800080c <stoplight_timer_handler+0x17c>)
 80007ec:	f000 fed2 	bl	8001594 <spi_master_transmit>
				state = STOPLIGHT_STATE_READY;
 80007f0:	4b04      	ldr	r3, [pc, #16]	@ (8000804 <stoplight_timer_handler+0x174>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	801a      	strh	r2, [r3, #0]
}
 80007f6:	e7ff      	b.n	80007f8 <stoplight_timer_handler+0x168>
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000027 	.word	0x20000027
 8000804:	20000024 	.word	0x20000024
 8000808:	20000028 	.word	0x20000028
 800080c:	40013000 	.word	0x40013000
 8000810:	20000029 	.word	0x20000029
 8000814:	20000026 	.word	0x20000026

08000818 <stoplight_night_mode>:

void stoplight_night_mode()
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
	if(night_mode == STOPLIGHT_NIGHT_MODE_OFF)
 800081c:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <stoplight_night_mode+0x28>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b01      	cmp	r3, #1
 8000824:	d103      	bne.n	800082e <stoplight_night_mode+0x16>
	{
		night_mode = STOPLIGHT_NIGHT_MODE_ON;
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <stoplight_night_mode+0x28>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		night_mode = STOPLIGHT_NIGHT_MODE_OFF;
	}
}
 800082c:	e002      	b.n	8000834 <stoplight_night_mode+0x1c>
		night_mode = STOPLIGHT_NIGHT_MODE_OFF;
 800082e:	4b04      	ldr	r3, [pc, #16]	@ (8000840 <stoplight_night_mode+0x28>)
 8000830:	2201      	movs	r2, #1
 8000832:	701a      	strb	r2, [r3, #0]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	20000026 	.word	0x20000026

08000844 <stoplight_pedestian_crossing>:

void stoplight_pedestian_crossing()
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
	if(state != STOPLIGHT_STATE_STOP)
 8000848:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <stoplight_pedestian_crossing+0x5c>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	b29b      	uxth	r3, r3
 800084e:	2b00      	cmp	r3, #0
 8000850:	d010      	beq.n	8000874 <stoplight_pedestian_crossing+0x30>
	{
		state = STOPLIGHT_STATE_BLINKING_GREEN;
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <stoplight_pedestian_crossing+0x5c>)
 8000854:	2203      	movs	r2, #3
 8000856:	801a      	strh	r2, [r3, #0]
		TIM2->ARR = STOPLIGHT_TIMER_BLINKING_OFF;
 8000858:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800085c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000860:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->EGR = TIM2->EGR | 0x1;
 8000862:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6153      	str	r3, [r2, #20]
	{
		state = STOPLIGHT_STATE_BLINKING_END;
		TIM2->ARR = STOPLIGHT_TIMER_STOP;
		TIM2->EGR = TIM2->EGR | 0x1;
	}
}
 8000872:	e00f      	b.n	8000894 <stoplight_pedestian_crossing+0x50>
		state = STOPLIGHT_STATE_BLINKING_END;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <stoplight_pedestian_crossing+0x5c>)
 8000876:	2205      	movs	r2, #5
 8000878:	801a      	strh	r2, [r3, #0]
		TIM2->ARR = STOPLIGHT_TIMER_STOP;
 800087a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800087e:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000882:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->EGR = TIM2->EGR | 0x1;
 8000884:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6153      	str	r3, [r2, #20]
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	20000024 	.word	0x20000024

080008a4 <stoplight_emergency_mode>:

void stoplight_emergency_mode()
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
	if(state != STOPLIGHT_STATE_STOP)
 80008a8:	4b16      	ldr	r3, [pc, #88]	@ (8000904 <stoplight_emergency_mode+0x60>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d010      	beq.n	80008d4 <stoplight_emergency_mode+0x30>
	{
		state = STOPLIGHT_STATE_BLINKING_GREEN;
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <stoplight_emergency_mode+0x60>)
 80008b4:	2203      	movs	r2, #3
 80008b6:	801a      	strh	r2, [r3, #0]
		TIM2->ARR = STOPLIGHT_TIMER_BLINKING_OFF;
 80008b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008c0:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->EGR = TIM2->EGR | 0x1;
 80008c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6153      	str	r3, [r2, #20]
 80008d2:	e00f      	b.n	80008f4 <stoplight_emergency_mode+0x50>
	}
	else
	{
		state = STOPLIGHT_STATE_BLINKING_END;
 80008d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <stoplight_emergency_mode+0x60>)
 80008d6:	2205      	movs	r2, #5
 80008d8:	801a      	strh	r2, [r3, #0]
		TIM2->ARR = STOPLIGHT_TIMER_STOP;
 80008da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008de:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80008e2:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->EGR = TIM2->EGR | 0x1;
 80008e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	6153      	str	r3, [r2, #20]
	}
	emergency = 1;
 80008f4:	4b04      	ldr	r3, [pc, #16]	@ (8000908 <stoplight_emergency_mode+0x64>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	20000024 	.word	0x20000024
 8000908:	20000029 	.word	0x20000029

0800090c <stoplight_out_of_order>:

void stoplight_out_of_order()
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	if(gpio_read_from_pin(GPIOA, STOPLIGHT_OUT_OF_ORDER_BUTTON) == 0x1)
 8000910:	2103      	movs	r1, #3
 8000912:	4807      	ldr	r0, [pc, #28]	@ (8000930 <stoplight_out_of_order+0x24>)
 8000914:	f000 f98b 	bl	8000c2e <gpio_read_from_pin>
 8000918:	4603      	mov	r3, r0
 800091a:	2b01      	cmp	r3, #1
 800091c:	d103      	bne.n	8000926 <stoplight_out_of_order+0x1a>
	{
		out_of_order = 1;
 800091e:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <stoplight_out_of_order+0x28>)
 8000920:	2201      	movs	r2, #1
 8000922:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		out_of_order = 0;
	}
}
 8000924:	e002      	b.n	800092c <stoplight_out_of_order+0x20>
		out_of_order = 0;
 8000926:	4b03      	ldr	r3, [pc, #12]	@ (8000934 <stoplight_out_of_order+0x28>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40020000 	.word	0x40020000
 8000934:	20000027 	.word	0x20000027

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093e:	f000 f80f 	bl	8000960 <SystemClock_Config>

	    spi_cr1_configure_spe(spi1.spi, SPI_SPE_DISABLE);
  }
*/

  int mstr = 1;
 8000942:	2301      	movs	r3, #1
 8000944:	607b      	str	r3, [r7, #4]

  if(mstr)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d003      	beq.n	8000954 <main+0x1c>
  {
	  stoplight_initialize(STOPLIGHT_MASTER);
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff fc5f 	bl	8000210 <stoplight_initialize>
 8000952:	e003      	b.n	800095c <main+0x24>
  }
  else
  {
	  stoplight_initialize(STOPLIGHT_SLAVE);
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff fc5b 	bl	8000210 <stoplight_initialize>

  }

  while (1)
 800095a:	bf00      	nop
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <main+0x24>

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }*/
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
	...

08000970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <SystemInit+0x20>)
 8000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800097a:	4a05      	ldr	r2, [pc, #20]	@ (8000990 <SystemInit+0x20>)
 800097c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000994:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000998:	f7ff ffea 	bl	8000970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800099c:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800099e:	490d      	ldr	r1, [pc, #52]	@ (80009d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a0:	4a0d      	ldr	r2, [pc, #52]	@ (80009d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b4:	4c0a      	ldr	r4, [pc, #40]	@ (80009e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80009c2:	f000 fe0b 	bl	80015dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009c6:	f7ff ffb7 	bl	8000938 <main>
  bx  lr    
 80009ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80009d8:	08001644 	.word	0x08001644
  ldr r2, =_sbss
 80009dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80009e0:	2000002c 	.word	0x2000002c

080009e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC_IRQHandler>
	...

080009e8 <__NVIC_EnableIRQ>:
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	db0b      	blt.n	8000a12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	f003 021f 	and.w	r2, r3, #31
 8000a00:	4907      	ldr	r1, [pc, #28]	@ (8000a20 <__NVIC_EnableIRQ+0x38>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	095b      	lsrs	r3, r3, #5
 8000a08:	2001      	movs	r0, #1
 8000a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000e100 	.word	0xe000e100

08000a24 <gpio_init>:
}

//**************************************GPIO PIN CONFIGURATION FUNCTIONS****************************************

int gpio_init(GPIO_TypeDef* port, gpio_pin* pin)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
	if(gpio_configure_pin_mode(port, pin->pin, pin->mode) != 0)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	b299      	uxth	r1, r3
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f000 f847 	bl	8000ace <gpio_configure_pin_mode>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d002      	beq.n	8000a4c <gpio_init+0x28>
	{
		return -1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	e03c      	b.n	8000ac6 <gpio_init+0xa2>
	}
	if(gpio_configure_pin_output_type(port, pin->pin, pin->output_type) != 0)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	b299      	uxth	r1, r3
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	461a      	mov	r2, r3
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f000 f85b 	bl	8000b14 <gpio_configure_pin_output_type>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d002      	beq.n	8000a6a <gpio_init+0x46>
	{
		return -1;
 8000a64:	f04f 33ff 	mov.w	r3, #4294967295
 8000a68:	e02d      	b.n	8000ac6 <gpio_init+0xa2>
	}
	if(gpio_configure_pin_output_speed(port, pin->pin, pin->output_speed) != 0)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	b299      	uxth	r1, r3
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	461a      	mov	r2, r3
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f000 f86d 	bl	8000b56 <gpio_configure_pin_output_speed>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d002      	beq.n	8000a88 <gpio_init+0x64>
	{
		return -1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	e01e      	b.n	8000ac6 <gpio_init+0xa2>
	}
	if(gpio_configure_pin_pull(port, pin->pin, pin->pull) != 0)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	b299      	uxth	r1, r3
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	691b      	ldr	r3, [r3, #16]
 8000a92:	461a      	mov	r2, r3
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f000 f881 	bl	8000b9c <gpio_configure_pin_pull>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d002      	beq.n	8000aa6 <gpio_init+0x82>
	{
		return -1;
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa4:	e00f      	b.n	8000ac6 <gpio_init+0xa2>
	}
	if(gpio_configure_pin_alternate_function(port, pin->pin, pin->alternate_function) != 0)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	b299      	uxth	r1, r3
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 f895 	bl	8000be2 <gpio_configure_pin_alternate_function>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d002      	beq.n	8000ac4 <gpio_init+0xa0>
	{
		return -1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	e000      	b.n	8000ac6 <gpio_init+0xa2>
	}
	return 0;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <gpio_configure_pin_mode>:

int gpio_configure_pin_mode(GPIO_TypeDef* port, uint16_t pin, uint32_t mode)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b085      	sub	sp, #20
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	60f8      	str	r0, [r7, #12]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	817b      	strh	r3, [r7, #10]
	port->MODER = port->MODER & ~(0x00000003 << (pin*2));
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	897a      	ldrh	r2, [r7, #10]
 8000ae2:	0052      	lsls	r2, r2, #1
 8000ae4:	2103      	movs	r1, #3
 8000ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aea:	43d2      	mvns	r2, r2
 8000aec:	401a      	ands	r2, r3
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	601a      	str	r2, [r3, #0]
	port->MODER = port->MODER | (mode << (pin*2));
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	897b      	ldrh	r3, [r7, #10]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	fa01 f303 	lsl.w	r3, r1, r3
 8000b00:	431a      	orrs	r2, r3
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	601a      	str	r2, [r3, #0]

	return 0;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <gpio_configure_pin_output_type>:

int gpio_configure_pin_output_type(GPIO_TypeDef* port, uint16_t pin, uint32_t type)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	607a      	str	r2, [r7, #4]
 8000b20:	817b      	strh	r3, [r7, #10]
	port->OTYPER = port->OTYPER & ~(0x00000001 << pin);
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	897a      	ldrh	r2, [r7, #10]
 8000b28:	2101      	movs	r1, #1
 8000b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2e:	43d2      	mvns	r2, r2
 8000b30:	401a      	ands	r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	605a      	str	r2, [r3, #4]
	port->OTYPER = port->OTYPER | (type << pin);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	897b      	ldrh	r3, [r7, #10]
 8000b3c:	6879      	ldr	r1, [r7, #4]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	431a      	orrs	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	605a      	str	r2, [r3, #4]

	return 0;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <gpio_configure_pin_output_speed>:

int gpio_configure_pin_output_speed(GPIO_TypeDef* port, uint16_t pin, uint32_t speed)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b085      	sub	sp, #20
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	60f8      	str	r0, [r7, #12]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	817b      	strh	r3, [r7, #10]
	port->OSPEEDR = port->OSPEEDR & ~(0x00000003 << (pin*2));
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	897a      	ldrh	r2, [r7, #10]
 8000b6a:	0052      	lsls	r2, r2, #1
 8000b6c:	2103      	movs	r1, #3
 8000b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b72:	43d2      	mvns	r2, r2
 8000b74:	401a      	ands	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	609a      	str	r2, [r3, #8]
	port->OSPEEDR = port->OSPEEDR | (speed << (pin*2));
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	689a      	ldr	r2, [r3, #8]
 8000b7e:	897b      	ldrh	r3, [r7, #10]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	fa01 f303 	lsl.w	r3, r1, r3
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	609a      	str	r2, [r3, #8]

	return 0;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <gpio_configure_pin_pull>:

int gpio_configure_pin_pull(GPIO_TypeDef* port, uint16_t pin, uint32_t pull)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	607a      	str	r2, [r7, #4]
 8000ba8:	817b      	strh	r3, [r7, #10]
	port->PUPDR = port->PUPDR & ~(0x00000003 << (pin*2));
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	897a      	ldrh	r2, [r7, #10]
 8000bb0:	0052      	lsls	r2, r2, #1
 8000bb2:	2103      	movs	r1, #3
 8000bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb8:	43d2      	mvns	r2, r2
 8000bba:	401a      	ands	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	60da      	str	r2, [r3, #12]
	port->PUPDR = port->PUPDR | (pull << (pin*2));
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	68da      	ldr	r2, [r3, #12]
 8000bc4:	897b      	ldrh	r3, [r7, #10]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	60da      	str	r2, [r3, #12]

	return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <gpio_configure_pin_alternate_function>:

int gpio_configure_pin_alternate_function(GPIO_TypeDef* port, uint16_t pin, uint32_t alt_function)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b085      	sub	sp, #20
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60f8      	str	r0, [r7, #12]
 8000bea:	460b      	mov	r3, r1
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	817b      	strh	r3, [r7, #10]
	if(pin < 8)
 8000bf0:	897b      	ldrh	r3, [r7, #10]
 8000bf2:	2b07      	cmp	r3, #7
 8000bf4:	d814      	bhi.n	8000c20 <gpio_configure_pin_alternate_function+0x3e>
	{
		port->AFR[0] = port->AFR[0] & ~(0x0000000F << (pin*4));
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	6a1b      	ldr	r3, [r3, #32]
 8000bfa:	897a      	ldrh	r2, [r7, #10]
 8000bfc:	0092      	lsls	r2, r2, #2
 8000bfe:	210f      	movs	r1, #15
 8000c00:	fa01 f202 	lsl.w	r2, r1, r2
 8000c04:	43d2      	mvns	r2, r2
 8000c06:	401a      	ands	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	621a      	str	r2, [r3, #32]
		port->AFR[0] = port->AFR[0] | (alt_function << (pin*4));
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	6a1a      	ldr	r2, [r3, #32]
 8000c10:	897b      	ldrh	r3, [r7, #10]
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	621a      	str	r2, [r3, #32]
	{
		//port->AFR[1] = port-AFR[1] & ~(0x0000000F << (pin*4));
		//port->AFR[1] = port->AFR[1] | (alt_function << (pin*4));
	}

	return 0;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <gpio_read_from_pin>:

//***********************************GPIO READING AND WRITING FUNCTIONS*************************************

uint8_t gpio_read_from_pin(GPIO_TypeDef* port, uint16_t pin)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	460b      	mov	r3, r1
 8000c38:	807b      	strh	r3, [r7, #2]
	return ((port->IDR >> pin) & 0x1);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	691a      	ldr	r2, [r3, #16]
 8000c3e:	887b      	ldrh	r3, [r7, #2]
 8000c40:	fa22 f303 	lsr.w	r3, r2, r3
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	b2db      	uxtb	r3, r3
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <gpio_write_to_pin>:

int gpio_write_to_pin(GPIO_TypeDef* port, uint16_t pin, uint8_t value)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
 8000c64:	4613      	mov	r3, r2
 8000c66:	707b      	strb	r3, [r7, #1]
	port->ODR = port->ODR & ~(0x00000001 << pin);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	887a      	ldrh	r2, [r7, #2]
 8000c6e:	2101      	movs	r1, #1
 8000c70:	fa01 f202 	lsl.w	r2, r1, r2
 8000c74:	43d2      	mvns	r2, r2
 8000c76:	401a      	ands	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	615a      	str	r2, [r3, #20]
	port->ODR = port->ODR | (value << pin);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	7879      	ldrb	r1, [r7, #1]
 8000c82:	887a      	ldrh	r2, [r7, #2]
 8000c84:	fa01 f202 	lsl.w	r2, r1, r2
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	615a      	str	r2, [r3, #20]

	return 0;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <gpio_write_to_port>:
	}
	return value;
}

int gpio_write_to_port(GPIO_TypeDef* port, uint16_t value)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	for(int i = 0; i < 15; i++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	e011      	b.n	8000cd2 <gpio_write_to_port+0x36>
	{
		tmp = value % 2;
 8000cae:	887b      	ldrh	r3, [r7, #2]
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	817b      	strh	r3, [r7, #10]
		gpio_write_to_pin(port, i, tmp);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	897a      	ldrh	r2, [r7, #10]
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ffc9 	bl	8000c58 <gpio_write_to_pin>
		value = value >> 1;
 8000cc6:	887b      	ldrh	r3, [r7, #2]
 8000cc8:	085b      	lsrs	r3, r3, #1
 8000cca:	807b      	strh	r3, [r7, #2]
	for(int i = 0; i < 15; i++)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2b0e      	cmp	r3, #14
 8000cd6:	ddea      	ble.n	8000cae <gpio_write_to_port+0x12>
	}

	return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <gpio_configure_interrupt>:

//*************************************GPIO INTERRUPT HANDLING FUNTIONS***************************************

int gpio_configure_interrupt(uint16_t pin, uint32_t edge)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	80fb      	strh	r3, [r7, #6]
	if(edge == GPIO_RISING_EDGE)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d116      	bne.n	8000d24 <gpio_configure_interrupt+0x40>
	{
		EXTI->RTSR = EXTI->RTSR & ~(0x00000001 << pin);
 8000cf6:	4b34      	ldr	r3, [pc, #208]	@ (8000dc8 <gpio_configure_interrupt+0xe4>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	88fa      	ldrh	r2, [r7, #6]
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000d02:	43d2      	mvns	r2, r2
 8000d04:	4611      	mov	r1, r2
 8000d06:	4a30      	ldr	r2, [pc, #192]	@ (8000dc8 <gpio_configure_interrupt+0xe4>)
 8000d08:	400b      	ands	r3, r1
 8000d0a:	6093      	str	r3, [r2, #8]
		EXTI->RTSR = EXTI->RTSR | (1 << pin);
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc8 <gpio_configure_interrupt+0xe4>)
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	88fa      	ldrh	r2, [r7, #6]
 8000d12:	2101      	movs	r1, #1
 8000d14:	fa01 f202 	lsl.w	r2, r1, r2
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4a2b      	ldr	r2, [pc, #172]	@ (8000dc8 <gpio_configure_interrupt+0xe4>)
 8000d1c:	430b      	orrs	r3, r1
 8000d1e:	6093      	str	r3, [r2, #8]

		return 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	e04a      	b.n	8000dba <gpio_configure_interrupt+0xd6>
	}
	else if(edge == GPIO_FALLING_EDGE)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d116      	bne.n	8000d58 <gpio_configure_interrupt+0x74>
	{
		EXTI->FTSR = EXTI->FTSR & ~(0x00000001 << pin);
 8000d2a:	4b27      	ldr	r3, [pc, #156]	@ (8000dc8 <gpio_configure_interrupt+0xe4>)
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	88fa      	ldrh	r2, [r7, #6]
 8000d30:	2101      	movs	r1, #1
 8000d32:	fa01 f202 	lsl.w	r2, r1, r2
 8000d36:	43d2      	mvns	r2, r2
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4a23      	ldr	r2, [pc, #140]	@ (8000dc8 <gpio_configure_interrupt+0xe4>)
 8000d3c:	400b      	ands	r3, r1
 8000d3e:	60d3      	str	r3, [r2, #12]
		EXTI->FTSR = EXTI->FTSR | (1 << pin);
 8000d40:	4b21      	ldr	r3, [pc, #132]	@ (8000dc8 <gpio_configure_interrupt+0xe4>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	88fa      	ldrh	r2, [r7, #6]
 8000d46:	2101      	movs	r1, #1
 8000d48:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000dc8 <gpio_configure_interrupt+0xe4>)
 8000d50:	430b      	orrs	r3, r1
 8000d52:	60d3      	str	r3, [r2, #12]

		return 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	e030      	b.n	8000dba <gpio_configure_interrupt+0xd6>
	}
	else if(edge == GPIO_RISING_FALLING_EDGE)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d12b      	bne.n	8000db6 <gpio_configure_interrupt+0xd2>
	{
		EXTI->RTSR = EXTI->RTSR & ~(0x00000001 << pin);
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <gpio_configure_interrupt+0xe4>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	88fa      	ldrh	r2, [r7, #6]
 8000d64:	2101      	movs	r1, #1
 8000d66:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6a:	43d2      	mvns	r2, r2
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4a16      	ldr	r2, [pc, #88]	@ (8000dc8 <gpio_configure_interrupt+0xe4>)
 8000d70:	400b      	ands	r3, r1
 8000d72:	6093      	str	r3, [r2, #8]
		EXTI->RTSR = EXTI->RTSR | (1 << pin);
 8000d74:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <gpio_configure_interrupt+0xe4>)
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	88fa      	ldrh	r2, [r7, #6]
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d80:	4611      	mov	r1, r2
 8000d82:	4a11      	ldr	r2, [pc, #68]	@ (8000dc8 <gpio_configure_interrupt+0xe4>)
 8000d84:	430b      	orrs	r3, r1
 8000d86:	6093      	str	r3, [r2, #8]
		EXTI->FTSR = EXTI->FTSR & ~(0x00000001 << pin);
 8000d88:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <gpio_configure_interrupt+0xe4>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	88fa      	ldrh	r2, [r7, #6]
 8000d8e:	2101      	movs	r1, #1
 8000d90:	fa01 f202 	lsl.w	r2, r1, r2
 8000d94:	43d2      	mvns	r2, r2
 8000d96:	4611      	mov	r1, r2
 8000d98:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc8 <gpio_configure_interrupt+0xe4>)
 8000d9a:	400b      	ands	r3, r1
 8000d9c:	60d3      	str	r3, [r2, #12]
		EXTI->FTSR = EXTI->FTSR | (1 << pin);
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <gpio_configure_interrupt+0xe4>)
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	88fa      	ldrh	r2, [r7, #6]
 8000da4:	2101      	movs	r1, #1
 8000da6:	fa01 f202 	lsl.w	r2, r1, r2
 8000daa:	4611      	mov	r1, r2
 8000dac:	4a06      	ldr	r2, [pc, #24]	@ (8000dc8 <gpio_configure_interrupt+0xe4>)
 8000dae:	430b      	orrs	r3, r1
 8000db0:	60d3      	str	r3, [r2, #12]

		return 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e001      	b.n	8000dba <gpio_configure_interrupt+0xd6>
	}
	else
	{
		return -1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40013c00 	.word	0x40013c00

08000dcc <gpio_enable_interrupt>:

int gpio_enable_interrupt(uint16_t pin, IRQn_Type irq)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	460a      	mov	r2, r1
 8000dd6:	80fb      	strh	r3, [r7, #6]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	717b      	strb	r3, [r7, #5]
	EXTI->IMR = EXTI->IMR & ~(0x00000001 << pin);
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <gpio_enable_interrupt+0x50>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	88fa      	ldrh	r2, [r7, #6]
 8000de2:	2101      	movs	r1, #1
 8000de4:	fa01 f202 	lsl.w	r2, r1, r2
 8000de8:	43d2      	mvns	r2, r2
 8000dea:	4611      	mov	r1, r2
 8000dec:	4a0b      	ldr	r2, [pc, #44]	@ (8000e1c <gpio_enable_interrupt+0x50>)
 8000dee:	400b      	ands	r3, r1
 8000df0:	6013      	str	r3, [r2, #0]
	EXTI->IMR = EXTI->IMR | (1 << pin);
 8000df2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <gpio_enable_interrupt+0x50>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	88fa      	ldrh	r2, [r7, #6]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4a06      	ldr	r2, [pc, #24]	@ (8000e1c <gpio_enable_interrupt+0x50>)
 8000e02:	430b      	orrs	r3, r1
 8000e04:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(irq);
 8000e06:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fdec 	bl	80009e8 <__NVIC_EnableIRQ>

	return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40013c00 	.word	0x40013c00

08000e20 <gpio_clear_interrupt>:

int gpio_clear_interrupt(uint16_t pin)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]
	if(EXTI->PR & (1 << pin))
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <gpio_clear_interrupt+0x44>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	88fa      	ldrh	r2, [r7, #6]
 8000e30:	2101      	movs	r1, #1
 8000e32:	fa01 f202 	lsl.w	r2, r1, r2
 8000e36:	4013      	ands	r3, r2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d00b      	beq.n	8000e54 <gpio_clear_interrupt+0x34>
	{
		EXTI->PR = EXTI->PR | (1 << pin);
 8000e3c:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <gpio_clear_interrupt+0x44>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	88fa      	ldrh	r2, [r7, #6]
 8000e42:	2101      	movs	r1, #1
 8000e44:	fa01 f202 	lsl.w	r2, r1, r2
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4a06      	ldr	r2, [pc, #24]	@ (8000e64 <gpio_clear_interrupt+0x44>)
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	6153      	str	r3, [r2, #20]

		return 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	e000      	b.n	8000e56 <gpio_clear_interrupt+0x36>
	}

	return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40013c00 	.word	0x40013c00

08000e68 <__NVIC_EnableIRQ>:
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4907      	ldr	r1, [pc, #28]	@ (8000ea0 <__NVIC_EnableIRQ+0x38>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <spi_choose_type>:
 */

#include <STM32F401VE_SPI_driver.h>

void spi_choose_type(uint32_t spi)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	switch(spi)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d826      	bhi.n	8000f00 <spi_choose_type+0x5c>
 8000eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8000eb8 <spi_choose_type+0x14>)
 8000eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb8:	08000ec9 	.word	0x08000ec9
 8000ebc:	08000ed7 	.word	0x08000ed7
 8000ec0:	08000ee5 	.word	0x08000ee5
 8000ec4:	08000ef3 	.word	0x08000ef3
	{
	case SPI1_TYPE:
	{
		RCC->APB2ENR = RCC->APB2ENR | SPI1EN;
 8000ec8:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <spi_choose_type+0x68>)
 8000eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ecc:	4a0f      	ldr	r2, [pc, #60]	@ (8000f0c <spi_choose_type+0x68>)
 8000ece:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ed2:	6453      	str	r3, [r2, #68]	@ 0x44
	}break;
 8000ed4:	e014      	b.n	8000f00 <spi_choose_type+0x5c>
	case SPI2_TYPE:
	{
		RCC->APB1ENR = RCC->APB1ENR | SPI2EN;
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <spi_choose_type+0x68>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	4a0c      	ldr	r2, [pc, #48]	@ (8000f0c <spi_choose_type+0x68>)
 8000edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee0:	6413      	str	r3, [r2, #64]	@ 0x40
	}break;
 8000ee2:	e00d      	b.n	8000f00 <spi_choose_type+0x5c>
	case SPI3_TYPE:
	{
		RCC->APB1ENR = RCC->APB1ENR | SPI3EN;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <spi_choose_type+0x68>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee8:	4a08      	ldr	r2, [pc, #32]	@ (8000f0c <spi_choose_type+0x68>)
 8000eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000eee:	6413      	str	r3, [r2, #64]	@ 0x40
	}break;
 8000ef0:	e006      	b.n	8000f00 <spi_choose_type+0x5c>
	case SPI4_TYPE:
	{
		RCC->APB2ENR = RCC->APB2ENR | SPI4EN;
 8000ef2:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <spi_choose_type+0x68>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	4a05      	ldr	r2, [pc, #20]	@ (8000f0c <spi_choose_type+0x68>)
 8000ef8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000efc:	6453      	str	r3, [r2, #68]	@ 0x44
	}break;
 8000efe:	bf00      	nop
	}
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	40023800 	.word	0x40023800

08000f10 <spi_configure_cr1>:

void spi_configure_cr1(SPI_TypeDef* type, uint16_t bidimode, uint16_t bidioe, uint16_t crcen, uint16_t crcnext, uint16_t dff, uint16_t rxonly, uint16_t ssm, uint16_t ssi, uint16_t lsbfirst, uint16_t br, uint16_t mstr, uint16_t cpol, uint16_t cpha)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	4608      	mov	r0, r1
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4603      	mov	r3, r0
 8000f20:	817b      	strh	r3, [r7, #10]
 8000f22:	460b      	mov	r3, r1
 8000f24:	813b      	strh	r3, [r7, #8]
 8000f26:	4613      	mov	r3, r2
 8000f28:	80fb      	strh	r3, [r7, #6]
	spi_cr1_configure_bidimode(type, bidimode);
 8000f2a:	897b      	ldrh	r3, [r7, #10]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	f000 f8e2 	bl	80010f8 <spi_cr1_configure_bidimode>
	spi_cr1_configure_bidioe(type, bidioe);
 8000f34:	893b      	ldrh	r3, [r7, #8]
 8000f36:	4619      	mov	r1, r3
 8000f38:	68f8      	ldr	r0, [r7, #12]
 8000f3a:	f000 f8f6 	bl	800112a <spi_cr1_configure_bidioe>
	spi_cr1_configure_crcen(type, crcen);
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	4619      	mov	r1, r3
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f000 f90a 	bl	800115c <spi_cr1_configure_crcen>
	spi_cr1_configure_crcnext(type, crcnext);
 8000f48:	8b3b      	ldrh	r3, [r7, #24]
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f000 f91e 	bl	800118e <spi_cr1_configure_crcnext>
	spi_cr1_configure_dff(type, dff);
 8000f52:	8bbb      	ldrh	r3, [r7, #28]
 8000f54:	4619      	mov	r1, r3
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f000 f932 	bl	80011c0 <spi_cr1_configure_dff>
	spi_cr1_configure_rxonly(type, rxonly);
 8000f5c:	8c3b      	ldrh	r3, [r7, #32]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	68f8      	ldr	r0, [r7, #12]
 8000f62:	f000 f946 	bl	80011f2 <spi_cr1_configure_rxonly>
	spi_cr1_configure_ssm(type, ssm);
 8000f66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f000 f95a 	bl	8001224 <spi_cr1_configure_ssm>
	spi_cr1_configure_ssi(type, ssi);
 8000f70:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000f72:	4619      	mov	r1, r3
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	f000 f96e 	bl	8001256 <spi_cr1_configure_ssi>
	spi_cr1_configure_lsbfirst(type, lsbfirst);
 8000f7a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f000 f982 	bl	8001288 <spi_cr1_configure_lsbfirst>
	spi_cr1_configure_br(type, br);
 8000f84:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000f86:	4619      	mov	r1, r3
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f000 f9af 	bl	80012ec <spi_cr1_configure_br>
	spi_cr1_configure_mstr(type, mstr);
 8000f8e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000f90:	4619      	mov	r1, r3
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f000 f9c3 	bl	800131e <spi_cr1_configure_mstr>
	spi_cr1_configure_cpol(type, cpol);
 8000f98:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f000 f9d7 	bl	8001350 <spi_cr1_configure_cpol>
	spi_cr1_configure_cpha(type, cpha);
 8000fa2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f000 f9eb 	bl	8001382 <spi_cr1_configure_cpha>
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <spi_configure_cr2>:

void spi_configure_cr2(SPI_TypeDef* type, uint16_t txeie, uint16_t rxneie, uint16_t errie, uint16_t frf, uint16_t ssoe, uint16_t txdmaen, uint16_t rxdmaen)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	817b      	strh	r3, [r7, #10]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	813b      	strh	r3, [r7, #8]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	80fb      	strh	r3, [r7, #6]
	spi_cr2_configure_txeie(type, txeie);
 8000fce:	897b      	ldrh	r3, [r7, #10]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f000 f9ed 	bl	80013b2 <spi_cr2_configure_txeie>
	spi_cr2_configure_rxneie(type, rxneie);
 8000fd8:	893b      	ldrh	r3, [r7, #8]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f000 fa01 	bl	80013e4 <spi_cr2_configure_rxneie>
	spi_cr2_configure_errie(type, errie);
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f000 fa15 	bl	8001416 <spi_cr2_configure_errie>
	spi_cr2_configure_frf(type, frf);
 8000fec:	8b3b      	ldrh	r3, [r7, #24]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	f000 fa29 	bl	8001448 <spi_cr2_configure_frf>
	spi_cr2_configure_ssoe(type, ssoe);
 8000ff6:	8bbb      	ldrh	r3, [r7, #28]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f000 fa3d 	bl	800147a <spi_cr2_configure_ssoe>
	spi_cr2_configure_txdmaen(type, txdmaen);
 8001000:	8c3b      	ldrh	r3, [r7, #32]
 8001002:	4619      	mov	r1, r3
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f000 fa51 	bl	80014ac <spi_cr2_configure_txdmaen>
	spi_cr2_configure_rxdmaen(type, rxdmaen);
 800100a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800100c:	4619      	mov	r1, r3
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f000 fa65 	bl	80014de <spi_cr2_configure_rxdmaen>
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <spi_configure>:

void spi_configure(spi_type* spi)
{
 800101c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001020:	b091      	sub	sp, #68	@ 0x44
 8001022:	af0a      	add	r7, sp, #40	@ 0x28
 8001024:	6178      	str	r0, [r7, #20]
	spi_choose_type(spi->type);
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff3a 	bl	8000ea4 <spi_choose_type>
	spi_cr1_configure_spe(spi->spi, 0x0);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f93f 	bl	80012ba <spi_cr1_configure_spe>
	spi_configure_cr1(spi->spi, spi->bidimode, spi->bidioe, spi->crcen, spi->crcnext, spi->dff, spi->rxonly, spi->ssm, spi->ssi, spi->lsbfirst, spi->br, spi->mstr, spi->cpol, spi->cpha);
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	89da      	ldrh	r2, [r3, #14]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	8a19      	ldrh	r1, [r3, #16]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	8a58      	ldrh	r0, [r3, #18]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	8a9c      	ldrh	r4, [r3, #20]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	8add      	ldrh	r5, [r3, #22]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	8b1e      	ldrh	r6, [r3, #24]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	8b9b      	ldrh	r3, [r3, #28]
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	8bdb      	ldrh	r3, [r3, #30]
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f8b3 9020 	ldrh.w	r9, [r3, #32]
 800107e:	464b      	mov	r3, r9
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001086:	9309      	str	r3, [sp, #36]	@ 0x24
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	9308      	str	r3, [sp, #32]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	9307      	str	r3, [sp, #28]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	9306      	str	r3, [sp, #24]
 8001094:	9605      	str	r6, [sp, #20]
 8001096:	9504      	str	r5, [sp, #16]
 8001098:	9403      	str	r4, [sp, #12]
 800109a:	9002      	str	r0, [sp, #8]
 800109c:	9101      	str	r1, [sp, #4]
 800109e:	9200      	str	r2, [sp, #0]
 80010a0:	4643      	mov	r3, r8
 80010a2:	4672      	mov	r2, lr
 80010a4:	4661      	mov	r1, ip
 80010a6:	6938      	ldr	r0, [r7, #16]
 80010a8:	f7ff ff32 	bl	8000f10 <spi_configure_cr1>
	spi_configure_cr2(spi->spi, spi->txeie, spi->rxneie, spi->errie, spi->frf, spi->ssoe, spi->txdmaen, spi->rxdmaen);
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	681c      	ldr	r4, [r3, #0]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	8c9d      	ldrh	r5, [r3, #36]	@ 0x24
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	8cde      	ldrh	r6, [r3, #38]	@ 0x26
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f8b3 c028 	ldrh.w	ip, [r3, #40]	@ 0x28
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 80010c6:	6979      	ldr	r1, [r7, #20]
 80010c8:	8dc9      	ldrh	r1, [r1, #46]	@ 0x2e
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
 80010ce:	9003      	str	r0, [sp, #12]
 80010d0:	9102      	str	r1, [sp, #8]
 80010d2:	9201      	str	r2, [sp, #4]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	4663      	mov	r3, ip
 80010d8:	4632      	mov	r2, r6
 80010da:	4629      	mov	r1, r5
 80010dc:	4620      	mov	r0, r4
 80010de:	f7ff ff69 	bl	8000fb4 <spi_configure_cr2>
	spi_cr1_configure_spe(spi->spi, 0x1);
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2101      	movs	r1, #1
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f8e6 	bl	80012ba <spi_cr1_configure_spe>
}
 80010ee:	bf00      	nop
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080010f8 <spi_cr1_configure_bidimode>:


void spi_cr1_configure_bidimode(SPI_TypeDef* type, uint16_t bidimode)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_BIDIMODE);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (bidimode << SPI_BIDIMODE);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	887b      	ldrh	r3, [r7, #2]
 8001116:	03db      	lsls	r3, r3, #15
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	601a      	str	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <spi_cr1_configure_bidioe>:

void spi_cr1_configure_bidioe(SPI_TypeDef* type, uint16_t bidioe)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	460b      	mov	r3, r1
 8001134:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_BIDIOE);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (bidioe << SPI_BIDIOE);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	887b      	ldrh	r3, [r7, #2]
 8001148:	039b      	lsls	r3, r3, #14
 800114a:	431a      	orrs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	601a      	str	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <spi_cr1_configure_crcen>:

void spi_cr1_configure_crcen(SPI_TypeDef* type, uint16_t crcen)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_CRCEN);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (crcen << SPI_CRCEN);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	035b      	lsls	r3, r3, #13
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	601a      	str	r2, [r3, #0]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <spi_cr1_configure_crcnext>:

void spi_cr1_configure_crcnext(SPI_TypeDef* type, uint16_t crcnext)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	460b      	mov	r3, r1
 8001198:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_CRCNEXT);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (crcnext << SPI_CRCNEXT);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	031b      	lsls	r3, r3, #12
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	601a      	str	r2, [r3, #0]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <spi_cr1_configure_dff>:

void spi_cr1_configure_dff(SPI_TypeDef* type, uint16_t dff)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_DFF);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (dff << SPI_DFF);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	02db      	lsls	r3, r3, #11
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	601a      	str	r2, [r3, #0]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <spi_cr1_configure_rxonly>:

void spi_cr1_configure_rxonly(SPI_TypeDef* type, uint16_t rxonly)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	460b      	mov	r3, r1
 80011fc:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_RXONLY);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (rxonly << SPI_RXONLY);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	029b      	lsls	r3, r3, #10
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	601a      	str	r2, [r3, #0]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <spi_cr1_configure_ssm>:

void spi_cr1_configure_ssm(SPI_TypeDef* type, uint16_t ssm)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_SSM);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (ssm << SPI_SSM);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	887b      	ldrh	r3, [r7, #2]
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	601a      	str	r2, [r3, #0]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <spi_cr1_configure_ssi>:

void spi_cr1_configure_ssi(SPI_TypeDef* type, uint16_t ssi)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_SSI);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (ssi << SPI_SSI);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	601a      	str	r2, [r3, #0]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <spi_cr1_configure_lsbfirst>:

void spi_cr1_configure_lsbfirst(SPI_TypeDef* type, uint16_t lsbfirst)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_LSBFIRST);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (lsbfirst << SPI_LSBFIRST);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	01db      	lsls	r3, r3, #7
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	601a      	str	r2, [r3, #0]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <spi_cr1_configure_spe>:

void spi_cr1_configure_spe(SPI_TypeDef* type, uint16_t spe)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	460b      	mov	r3, r1
 80012c4:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_SPE);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (spe << SPI_SPE);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	019b      	lsls	r3, r3, #6
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	601a      	str	r2, [r3, #0]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <spi_cr1_configure_br>:

void spi_cr1_configure_br(SPI_TypeDef* type, uint16_t br)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0007 << SPI_BR);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (br << SPI_BR);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	887b      	ldrh	r3, [r7, #2]
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	601a      	str	r2, [r3, #0]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <spi_cr1_configure_mstr>:

void spi_cr1_configure_mstr(SPI_TypeDef* type, uint16_t mstr)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	460b      	mov	r3, r1
 8001328:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_MSTR);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 0204 	bic.w	r2, r3, #4
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (mstr << SPI_MSTR);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	887b      	ldrh	r3, [r7, #2]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	601a      	str	r2, [r3, #0]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <spi_cr1_configure_cpol>:

void spi_cr1_configure_cpol(SPI_TypeDef* type, uint16_t cpol)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_CPOL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f023 0202 	bic.w	r2, r3, #2
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (cpol << SPI_CPOL);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	887b      	ldrh	r3, [r7, #2]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	601a      	str	r2, [r3, #0]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <spi_cr1_configure_cpha>:

void spi_cr1_configure_cpha(SPI_TypeDef* type, uint16_t cpha)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	460b      	mov	r3, r1
 800138c:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_CPHA);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 0201 	bic.w	r2, r3, #1
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (cpha << SPI_CPHA);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	601a      	str	r2, [r3, #0]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <spi_cr2_configure_txeie>:

void spi_cr2_configure_txeie(SPI_TypeDef* type, uint16_t txeie)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_TXEIE);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (txeie << SPI_TXEIE);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	01db      	lsls	r3, r3, #7
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	605a      	str	r2, [r3, #4]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <spi_cr2_configure_rxneie>:

void spi_cr2_configure_rxneie(SPI_TypeDef* type, uint16_t rxneie)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_RXNEIE);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (rxneie << SPI_RXNEIE);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	887b      	ldrh	r3, [r7, #2]
 8001402:	019b      	lsls	r3, r3, #6
 8001404:	431a      	orrs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	605a      	str	r2, [r3, #4]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <spi_cr2_configure_errie>:

void spi_cr2_configure_errie(SPI_TypeDef* type, uint16_t errie)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	460b      	mov	r3, r1
 8001420:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_ERRIE);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f023 0220 	bic.w	r2, r3, #32
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (errie << SPI_ERRIE);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	015b      	lsls	r3, r3, #5
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	605a      	str	r2, [r3, #4]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <spi_cr2_configure_frf>:

void spi_cr2_configure_frf(SPI_TypeDef* type, uint16_t frf)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_FRF);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f023 0210 	bic.w	r2, r3, #16
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (frf << SPI_FRF);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	605a      	str	r2, [r3, #4]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <spi_cr2_configure_ssoe>:

void spi_cr2_configure_ssoe(SPI_TypeDef* type, uint16_t ssoe)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_SSOE);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f023 0204 	bic.w	r2, r3, #4
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (ssoe << SPI_SSOE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	887b      	ldrh	r3, [r7, #2]
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	605a      	str	r2, [r3, #4]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <spi_cr2_configure_txdmaen>:

void spi_cr2_configure_txdmaen(SPI_TypeDef* type, uint16_t txdmaen)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_TXDMAEN);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f023 0202 	bic.w	r2, r3, #2
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (txdmaen << SPI_TXDMAEN);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	887b      	ldrh	r3, [r7, #2]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	605a      	str	r2, [r3, #4]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <spi_cr2_configure_rxdmaen>:

void spi_cr2_configure_rxdmaen(SPI_TypeDef* type, uint16_t rxdmaen)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_RXDMAEN);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f023 0201 	bic.w	r2, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (rxdmaen << SPI_RXDMAEN);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	605a      	str	r2, [r3, #4]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <spi_sr_check_txe>:
{
	return ((type->SR & (0x0001 << SPI_CHSIDE)) >> SPI_CHSIDE);
}

uint16_t spi_sr_check_txe(SPI_TypeDef* type)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	return ((type->SR & (0x0001 << SPI_TXE)) >> SPI_TXE);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	085b      	lsrs	r3, r3, #1
 800151c:	b29b      	uxth	r3, r3
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	b29b      	uxth	r3, r3
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <spi_dr_write>:


//**************************************SPI TRANSFER FUNCTIONS*****************************************************

void spi_dr_write(SPI_TypeDef* type, uint16_t data)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
	type->DR = data;
 800153c:	887a      	ldrh	r2, [r7, #2]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	60da      	str	r2, [r3, #12]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <spi_dr_read>:

uint16_t spi_dr_read(SPI_TypeDef* type)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
	return type->DR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	b29b      	uxth	r3, r3
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <spi_slave_transmit>:

void spi_slave_transmit(SPI_TypeDef* type, uint16_t data)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
	while(spi_sr_check_txe(type) == SPI_TXE_NO_EMPTY);
 8001574:	bf00      	nop
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffc9 	bl	800150e <spi_sr_check_txe>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f9      	beq.n	8001576 <spi_slave_transmit+0xe>
	spi_dr_write(type, data);
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	4619      	mov	r1, r3
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffd2 	bl	8001530 <spi_dr_write>
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <spi_master_transmit>:
	while(spi_sr_check_rxne(type) == SPI_RXNE_EMPTY);
	return spi_dr_read(type);
}

void spi_master_transmit(SPI_TypeDef* type, uint16_t data)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
	while(spi_sr_check_txe(type) == SPI_TXE_NO_EMPTY);
 80015a0:	bf00      	nop
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffb3 	bl	800150e <spi_sr_check_txe>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f9      	beq.n	80015a2 <spi_master_transmit+0xe>
	spi_dr_write(type, data);
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	4619      	mov	r1, r3
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ffbc 	bl	8001530 <spi_dr_write>
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <spi_enable_interrupt>:
}

//********************************************************SPI INTERRUPT HANDLING************************************

void spi_enable_interrupt(IRQn_Type irq)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
	NVIC_EnableIRQ(irq);
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fc4a 	bl	8000e68 <__NVIC_EnableIRQ>
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <__libc_init_array>:
 80015dc:	b570      	push	{r4, r5, r6, lr}
 80015de:	4d0d      	ldr	r5, [pc, #52]	@ (8001614 <__libc_init_array+0x38>)
 80015e0:	4c0d      	ldr	r4, [pc, #52]	@ (8001618 <__libc_init_array+0x3c>)
 80015e2:	1b64      	subs	r4, r4, r5
 80015e4:	10a4      	asrs	r4, r4, #2
 80015e6:	2600      	movs	r6, #0
 80015e8:	42a6      	cmp	r6, r4
 80015ea:	d109      	bne.n	8001600 <__libc_init_array+0x24>
 80015ec:	4d0b      	ldr	r5, [pc, #44]	@ (800161c <__libc_init_array+0x40>)
 80015ee:	4c0c      	ldr	r4, [pc, #48]	@ (8001620 <__libc_init_array+0x44>)
 80015f0:	f000 f818 	bl	8001624 <_init>
 80015f4:	1b64      	subs	r4, r4, r5
 80015f6:	10a4      	asrs	r4, r4, #2
 80015f8:	2600      	movs	r6, #0
 80015fa:	42a6      	cmp	r6, r4
 80015fc:	d105      	bne.n	800160a <__libc_init_array+0x2e>
 80015fe:	bd70      	pop	{r4, r5, r6, pc}
 8001600:	f855 3b04 	ldr.w	r3, [r5], #4
 8001604:	4798      	blx	r3
 8001606:	3601      	adds	r6, #1
 8001608:	e7ee      	b.n	80015e8 <__libc_init_array+0xc>
 800160a:	f855 3b04 	ldr.w	r3, [r5], #4
 800160e:	4798      	blx	r3
 8001610:	3601      	adds	r6, #1
 8001612:	e7f2      	b.n	80015fa <__libc_init_array+0x1e>
 8001614:	0800163c 	.word	0x0800163c
 8001618:	0800163c 	.word	0x0800163c
 800161c:	0800163c 	.word	0x0800163c
 8001620:	08001640 	.word	0x08001640

08001624 <_init>:
 8001624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001626:	bf00      	nop
 8001628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800162a:	bc08      	pop	{r3}
 800162c:	469e      	mov	lr, r3
 800162e:	4770      	bx	lr

08001630 <_fini>:
 8001630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001632:	bf00      	nop
 8001634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001636:	bc08      	pop	{r3}
 8001638:	469e      	mov	lr, r3
 800163a:	4770      	bx	lr
