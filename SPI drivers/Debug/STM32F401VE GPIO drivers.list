
STM32F401VE GPIO drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b44  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cd8  08000ce0  00001ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cd8  08000cd8  00001ce0  2**0
                  CONTENTS
  4 .ARM          00000000  08000cd8  08000cd8  00001ce0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cd8  08000ce0  00001ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cd8  08000cd8  00001cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000cdc  08000cdc  00001cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000ce0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000ce0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d8e  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005b2  00000000  00000000  00003a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000208  00000000  00000000  00004050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000177  00000000  00000000  00004258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000031b  00000000  00000000  000043cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001904  00000000  00000000  000046ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050d5e  00000000  00000000  00005fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00056d4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000810  00000000  00000000  00056d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000575a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000cc0 	.word	0x08000cc0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000cc0 	.word	0x08000cc0

080001d4 <SPI1_IRQHandler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SPI1_IRQHandler(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	 uint16_t rx_data = spi_dr_read(SPI1);
 80001da:	4809      	ldr	r0, [pc, #36]	@ (8000200 <SPI1_IRQHandler+0x2c>)
 80001dc:	f000 fcf2 	bl	8000bc4 <spi_dr_read>
 80001e0:	4603      	mov	r3, r0
 80001e2:	80fb      	strh	r3, [r7, #6]

		    if(rx_data == 0x55)
 80001e4:	88fb      	ldrh	r3, [r7, #6]
 80001e6:	2b55      	cmp	r3, #85	@ 0x55
 80001e8:	d103      	bne.n	80001f2 <SPI1_IRQHandler+0x1e>
		    {
		  	  GPIOD->ODR = 0x4;
 80001ea:	4b06      	ldr	r3, [pc, #24]	@ (8000204 <SPI1_IRQHandler+0x30>)
 80001ec:	2204      	movs	r2, #4
 80001ee:	615a      	str	r2, [r3, #20]
		    }
		    else
		    {
		    	 GPIOD->ODR = 0x1;
		    }
}
 80001f0:	e002      	b.n	80001f8 <SPI1_IRQHandler+0x24>
		    	 GPIOD->ODR = 0x1;
 80001f2:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <SPI1_IRQHandler+0x30>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	615a      	str	r2, [r3, #20]
}
 80001f8:	bf00      	nop
 80001fa:	3708      	adds	r7, #8
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	40013000 	.word	0x40013000
 8000204:	40020c00 	.word	0x40020c00

08000208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b090      	sub	sp, #64	@ 0x40
 800020c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f901 	bl	8000414 <SystemClock_Config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int mstr = 1;
 8000212:	2301      	movs	r3, #1
 8000214:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if(mstr)
 8000216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000218:	2b00      	cmp	r3, #0
 800021a:	d071      	beq.n	8000300 <main+0xf8>
  {

	  	RCC->AHB1ENR = RCC->AHB1ENR | 0x1;
 800021c:	4b79      	ldr	r3, [pc, #484]	@ (8000404 <main+0x1fc>)
 800021e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000220:	4a78      	ldr	r2, [pc, #480]	@ (8000404 <main+0x1fc>)
 8000222:	f043 0301 	orr.w	r3, r3, #1
 8000226:	6313      	str	r3, [r2, #48]	@ 0x30
	    RCC->AHB1ENR = RCC->AHB1ENR | 0x8;
 8000228:	4b76      	ldr	r3, [pc, #472]	@ (8000404 <main+0x1fc>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800022c:	4a75      	ldr	r2, [pc, #468]	@ (8000404 <main+0x1fc>)
 800022e:	f043 0308 	orr.w	r3, r3, #8
 8000232:	6313      	str	r3, [r2, #48]	@ 0x30

	    GPIOA->MODER = 0x00000000;
 8000234:	4b74      	ldr	r3, [pc, #464]	@ (8000408 <main+0x200>)
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER = GPIOA->MODER | 0xAA00;
 800023a:	4b73      	ldr	r3, [pc, #460]	@ (8000408 <main+0x200>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a72      	ldr	r2, [pc, #456]	@ (8000408 <main+0x200>)
 8000240:	f443 432a 	orr.w	r3, r3, #43520	@ 0xaa00
 8000244:	6013      	str	r3, [r2, #0]
	    GPIOA->AFR[0] = GPIOA->AFR[0] | 0x55550000;
 8000246:	4b70      	ldr	r3, [pc, #448]	@ (8000408 <main+0x200>)
 8000248:	6a1b      	ldr	r3, [r3, #32]
 800024a:	4a6f      	ldr	r2, [pc, #444]	@ (8000408 <main+0x200>)
 800024c:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000250:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 8000254:	6213      	str	r3, [r2, #32]

	    GPIOD->MODER = GPIOD->MODER | 0x0055;
 8000256:	4b6d      	ldr	r3, [pc, #436]	@ (800040c <main+0x204>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a6c      	ldr	r2, [pc, #432]	@ (800040c <main+0x204>)
 800025c:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8000260:	6013      	str	r3, [r2, #0]
	    GPIOD->ODR = 0x1;
 8000262:	4b6a      	ldr	r3, [pc, #424]	@ (800040c <main+0x204>)
 8000264:	2201      	movs	r2, #1
 8000266:	615a      	str	r2, [r3, #20]

	    spi_enable_interrupt(SPI1_IRQn);
 8000268:	2023      	movs	r0, #35	@ 0x23
 800026a:	f000 fcf7 	bl	8000c5c <spi_enable_interrupt>
	    spi_type spi1;
	    spi1.spi = SPI1;
 800026e:	4b68      	ldr	r3, [pc, #416]	@ (8000410 <main+0x208>)
 8000270:	607b      	str	r3, [r7, #4]
		spi1.type = SPI1_TYPE;
 8000272:	2300      	movs	r3, #0
 8000274:	60bb      	str	r3, [r7, #8]
		spi1.bidimode = SPI_BIDIMODE_UNI;
 8000276:	2300      	movs	r3, #0
 8000278:	81bb      	strh	r3, [r7, #12]
		spi1.bidioe = SPI_BIDIOE_DISABLED;
 800027a:	2300      	movs	r3, #0
 800027c:	81fb      	strh	r3, [r7, #14]
		spi1.crcen = SPI_CRCEN_DISABLED;
 800027e:	2300      	movs	r3, #0
 8000280:	823b      	strh	r3, [r7, #16]
		spi1.crcnext = SPI_CRCNEXT_NO_PHASE;
 8000282:	2300      	movs	r3, #0
 8000284:	827b      	strh	r3, [r7, #18]
		spi1.dff = SPI_DFF_8_BIT;
 8000286:	2300      	movs	r3, #0
 8000288:	82bb      	strh	r3, [r7, #20]
		spi1.rxonly = SPI_RXONLY_FULL_DUPLEX;
 800028a:	2300      	movs	r3, #0
 800028c:	82fb      	strh	r3, [r7, #22]
		spi1.ssm = SPI_SSM_DISABLED;
 800028e:	2300      	movs	r3, #0
 8000290:	833b      	strh	r3, [r7, #24]
		spi1.ssi = SPI_SSI_SELECT;
 8000292:	2300      	movs	r3, #0
 8000294:	837b      	strh	r3, [r7, #26]
		spi1.lsbfirst = SPI_LSBFIRST_MSB;
 8000296:	2300      	movs	r3, #0
 8000298:	83bb      	strh	r3, [r7, #28]
		spi1.spe = SPI_SPE_ENABLE;
 800029a:	2301      	movs	r3, #1
 800029c:	83fb      	strh	r3, [r7, #30]
		spi1.br = SPI_BR_64;
 800029e:	f240 1301 	movw	r3, #257	@ 0x101
 80002a2:	843b      	strh	r3, [r7, #32]
		spi1.mstr = SPI_MSTR_MASTER;
 80002a4:	2301      	movs	r3, #1
 80002a6:	847b      	strh	r3, [r7, #34]	@ 0x22
		spi1.cpol = SPI_CPOL_1;
 80002a8:	2301      	movs	r3, #1
 80002aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		spi1.cpha = SPI_CPHA_SECOND;
 80002ac:	2301      	movs	r3, #1
 80002ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
		spi1.txeie = SPI_TXEIE_MASKED;
 80002b0:	2300      	movs	r3, #0
 80002b2:	853b      	strh	r3, [r7, #40]	@ 0x28
		spi1.rxneie = SPI_RXNEIE_NOT_MASKED;
 80002b4:	2301      	movs	r3, #1
 80002b6:	857b      	strh	r3, [r7, #42]	@ 0x2a
		spi1.errie = SPI_ERRIE_MASKED;
 80002b8:	2300      	movs	r3, #0
 80002ba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		spi1.frf = SPI_FRF_MOTOROLA;
 80002bc:	2300      	movs	r3, #0
 80002be:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		spi1.ssoe = SPI_SSOE_ENABLED;
 80002c0:	2301      	movs	r3, #1
 80002c2:	863b      	strh	r3, [r7, #48]	@ 0x30
		spi1.txdmaen = SPI_TXDMAEN_DISABLED;
 80002c4:	2300      	movs	r3, #0
 80002c6:	867b      	strh	r3, [r7, #50]	@ 0x32
		spi1.rxdmaen = SPI_RXDMAEN_DISABLED;
 80002c8:	2300      	movs	r3, #0
 80002ca:	86bb      	strh	r3, [r7, #52]	@ 0x34
		spi_configure(&spi1);
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 f9be 	bl	8000650 <spi_configure>

		spi_master_transmit(spi1.spi, 0xAA);
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	21aa      	movs	r1, #170	@ 0xaa
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fca9 	bl	8000c30 <spi_master_transmit>

	    GPIOD->ODR = 0x2;
 80002de:	4b4b      	ldr	r3, [pc, #300]	@ (800040c <main+0x204>)
 80002e0:	2202      	movs	r2, #2
 80002e2:	615a      	str	r2, [r3, #20]
	    else
	    {
	    	 GPIOD->ODR = 0x1;
	    }*/

	    while(spi_sr_check_bsy(spi1.spi) == SPI_BSY_BUSY);
 80002e4:	bf00      	nop
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 fc2a 	bl	8000b42 <spi_sr_check_bsy>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d0f8      	beq.n	80002e6 <main+0xde>

	    spi_cr1_configure_spe(spi1.spi, SPI_SPE_DISABLE);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2100      	movs	r1, #0
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 faf8 	bl	80008ee <spi_cr1_configure_spe>
 80002fe:	e07e      	b.n	80003fe <main+0x1f6>

  }
  else
  {
	  	RCC->AHB1ENR = RCC->AHB1ENR | 0x1;
 8000300:	4b40      	ldr	r3, [pc, #256]	@ (8000404 <main+0x1fc>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000304:	4a3f      	ldr	r2, [pc, #252]	@ (8000404 <main+0x1fc>)
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6313      	str	r3, [r2, #48]	@ 0x30
	    RCC->AHB1ENR = RCC->AHB1ENR | 0x8;
 800030c:	4b3d      	ldr	r3, [pc, #244]	@ (8000404 <main+0x1fc>)
 800030e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000310:	4a3c      	ldr	r2, [pc, #240]	@ (8000404 <main+0x1fc>)
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	6313      	str	r3, [r2, #48]	@ 0x30

	    GPIOA->MODER = 0x00000000;
 8000318:	4b3b      	ldr	r3, [pc, #236]	@ (8000408 <main+0x200>)
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER = GPIOA->MODER | 0xAA00;
 800031e:	4b3a      	ldr	r3, [pc, #232]	@ (8000408 <main+0x200>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a39      	ldr	r2, [pc, #228]	@ (8000408 <main+0x200>)
 8000324:	f443 432a 	orr.w	r3, r3, #43520	@ 0xaa00
 8000328:	6013      	str	r3, [r2, #0]
	    GPIOA->AFR[0] = GPIOA->AFR[0] | 0x55550000;
 800032a:	4b37      	ldr	r3, [pc, #220]	@ (8000408 <main+0x200>)
 800032c:	6a1b      	ldr	r3, [r3, #32]
 800032e:	4a36      	ldr	r2, [pc, #216]	@ (8000408 <main+0x200>)
 8000330:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000334:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 8000338:	6213      	str	r3, [r2, #32]

	    GPIOD->MODER = GPIOD->MODER | 0x0055;
 800033a:	4b34      	ldr	r3, [pc, #208]	@ (800040c <main+0x204>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a33      	ldr	r2, [pc, #204]	@ (800040c <main+0x204>)
 8000340:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8000344:	6013      	str	r3, [r2, #0]
	    GPIOD->ODR = 0x1;
 8000346:	4b31      	ldr	r3, [pc, #196]	@ (800040c <main+0x204>)
 8000348:	2201      	movs	r2, #1
 800034a:	615a      	str	r2, [r3, #20]

	    spi_type spi1;
	    spi1.spi = SPI1;
 800034c:	4b30      	ldr	r3, [pc, #192]	@ (8000410 <main+0x208>)
 800034e:	607b      	str	r3, [r7, #4]
	    spi1.type = SPI1_TYPE;
 8000350:	2300      	movs	r3, #0
 8000352:	60bb      	str	r3, [r7, #8]
	    spi1.bidimode = SPI_BIDIMODE_UNI;
 8000354:	2300      	movs	r3, #0
 8000356:	81bb      	strh	r3, [r7, #12]
	    spi1.bidioe = SPI_BIDIOE_DISABLED;
 8000358:	2300      	movs	r3, #0
 800035a:	81fb      	strh	r3, [r7, #14]
	    spi1.crcen = SPI_CRCEN_DISABLED;
 800035c:	2300      	movs	r3, #0
 800035e:	823b      	strh	r3, [r7, #16]
	    spi1.crcnext = SPI_CRCNEXT_NO_PHASE;
 8000360:	2300      	movs	r3, #0
 8000362:	827b      	strh	r3, [r7, #18]
	    spi1.dff = SPI_DFF_8_BIT;
 8000364:	2300      	movs	r3, #0
 8000366:	82bb      	strh	r3, [r7, #20]
	    spi1.rxonly = SPI_RXONLY_FULL_DUPLEX;
 8000368:	2300      	movs	r3, #0
 800036a:	82fb      	strh	r3, [r7, #22]
	    spi1.ssm = SPI_SSM_DISABLED;
 800036c:	2300      	movs	r3, #0
 800036e:	833b      	strh	r3, [r7, #24]
	    spi1.ssi = SPI_SSI_SELECT;
 8000370:	2300      	movs	r3, #0
 8000372:	837b      	strh	r3, [r7, #26]
	    spi1.lsbfirst = SPI_LSBFIRST_MSB;
 8000374:	2300      	movs	r3, #0
 8000376:	83bb      	strh	r3, [r7, #28]
	    spi1.spe = SPI_SPE_ENABLE;
 8000378:	2301      	movs	r3, #1
 800037a:	83fb      	strh	r3, [r7, #30]
	    spi1.br = SPI_BR_64;
 800037c:	f240 1301 	movw	r3, #257	@ 0x101
 8000380:	843b      	strh	r3, [r7, #32]
	    spi1.mstr = SPI_MSTR_SLAVE;
 8000382:	2300      	movs	r3, #0
 8000384:	847b      	strh	r3, [r7, #34]	@ 0x22
	    spi1.cpol = SPI_CPOL_1;
 8000386:	2301      	movs	r3, #1
 8000388:	84bb      	strh	r3, [r7, #36]	@ 0x24
	    spi1.cpha = SPI_CPHA_SECOND;
 800038a:	2301      	movs	r3, #1
 800038c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    spi1.txeie = SPI_TXEIE_MASKED;
 800038e:	2300      	movs	r3, #0
 8000390:	853b      	strh	r3, [r7, #40]	@ 0x28
	    spi1.rxneie = SPI_RXNEIE_MASKED;
 8000392:	2300      	movs	r3, #0
 8000394:	857b      	strh	r3, [r7, #42]	@ 0x2a
	    spi1.errie = SPI_ERRIE_MASKED;
 8000396:	2300      	movs	r3, #0
 8000398:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	    spi1.frf = SPI_FRF_MOTOROLA;
 800039a:	2300      	movs	r3, #0
 800039c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	    spi1.ssoe = SPI_SSOE_ENABLED;
 800039e:	2301      	movs	r3, #1
 80003a0:	863b      	strh	r3, [r7, #48]	@ 0x30
	    spi1.txdmaen = SPI_TXDMAEN_DISABLED;
 80003a2:	2300      	movs	r3, #0
 80003a4:	867b      	strh	r3, [r7, #50]	@ 0x32
	    spi1.rxdmaen = SPI_RXDMAEN_DISABLED;
 80003a6:	2300      	movs	r3, #0
 80003a8:	86bb      	strh	r3, [r7, #52]	@ 0x34
	    spi_configure(&spi1);
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 f94f 	bl	8000650 <spi_configure>

	    spi_slave_transmit(spi1.spi, 0x55);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2155      	movs	r1, #85	@ 0x55
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 fc11 	bl	8000bde <spi_slave_transmit>
	    GPIOD->ODR = 0x2;
 80003bc:	4b13      	ldr	r3, [pc, #76]	@ (800040c <main+0x204>)
 80003be:	2202      	movs	r2, #2
 80003c0:	615a      	str	r2, [r3, #20]

	    uint16_t rx_data = spi_slave_receive(spi1.spi);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 fc20 	bl	8000c0a <spi_slave_receive>
 80003ca:	4603      	mov	r3, r0
 80003cc:	877b      	strh	r3, [r7, #58]	@ 0x3a

	    if(rx_data == 0xAA)
 80003ce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80003d0:	2baa      	cmp	r3, #170	@ 0xaa
 80003d2:	d103      	bne.n	80003dc <main+0x1d4>
	    {
	    	GPIOD->ODR = 0x4;
 80003d4:	4b0d      	ldr	r3, [pc, #52]	@ (800040c <main+0x204>)
 80003d6:	2204      	movs	r2, #4
 80003d8:	615a      	str	r2, [r3, #20]
 80003da:	e002      	b.n	80003e2 <main+0x1da>
	    }
	    else
	    {
	       GPIOD->ODR = 0x1;
 80003dc:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <main+0x204>)
 80003de:	2201      	movs	r2, #1
 80003e0:	615a      	str	r2, [r3, #20]
	    }

	    while(spi_sr_check_bsy(spi1.spi) == SPI_BSY_BUSY);
 80003e2:	bf00      	nop
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 fbab 	bl	8000b42 <spi_sr_check_bsy>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d0f8      	beq.n	80003e4 <main+0x1dc>

	    spi_cr1_configure_spe(spi1.spi, SPI_SPE_DISABLE);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 fa79 	bl	80008ee <spi_cr1_configure_spe>
  }



  while (1)
 80003fc:	bf00      	nop
 80003fe:	bf00      	nop
 8000400:	e7fd      	b.n	80003fe <main+0x1f6>
 8000402:	bf00      	nop
 8000404:	40023800 	.word	0x40023800
 8000408:	40020000 	.word	0x40020000
 800040c:	40020c00 	.word	0x40020c00
 8000410:	40013000 	.word	0x40013000

08000414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }*/
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
	...

08000424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000428:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <SystemInit+0x20>)
 800042a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800042e:	4a05      	ldr	r2, [pc, #20]	@ (8000444 <SystemInit+0x20>)
 8000430:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000434:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	e000ed00 	.word	0xe000ed00

08000448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000448:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000480 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800044c:	f7ff ffea 	bl	8000424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000450:	480c      	ldr	r0, [pc, #48]	@ (8000484 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000452:	490d      	ldr	r1, [pc, #52]	@ (8000488 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000454:	4a0d      	ldr	r2, [pc, #52]	@ (800048c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000458:	e002      	b.n	8000460 <LoopCopyDataInit>

0800045a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800045c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045e:	3304      	adds	r3, #4

08000460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000464:	d3f9      	bcc.n	800045a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000466:	4a0a      	ldr	r2, [pc, #40]	@ (8000490 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000468:	4c0a      	ldr	r4, [pc, #40]	@ (8000494 <LoopFillZerobss+0x22>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800046c:	e001      	b.n	8000472 <LoopFillZerobss>

0800046e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000470:	3204      	adds	r2, #4

08000472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000474:	d3fb      	bcc.n	800046e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000476:	f000 fbff 	bl	8000c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800047a:	f7ff fec5 	bl	8000208 <main>
  bx  lr    
 800047e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000480:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000488:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800048c:	08000ce0 	.word	0x08000ce0
  ldr r2, =_sbss
 8000490:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000494:	2000001c 	.word	0x2000001c

08000498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000498:	e7fe      	b.n	8000498 <ADC_IRQHandler>
	...

0800049c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	db0b      	blt.n	80004c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	f003 021f 	and.w	r2, r3, #31
 80004b4:	4907      	ldr	r1, [pc, #28]	@ (80004d4 <__NVIC_EnableIRQ+0x38>)
 80004b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ba:	095b      	lsrs	r3, r3, #5
 80004bc:	2001      	movs	r0, #1
 80004be:	fa00 f202 	lsl.w	r2, r0, r2
 80004c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	e000e100 	.word	0xe000e100

080004d8 <spi_choose_type>:
 */

#include <STM32F401VE_SPI_driver.h>

void spi_choose_type(uint32_t spi)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	switch(spi)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2b03      	cmp	r3, #3
 80004e4:	d826      	bhi.n	8000534 <spi_choose_type+0x5c>
 80004e6:	a201      	add	r2, pc, #4	@ (adr r2, 80004ec <spi_choose_type+0x14>)
 80004e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ec:	080004fd 	.word	0x080004fd
 80004f0:	0800050b 	.word	0x0800050b
 80004f4:	08000519 	.word	0x08000519
 80004f8:	08000527 	.word	0x08000527
	{
	case SPI1_TYPE:
	{
		RCC->APB2ENR = RCC->APB2ENR | SPI1EN;
 80004fc:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <spi_choose_type+0x68>)
 80004fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000500:	4a0f      	ldr	r2, [pc, #60]	@ (8000540 <spi_choose_type+0x68>)
 8000502:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000506:	6453      	str	r3, [r2, #68]	@ 0x44
	}break;
 8000508:	e014      	b.n	8000534 <spi_choose_type+0x5c>
	case SPI2_TYPE:
	{
		RCC->APB1ENR = RCC->APB1ENR | SPI2EN;
 800050a:	4b0d      	ldr	r3, [pc, #52]	@ (8000540 <spi_choose_type+0x68>)
 800050c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800050e:	4a0c      	ldr	r2, [pc, #48]	@ (8000540 <spi_choose_type+0x68>)
 8000510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000514:	6413      	str	r3, [r2, #64]	@ 0x40
	}break;
 8000516:	e00d      	b.n	8000534 <spi_choose_type+0x5c>
	case SPI3_TYPE:
	{
		RCC->APB1ENR = RCC->APB1ENR | SPI3EN;
 8000518:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <spi_choose_type+0x68>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800051c:	4a08      	ldr	r2, [pc, #32]	@ (8000540 <spi_choose_type+0x68>)
 800051e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000522:	6413      	str	r3, [r2, #64]	@ 0x40
	}break;
 8000524:	e006      	b.n	8000534 <spi_choose_type+0x5c>
	case SPI4_TYPE:
	{
		RCC->APB2ENR = RCC->APB2ENR | SPI4EN;
 8000526:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <spi_choose_type+0x68>)
 8000528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800052a:	4a05      	ldr	r2, [pc, #20]	@ (8000540 <spi_choose_type+0x68>)
 800052c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000530:	6453      	str	r3, [r2, #68]	@ 0x44
	}break;
 8000532:	bf00      	nop
	}
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	40023800 	.word	0x40023800

08000544 <spi_configure_cr1>:

void spi_configure_cr1(SPI_TypeDef* type, uint16_t bidimode, uint16_t bidioe, uint16_t crcen, uint16_t crcnext, uint16_t dff, uint16_t rxonly, uint16_t ssm, uint16_t ssi, uint16_t lsbfirst, uint16_t br, uint16_t mstr, uint16_t cpol, uint16_t cpha)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	4608      	mov	r0, r1
 800054e:	4611      	mov	r1, r2
 8000550:	461a      	mov	r2, r3
 8000552:	4603      	mov	r3, r0
 8000554:	817b      	strh	r3, [r7, #10]
 8000556:	460b      	mov	r3, r1
 8000558:	813b      	strh	r3, [r7, #8]
 800055a:	4613      	mov	r3, r2
 800055c:	80fb      	strh	r3, [r7, #6]
	spi_cr1_configure_bidimode(type, bidimode);
 800055e:	897b      	ldrh	r3, [r7, #10]
 8000560:	4619      	mov	r1, r3
 8000562:	68f8      	ldr	r0, [r7, #12]
 8000564:	f000 f8e2 	bl	800072c <spi_cr1_configure_bidimode>
	spi_cr1_configure_bidioe(type, bidioe);
 8000568:	893b      	ldrh	r3, [r7, #8]
 800056a:	4619      	mov	r1, r3
 800056c:	68f8      	ldr	r0, [r7, #12]
 800056e:	f000 f8f6 	bl	800075e <spi_cr1_configure_bidioe>
	spi_cr1_configure_crcen(type, crcen);
 8000572:	88fb      	ldrh	r3, [r7, #6]
 8000574:	4619      	mov	r1, r3
 8000576:	68f8      	ldr	r0, [r7, #12]
 8000578:	f000 f90a 	bl	8000790 <spi_cr1_configure_crcen>
	spi_cr1_configure_crcnext(type, crcnext);
 800057c:	8b3b      	ldrh	r3, [r7, #24]
 800057e:	4619      	mov	r1, r3
 8000580:	68f8      	ldr	r0, [r7, #12]
 8000582:	f000 f91e 	bl	80007c2 <spi_cr1_configure_crcnext>
	spi_cr1_configure_dff(type, dff);
 8000586:	8bbb      	ldrh	r3, [r7, #28]
 8000588:	4619      	mov	r1, r3
 800058a:	68f8      	ldr	r0, [r7, #12]
 800058c:	f000 f932 	bl	80007f4 <spi_cr1_configure_dff>
	spi_cr1_configure_rxonly(type, rxonly);
 8000590:	8c3b      	ldrh	r3, [r7, #32]
 8000592:	4619      	mov	r1, r3
 8000594:	68f8      	ldr	r0, [r7, #12]
 8000596:	f000 f946 	bl	8000826 <spi_cr1_configure_rxonly>
	spi_cr1_configure_ssm(type, ssm);
 800059a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800059c:	4619      	mov	r1, r3
 800059e:	68f8      	ldr	r0, [r7, #12]
 80005a0:	f000 f95a 	bl	8000858 <spi_cr1_configure_ssm>
	spi_cr1_configure_ssi(type, ssi);
 80005a4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80005a6:	4619      	mov	r1, r3
 80005a8:	68f8      	ldr	r0, [r7, #12]
 80005aa:	f000 f96e 	bl	800088a <spi_cr1_configure_ssi>
	spi_cr1_configure_lsbfirst(type, lsbfirst);
 80005ae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80005b0:	4619      	mov	r1, r3
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	f000 f982 	bl	80008bc <spi_cr1_configure_lsbfirst>
	spi_cr1_configure_br(type, br);
 80005b8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80005ba:	4619      	mov	r1, r3
 80005bc:	68f8      	ldr	r0, [r7, #12]
 80005be:	f000 f9af 	bl	8000920 <spi_cr1_configure_br>
	spi_cr1_configure_mstr(type, mstr);
 80005c2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80005c4:	4619      	mov	r1, r3
 80005c6:	68f8      	ldr	r0, [r7, #12]
 80005c8:	f000 f9c3 	bl	8000952 <spi_cr1_configure_mstr>
	spi_cr1_configure_cpol(type, cpol);
 80005cc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80005ce:	4619      	mov	r1, r3
 80005d0:	68f8      	ldr	r0, [r7, #12]
 80005d2:	f000 f9d7 	bl	8000984 <spi_cr1_configure_cpol>
	spi_cr1_configure_cpha(type, cpha);
 80005d6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80005d8:	4619      	mov	r1, r3
 80005da:	68f8      	ldr	r0, [r7, #12]
 80005dc:	f000 f9eb 	bl	80009b6 <spi_cr1_configure_cpha>
}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <spi_configure_cr2>:

void spi_configure_cr2(SPI_TypeDef* type, uint16_t txeie, uint16_t rxneie, uint16_t errie, uint16_t frf, uint16_t ssoe, uint16_t txdmaen, uint16_t rxdmaen)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	4608      	mov	r0, r1
 80005f2:	4611      	mov	r1, r2
 80005f4:	461a      	mov	r2, r3
 80005f6:	4603      	mov	r3, r0
 80005f8:	817b      	strh	r3, [r7, #10]
 80005fa:	460b      	mov	r3, r1
 80005fc:	813b      	strh	r3, [r7, #8]
 80005fe:	4613      	mov	r3, r2
 8000600:	80fb      	strh	r3, [r7, #6]
	spi_cr2_configure_txeie(type, txeie);
 8000602:	897b      	ldrh	r3, [r7, #10]
 8000604:	4619      	mov	r1, r3
 8000606:	68f8      	ldr	r0, [r7, #12]
 8000608:	f000 f9ed 	bl	80009e6 <spi_cr2_configure_txeie>
	spi_cr2_configure_rxneie(type, rxneie);
 800060c:	893b      	ldrh	r3, [r7, #8]
 800060e:	4619      	mov	r1, r3
 8000610:	68f8      	ldr	r0, [r7, #12]
 8000612:	f000 fa01 	bl	8000a18 <spi_cr2_configure_rxneie>
	spi_cr2_configure_errie(type, errie);
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	4619      	mov	r1, r3
 800061a:	68f8      	ldr	r0, [r7, #12]
 800061c:	f000 fa15 	bl	8000a4a <spi_cr2_configure_errie>
	spi_cr2_configure_frf(type, frf);
 8000620:	8b3b      	ldrh	r3, [r7, #24]
 8000622:	4619      	mov	r1, r3
 8000624:	68f8      	ldr	r0, [r7, #12]
 8000626:	f000 fa29 	bl	8000a7c <spi_cr2_configure_frf>
	spi_cr2_configure_ssoe(type, ssoe);
 800062a:	8bbb      	ldrh	r3, [r7, #28]
 800062c:	4619      	mov	r1, r3
 800062e:	68f8      	ldr	r0, [r7, #12]
 8000630:	f000 fa3d 	bl	8000aae <spi_cr2_configure_ssoe>
	spi_cr2_configure_txdmaen(type, txdmaen);
 8000634:	8c3b      	ldrh	r3, [r7, #32]
 8000636:	4619      	mov	r1, r3
 8000638:	68f8      	ldr	r0, [r7, #12]
 800063a:	f000 fa51 	bl	8000ae0 <spi_cr2_configure_txdmaen>
	spi_cr2_configure_rxdmaen(type, rxdmaen);
 800063e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000640:	4619      	mov	r1, r3
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	f000 fa65 	bl	8000b12 <spi_cr2_configure_rxdmaen>
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <spi_configure>:

void spi_configure(spi_type* spi)
{
 8000650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000654:	b091      	sub	sp, #68	@ 0x44
 8000656:	af0a      	add	r7, sp, #40	@ 0x28
 8000658:	6178      	str	r0, [r7, #20]
	spi_choose_type(spi->type);
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff3a 	bl	80004d8 <spi_choose_type>
	spi_cr1_configure_spe(spi->spi, 0x0);
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f000 f93f 	bl	80008ee <spi_cr1_configure_spe>
	spi_configure_cr1(spi->spi, spi->bidimode, spi->bidioe, spi->crcen, spi->crcnext, spi->dff, spi->rxonly, spi->ssm, spi->ssi, spi->lsbfirst, spi->br, spi->mstr, spi->cpol, spi->cpha);
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	89da      	ldrh	r2, [r3, #14]
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	8a19      	ldrh	r1, [r3, #16]
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	8a58      	ldrh	r0, [r3, #18]
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	8a9c      	ldrh	r4, [r3, #20]
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	8add      	ldrh	r5, [r3, #22]
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	8b1e      	ldrh	r6, [r3, #24]
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	8b9b      	ldrh	r3, [r3, #28]
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	8bdb      	ldrh	r3, [r3, #30]
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	f8b3 9020 	ldrh.w	r9, [r3, #32]
 80006b2:	464b      	mov	r3, r9
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80006ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	9308      	str	r3, [sp, #32]
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	9307      	str	r3, [sp, #28]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	9306      	str	r3, [sp, #24]
 80006c8:	9605      	str	r6, [sp, #20]
 80006ca:	9504      	str	r5, [sp, #16]
 80006cc:	9403      	str	r4, [sp, #12]
 80006ce:	9002      	str	r0, [sp, #8]
 80006d0:	9101      	str	r1, [sp, #4]
 80006d2:	9200      	str	r2, [sp, #0]
 80006d4:	4643      	mov	r3, r8
 80006d6:	4672      	mov	r2, lr
 80006d8:	4661      	mov	r1, ip
 80006da:	6938      	ldr	r0, [r7, #16]
 80006dc:	f7ff ff32 	bl	8000544 <spi_configure_cr1>
	spi_configure_cr2(spi->spi, spi->txeie, spi->rxneie, spi->errie, spi->frf, spi->ssoe, spi->txdmaen, spi->rxdmaen);
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	681c      	ldr	r4, [r3, #0]
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	8c9d      	ldrh	r5, [r3, #36]	@ 0x24
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	8cde      	ldrh	r6, [r3, #38]	@ 0x26
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	f8b3 c028 	ldrh.w	ip, [r3, #40]	@ 0x28
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80006f6:	697a      	ldr	r2, [r7, #20]
 80006f8:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 80006fa:	6979      	ldr	r1, [r7, #20]
 80006fc:	8dc9      	ldrh	r1, [r1, #46]	@ 0x2e
 80006fe:	6978      	ldr	r0, [r7, #20]
 8000700:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
 8000702:	9003      	str	r0, [sp, #12]
 8000704:	9102      	str	r1, [sp, #8]
 8000706:	9201      	str	r2, [sp, #4]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	4663      	mov	r3, ip
 800070c:	4632      	mov	r2, r6
 800070e:	4629      	mov	r1, r5
 8000710:	4620      	mov	r0, r4
 8000712:	f7ff ff69 	bl	80005e8 <spi_configure_cr2>
	spi_cr1_configure_spe(spi->spi, 0x1);
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2101      	movs	r1, #1
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f8e6 	bl	80008ee <spi_cr1_configure_spe>
}
 8000722:	bf00      	nop
 8000724:	371c      	adds	r7, #28
 8000726:	46bd      	mov	sp, r7
 8000728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800072c <spi_cr1_configure_bidimode>:


void spi_cr1_configure_bidimode(SPI_TypeDef* type, uint16_t bidimode)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_BIDIMODE);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (bidimode << SPI_BIDIMODE);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	887b      	ldrh	r3, [r7, #2]
 800074a:	03db      	lsls	r3, r3, #15
 800074c:	431a      	orrs	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	601a      	str	r2, [r3, #0]
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <spi_cr1_configure_bidioe>:

void spi_cr1_configure_bidioe(SPI_TypeDef* type, uint16_t bidioe)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
 8000766:	460b      	mov	r3, r1
 8000768:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_BIDIOE);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (bidioe << SPI_BIDIOE);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	887b      	ldrh	r3, [r7, #2]
 800077c:	039b      	lsls	r3, r3, #14
 800077e:	431a      	orrs	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	601a      	str	r2, [r3, #0]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <spi_cr1_configure_crcen>:

void spi_cr1_configure_crcen(SPI_TypeDef* type, uint16_t crcen)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_CRCEN);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (crcen << SPI_CRCEN);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	887b      	ldrh	r3, [r7, #2]
 80007ae:	035b      	lsls	r3, r3, #13
 80007b0:	431a      	orrs	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	601a      	str	r2, [r3, #0]
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <spi_cr1_configure_crcnext>:

void spi_cr1_configure_crcnext(SPI_TypeDef* type, uint16_t crcnext)
{
 80007c2:	b480      	push	{r7}
 80007c4:	b083      	sub	sp, #12
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	460b      	mov	r3, r1
 80007cc:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_CRCNEXT);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (crcnext << SPI_CRCNEXT);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	887b      	ldrh	r3, [r7, #2]
 80007e0:	031b      	lsls	r3, r3, #12
 80007e2:	431a      	orrs	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	601a      	str	r2, [r3, #0]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <spi_cr1_configure_dff>:

void spi_cr1_configure_dff(SPI_TypeDef* type, uint16_t dff)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_DFF);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (dff << SPI_DFF);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	887b      	ldrh	r3, [r7, #2]
 8000812:	02db      	lsls	r3, r3, #11
 8000814:	431a      	orrs	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	601a      	str	r2, [r3, #0]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <spi_cr1_configure_rxonly>:

void spi_cr1_configure_rxonly(SPI_TypeDef* type, uint16_t rxonly)
{
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	460b      	mov	r3, r1
 8000830:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_RXONLY);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (rxonly << SPI_RXONLY);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	887b      	ldrh	r3, [r7, #2]
 8000844:	029b      	lsls	r3, r3, #10
 8000846:	431a      	orrs	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	601a      	str	r2, [r3, #0]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <spi_cr1_configure_ssm>:

void spi_cr1_configure_ssm(SPI_TypeDef* type, uint16_t ssm)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_SSM);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (ssm << SPI_SSM);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	887b      	ldrh	r3, [r7, #2]
 8000876:	025b      	lsls	r3, r3, #9
 8000878:	431a      	orrs	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	601a      	str	r2, [r3, #0]
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <spi_cr1_configure_ssi>:

void spi_cr1_configure_ssi(SPI_TypeDef* type, uint16_t ssi)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	460b      	mov	r3, r1
 8000894:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_SSI);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (ssi << SPI_SSI);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	887b      	ldrh	r3, [r7, #2]
 80008a8:	021b      	lsls	r3, r3, #8
 80008aa:	431a      	orrs	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	601a      	str	r2, [r3, #0]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <spi_cr1_configure_lsbfirst>:

void spi_cr1_configure_lsbfirst(SPI_TypeDef* type, uint16_t lsbfirst)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_LSBFIRST);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (lsbfirst << SPI_LSBFIRST);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	887b      	ldrh	r3, [r7, #2]
 80008da:	01db      	lsls	r3, r3, #7
 80008dc:	431a      	orrs	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	601a      	str	r2, [r3, #0]
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <spi_cr1_configure_spe>:

void spi_cr1_configure_spe(SPI_TypeDef* type, uint16_t spe)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	460b      	mov	r3, r1
 80008f8:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_SPE);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (spe << SPI_SPE);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	887b      	ldrh	r3, [r7, #2]
 800090c:	019b      	lsls	r3, r3, #6
 800090e:	431a      	orrs	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	601a      	str	r2, [r3, #0]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <spi_cr1_configure_br>:

void spi_cr1_configure_br(SPI_TypeDef* type, uint16_t br)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0007 << SPI_BR);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (br << SPI_BR);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	887b      	ldrh	r3, [r7, #2]
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	431a      	orrs	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	601a      	str	r2, [r3, #0]
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <spi_cr1_configure_mstr>:

void spi_cr1_configure_mstr(SPI_TypeDef* type, uint16_t mstr)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	460b      	mov	r3, r1
 800095c:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_MSTR);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f023 0204 	bic.w	r2, r3, #4
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (mstr << SPI_MSTR);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	887b      	ldrh	r3, [r7, #2]
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	431a      	orrs	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	601a      	str	r2, [r3, #0]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <spi_cr1_configure_cpol>:

void spi_cr1_configure_cpol(SPI_TypeDef* type, uint16_t cpol)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_CPOL);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f023 0202 	bic.w	r2, r3, #2
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (cpol << SPI_CPOL);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	887b      	ldrh	r3, [r7, #2]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	431a      	orrs	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	601a      	str	r2, [r3, #0]
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <spi_cr1_configure_cpha>:

void spi_cr1_configure_cpha(SPI_TypeDef* type, uint16_t cpha)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	460b      	mov	r3, r1
 80009c0:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << SPI_CPHA);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f023 0201 	bic.w	r2, r3, #1
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	601a      	str	r2, [r3, #0]
	type->CR1 = type->CR1 | (cpha << SPI_CPHA);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	887b      	ldrh	r3, [r7, #2]
 80009d4:	431a      	orrs	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	601a      	str	r2, [r3, #0]
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <spi_cr2_configure_txeie>:

void spi_cr2_configure_txeie(SPI_TypeDef* type, uint16_t txeie)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	460b      	mov	r3, r1
 80009f0:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_TXEIE);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (txeie << SPI_TXEIE);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	887b      	ldrh	r3, [r7, #2]
 8000a04:	01db      	lsls	r3, r3, #7
 8000a06:	431a      	orrs	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	605a      	str	r2, [r3, #4]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <spi_cr2_configure_rxneie>:

void spi_cr2_configure_rxneie(SPI_TypeDef* type, uint16_t rxneie)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_RXNEIE);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (rxneie << SPI_RXNEIE);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685a      	ldr	r2, [r3, #4]
 8000a34:	887b      	ldrh	r3, [r7, #2]
 8000a36:	019b      	lsls	r3, r3, #6
 8000a38:	431a      	orrs	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	605a      	str	r2, [r3, #4]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <spi_cr2_configure_errie>:

void spi_cr2_configure_errie(SPI_TypeDef* type, uint16_t errie)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_ERRIE);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f023 0220 	bic.w	r2, r3, #32
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (errie << SPI_ERRIE);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685a      	ldr	r2, [r3, #4]
 8000a66:	887b      	ldrh	r3, [r7, #2]
 8000a68:	015b      	lsls	r3, r3, #5
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	605a      	str	r2, [r3, #4]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <spi_cr2_configure_frf>:

void spi_cr2_configure_frf(SPI_TypeDef* type, uint16_t frf)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_FRF);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f023 0210 	bic.w	r2, r3, #16
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (frf << SPI_FRF);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	887b      	ldrh	r3, [r7, #2]
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	605a      	str	r2, [r3, #4]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <spi_cr2_configure_ssoe>:

void spi_cr2_configure_ssoe(SPI_TypeDef* type, uint16_t ssoe)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_SSOE);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f023 0204 	bic.w	r2, r3, #4
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (ssoe << SPI_SSOE);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	431a      	orrs	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	605a      	str	r2, [r3, #4]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <spi_cr2_configure_txdmaen>:

void spi_cr2_configure_txdmaen(SPI_TypeDef* type, uint16_t txdmaen)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_TXDMAEN);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f023 0202 	bic.w	r2, r3, #2
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (txdmaen << SPI_TXDMAEN);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	887b      	ldrh	r3, [r7, #2]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	431a      	orrs	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	605a      	str	r2, [r3, #4]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <spi_cr2_configure_rxdmaen>:

void spi_cr2_configure_rxdmaen(SPI_TypeDef* type, uint16_t rxdmaen)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << SPI_RXDMAEN);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f023 0201 	bic.w	r2, r3, #1
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	605a      	str	r2, [r3, #4]
	type->CR2 = type->CR2 | (rxdmaen << SPI_RXDMAEN);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	685a      	ldr	r2, [r3, #4]
 8000b2e:	887b      	ldrh	r3, [r7, #2]
 8000b30:	431a      	orrs	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	605a      	str	r2, [r3, #4]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <spi_sr_check_bsy>:
{
	return ((type->SR & (0x0001 << SPI_FRE)) >> SPI_FRE);
}

uint16_t spi_sr_check_bsy(SPI_TypeDef* type)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
	return ((type->SR & (0x0001 << SPI_BSY)) >> SPI_BSY);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	09db      	lsrs	r3, r3, #7
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	b29b      	uxth	r3, r3
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <spi_sr_check_txe>:
{
	return ((type->SR & (0x0001 << SPI_CHSIDE)) >> SPI_CHSIDE);
}

uint16_t spi_sr_check_txe(SPI_TypeDef* type)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	return ((type->SR & (0x0001 << SPI_TXE)) >> SPI_TXE);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	085b      	lsrs	r3, r3, #1
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	b29b      	uxth	r3, r3
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <spi_sr_check_rxne>:

uint16_t spi_sr_check_rxne(SPI_TypeDef* type)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
	return ((type->SR & (0x0001 << SPI_RXNE)) >> SPI_RXNE);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	b29b      	uxth	r3, r3
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <spi_dr_write>:


//**************************************SPI TRANSFER FUNCTIONS*****************************************************

void spi_dr_write(SPI_TypeDef* type, uint16_t data)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	807b      	strh	r3, [r7, #2]
	type->DR = data;
 8000bb2:	887a      	ldrh	r2, [r7, #2]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	60da      	str	r2, [r3, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <spi_dr_read>:

uint16_t spi_dr_read(SPI_TypeDef* type)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	return type->DR;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	b29b      	uxth	r3, r3
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <spi_slave_transmit>:

void spi_slave_transmit(SPI_TypeDef* type, uint16_t data)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	460b      	mov	r3, r1
 8000be8:	807b      	strh	r3, [r7, #2]
	while(spi_sr_check_txe(type) == SPI_TXE_NO_EMPTY);
 8000bea:	bf00      	nop
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ffb9 	bl	8000b64 <spi_sr_check_txe>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0f9      	beq.n	8000bec <spi_slave_transmit+0xe>
	spi_dr_write(type, data);
 8000bf8:	887b      	ldrh	r3, [r7, #2]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ffd2 	bl	8000ba6 <spi_dr_write>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <spi_slave_receive>:

uint16_t spi_slave_receive(SPI_TypeDef* type)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
	while(spi_sr_check_rxne(type) == SPI_RXNE_EMPTY);
 8000c12:	bf00      	nop
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ffb6 	bl	8000b86 <spi_sr_check_rxne>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d0f9      	beq.n	8000c14 <spi_slave_receive+0xa>
	return spi_dr_read(type);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ffcf 	bl	8000bc4 <spi_dr_read>
 8000c26:	4603      	mov	r3, r0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <spi_master_transmit>:

void spi_master_transmit(SPI_TypeDef* type, uint16_t data)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
	while(spi_sr_check_txe(type) == SPI_TXE_NO_EMPTY);
 8000c3c:	bf00      	nop
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ff90 	bl	8000b64 <spi_sr_check_txe>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0f9      	beq.n	8000c3e <spi_master_transmit+0xe>
	spi_dr_write(type, data);
 8000c4a:	887b      	ldrh	r3, [r7, #2]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffa9 	bl	8000ba6 <spi_dr_write>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <spi_enable_interrupt>:
}

//********************************************************SPI INTERRUPT HANDLING************************************

void spi_enable_interrupt(IRQn_Type irq)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
	NVIC_EnableIRQ(irq);
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fc16 	bl	800049c <__NVIC_EnableIRQ>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <__libc_init_array>:
 8000c78:	b570      	push	{r4, r5, r6, lr}
 8000c7a:	4d0d      	ldr	r5, [pc, #52]	@ (8000cb0 <__libc_init_array+0x38>)
 8000c7c:	4c0d      	ldr	r4, [pc, #52]	@ (8000cb4 <__libc_init_array+0x3c>)
 8000c7e:	1b64      	subs	r4, r4, r5
 8000c80:	10a4      	asrs	r4, r4, #2
 8000c82:	2600      	movs	r6, #0
 8000c84:	42a6      	cmp	r6, r4
 8000c86:	d109      	bne.n	8000c9c <__libc_init_array+0x24>
 8000c88:	4d0b      	ldr	r5, [pc, #44]	@ (8000cb8 <__libc_init_array+0x40>)
 8000c8a:	4c0c      	ldr	r4, [pc, #48]	@ (8000cbc <__libc_init_array+0x44>)
 8000c8c:	f000 f818 	bl	8000cc0 <_init>
 8000c90:	1b64      	subs	r4, r4, r5
 8000c92:	10a4      	asrs	r4, r4, #2
 8000c94:	2600      	movs	r6, #0
 8000c96:	42a6      	cmp	r6, r4
 8000c98:	d105      	bne.n	8000ca6 <__libc_init_array+0x2e>
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}
 8000c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ca0:	4798      	blx	r3
 8000ca2:	3601      	adds	r6, #1
 8000ca4:	e7ee      	b.n	8000c84 <__libc_init_array+0xc>
 8000ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000caa:	4798      	blx	r3
 8000cac:	3601      	adds	r6, #1
 8000cae:	e7f2      	b.n	8000c96 <__libc_init_array+0x1e>
 8000cb0:	08000cd8 	.word	0x08000cd8
 8000cb4:	08000cd8 	.word	0x08000cd8
 8000cb8:	08000cd8 	.word	0x08000cd8
 8000cbc:	08000cdc 	.word	0x08000cdc

08000cc0 <_init>:
 8000cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc2:	bf00      	nop
 8000cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cc6:	bc08      	pop	{r3}
 8000cc8:	469e      	mov	lr, r3
 8000cca:	4770      	bx	lr

08000ccc <_fini>:
 8000ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cce:	bf00      	nop
 8000cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cd2:	bc08      	pop	{r3}
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	4770      	bx	lr
