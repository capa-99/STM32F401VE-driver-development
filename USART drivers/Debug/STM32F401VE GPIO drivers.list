
STM32F401VE GPIO drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018ac  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001a40  08001a48  00002a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001a40  08001a40  00002a48  2**0
                  CONTENTS
  4 .ARM          00000000  08001a40  08001a40  00002a48  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a40  08001a48  00002a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a40  08001a40  00002a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a44  08001a44  00002a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00002a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08001a48  00003000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08001a48  0000301c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002a48  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f89  00000000  00000000  00002a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008a1  00000000  00000000  00005a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003a0  00000000  00000000  000062a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002a3  00000000  00000000  00006648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e650  00000000  00000000  000068eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002cd7  00000000  00000000  00014f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00052d84  00000000  00000000  00017c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006a996  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000eec  00000000  00000000  0006a9dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0006b8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001a28 	.word	0x08001a28

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08001a28 	.word	0x08001a28

080001d4 <smarthome_initialize>:
 */

#include <USART_smart_home.h>

void smarthome_initialize()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b0a0      	sub	sp, #128	@ 0x80
 80001d8:	af00      	add	r7, sp, #0
	RCC->AHB1ENR = RCC->AHB1ENR | 0x1;
 80001da:	4b8a      	ldr	r3, [pc, #552]	@ (8000404 <smarthome_initialize+0x230>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001de:	4a89      	ldr	r2, [pc, #548]	@ (8000404 <smarthome_initialize+0x230>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6313      	str	r3, [r2, #48]	@ 0x30
	gpio_pin uart;
	uart.mode = GPIO_PIN_MODE_ALT_FUNCTION;
 80001e6:	2302      	movs	r3, #2
 80001e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uart.alternate_function = GPIO_PIN_ALTERNATE_FUNCTION_AF7_USART1_2;
 80001ea:	2307      	movs	r3, #7
 80001ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
	uart.pin = SMARTHOME_USART_TX;
 80001ee:	2309      	movs	r3, #9
 80001f0:	65bb      	str	r3, [r7, #88]	@ 0x58
	gpio_init(GPIOA, &uart);
 80001f2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80001f6:	4619      	mov	r1, r3
 80001f8:	4883      	ldr	r0, [pc, #524]	@ (8000408 <smarthome_initialize+0x234>)
 80001fa:	f000 fb77 	bl	80008ec <gpio_init>
	uart.pin = SMARTHOME_USART_RX;
 80001fe:	230a      	movs	r3, #10
 8000200:	65bb      	str	r3, [r7, #88]	@ 0x58
	gpio_init(GPIOA, &uart);
 8000202:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000206:	4619      	mov	r1, r3
 8000208:	487f      	ldr	r0, [pc, #508]	@ (8000408 <smarthome_initialize+0x234>)
 800020a:	f000 fb6f 	bl	80008ec <gpio_init>

	uart.mode = GPIO_PIN_MODE_OUTPUT;//THIS IS A THERMOSTAT, CONFIGURE IT RIGHT LATER WHEN YOU TEST IT
 800020e:	2301      	movs	r3, #1
 8000210:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uart.alternate_function = GPIO_PIN_ALTERNATE_FUNCTION_AF0_SYSTEM;
 8000212:	2300      	movs	r3, #0
 8000214:	66fb      	str	r3, [r7, #108]	@ 0x6c
	uart.pull = GPIO_PIN_PULL_DOWN;
 8000216:	2302      	movs	r3, #2
 8000218:	66bb      	str	r3, [r7, #104]	@ 0x68
	uart.output_type = GPIO_PIN_OUTPUT_TYPE_PUSH_PULL;
 800021a:	2300      	movs	r3, #0
 800021c:	663b      	str	r3, [r7, #96]	@ 0x60
	uart.output_speed = GPIO_PIN_OUTPUT_SPEED_MEDIUM;
 800021e:	2301      	movs	r3, #1
 8000220:	667b      	str	r3, [r7, #100]	@ 0x64
	for(int i = 0; i < 5; i++)
 8000222:	2300      	movs	r3, #0
 8000224:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000226:	e00a      	b.n	800023e <smarthome_initialize+0x6a>
	{
		uart.pin = i;
 8000228:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800022a:	65bb      	str	r3, [r7, #88]	@ 0x58
		gpio_init(SMARTHOME_THERMOSTAT, &uart);
 800022c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000230:	4619      	mov	r1, r3
 8000232:	4875      	ldr	r0, [pc, #468]	@ (8000408 <smarthome_initialize+0x234>)
 8000234:	f000 fb5a 	bl	80008ec <gpio_init>
	for(int i = 0; i < 5; i++)
 8000238:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800023a:	3301      	adds	r3, #1
 800023c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800023e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000240:	2b04      	cmp	r3, #4
 8000242:	ddf1      	ble.n	8000228 <smarthome_initialize+0x54>
	}

	RCC->AHB1ENR = RCC->AHB1ENR | 0x2;
 8000244:	4b6f      	ldr	r3, [pc, #444]	@ (8000404 <smarthome_initialize+0x230>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000248:	4a6e      	ldr	r2, [pc, #440]	@ (8000404 <smarthome_initialize+0x230>)
 800024a:	f043 0302 	orr.w	r3, r3, #2
 800024e:	6313      	str	r3, [r2, #48]	@ 0x30
	uart.mode = GPIO_PIN_MODE_OUTPUT;
 8000250:	2301      	movs	r3, #1
 8000252:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uart.alternate_function = GPIO_PIN_ALTERNATE_FUNCTION_AF0_SYSTEM;
 8000254:	2300      	movs	r3, #0
 8000256:	66fb      	str	r3, [r7, #108]	@ 0x6c
	uart.pull = GPIO_PIN_PULL_UP;
 8000258:	2301      	movs	r3, #1
 800025a:	66bb      	str	r3, [r7, #104]	@ 0x68
	uart.output_type = GPIO_PIN_OUTPUT_TYPE_PUSH_PULL;
 800025c:	2300      	movs	r3, #0
 800025e:	663b      	str	r3, [r7, #96]	@ 0x60
	uart.output_speed = GPIO_PIN_OUTPUT_SPEED_MEDIUM;
 8000260:	2301      	movs	r3, #1
 8000262:	667b      	str	r3, [r7, #100]	@ 0x64
	for(int i = 0; i < 2; i++)
 8000264:	2300      	movs	r3, #0
 8000266:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000268:	e00a      	b.n	8000280 <smarthome_initialize+0xac>
	{
		uart.pin = i;
 800026a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800026c:	65bb      	str	r3, [r7, #88]	@ 0x58
		gpio_init(SMARTHOME_DOORLOCKS, &uart);
 800026e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000272:	4619      	mov	r1, r3
 8000274:	4865      	ldr	r0, [pc, #404]	@ (800040c <smarthome_initialize+0x238>)
 8000276:	f000 fb39 	bl	80008ec <gpio_init>
	for(int i = 0; i < 2; i++)
 800027a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800027c:	3301      	adds	r3, #1
 800027e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000280:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000282:	2b01      	cmp	r3, #1
 8000284:	ddf1      	ble.n	800026a <smarthome_initialize+0x96>
	}

	RCC->AHB1ENR = RCC->AHB1ENR | 0x4;
 8000286:	4b5f      	ldr	r3, [pc, #380]	@ (8000404 <smarthome_initialize+0x230>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028a:	4a5e      	ldr	r2, [pc, #376]	@ (8000404 <smarthome_initialize+0x230>)
 800028c:	f043 0304 	orr.w	r3, r3, #4
 8000290:	6313      	str	r3, [r2, #48]	@ 0x30
	uart.mode = GPIO_PIN_MODE_INPUT;
 8000292:	2300      	movs	r3, #0
 8000294:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uart.alternate_function = GPIO_PIN_ALTERNATE_FUNCTION_AF0_SYSTEM;
 8000296:	2300      	movs	r3, #0
 8000298:	66fb      	str	r3, [r7, #108]	@ 0x6c
	uart.pull = GPIO_PIN_PULL_DOWN;
 800029a:	2302      	movs	r3, #2
 800029c:	66bb      	str	r3, [r7, #104]	@ 0x68
	uart.pin = SMARTHOME_ALARM_SMOKE;
 800029e:	2300      	movs	r3, #0
 80002a0:	65bb      	str	r3, [r7, #88]	@ 0x58
	gpio_init(SMARTHOME_ALARMS, &uart);
 80002a2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80002a6:	4619      	mov	r1, r3
 80002a8:	4859      	ldr	r0, [pc, #356]	@ (8000410 <smarthome_initialize+0x23c>)
 80002aa:	f000 fb1f 	bl	80008ec <gpio_init>

	RCC->AHB1ENR = RCC->AHB1ENR | 0x8;
 80002ae:	4b55      	ldr	r3, [pc, #340]	@ (8000404 <smarthome_initialize+0x230>)
 80002b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b2:	4a54      	ldr	r2, [pc, #336]	@ (8000404 <smarthome_initialize+0x230>)
 80002b4:	f043 0308 	orr.w	r3, r3, #8
 80002b8:	6313      	str	r3, [r2, #48]	@ 0x30
	uart.mode = GPIO_PIN_MODE_OUTPUT;
 80002ba:	2301      	movs	r3, #1
 80002bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uart.alternate_function = GPIO_PIN_ALTERNATE_FUNCTION_AF0_SYSTEM;
 80002be:	2300      	movs	r3, #0
 80002c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
	uart.pull = GPIO_PIN_PULL_DOWN;
 80002c2:	2302      	movs	r3, #2
 80002c4:	66bb      	str	r3, [r7, #104]	@ 0x68
	uart.output_type = GPIO_PIN_OUTPUT_TYPE_PUSH_PULL;
 80002c6:	2300      	movs	r3, #0
 80002c8:	663b      	str	r3, [r7, #96]	@ 0x60
	uart.output_speed = GPIO_PIN_OUTPUT_SPEED_MEDIUM;
 80002ca:	2301      	movs	r3, #1
 80002cc:	667b      	str	r3, [r7, #100]	@ 0x64
	for(int i = 0; i < 8; i++)
 80002ce:	2300      	movs	r3, #0
 80002d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80002d2:	e00a      	b.n	80002ea <smarthome_initialize+0x116>
	{
		uart.pin = i;
 80002d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80002d6:	65bb      	str	r3, [r7, #88]	@ 0x58
		gpio_init(SMARTHOME_LIGHTS, &uart);
 80002d8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80002dc:	4619      	mov	r1, r3
 80002de:	484d      	ldr	r0, [pc, #308]	@ (8000414 <smarthome_initialize+0x240>)
 80002e0:	f000 fb04 	bl	80008ec <gpio_init>
	for(int i = 0; i < 8; i++)
 80002e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80002e6:	3301      	adds	r3, #1
 80002e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80002ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80002ec:	2b07      	cmp	r3, #7
 80002ee:	ddf1      	ble.n	80002d4 <smarthome_initialize+0x100>
	}

	RCC->AHB1ENR = RCC->AHB1ENR | 0x10;
 80002f0:	4b44      	ldr	r3, [pc, #272]	@ (8000404 <smarthome_initialize+0x230>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f4:	4a43      	ldr	r2, [pc, #268]	@ (8000404 <smarthome_initialize+0x230>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	6313      	str	r3, [r2, #48]	@ 0x30
	uart.mode = GPIO_PIN_MODE_OUTPUT;
 80002fc:	2301      	movs	r3, #1
 80002fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uart.alternate_function = GPIO_PIN_ALTERNATE_FUNCTION_AF0_SYSTEM;
 8000300:	2300      	movs	r3, #0
 8000302:	66fb      	str	r3, [r7, #108]	@ 0x6c
	uart.pull = GPIO_PIN_PULL_DOWN;
 8000304:	2302      	movs	r3, #2
 8000306:	66bb      	str	r3, [r7, #104]	@ 0x68
	uart.output_type = GPIO_PIN_OUTPUT_TYPE_PUSH_PULL;
 8000308:	2300      	movs	r3, #0
 800030a:	663b      	str	r3, [r7, #96]	@ 0x60
	uart.output_speed = GPIO_PIN_OUTPUT_SPEED_MEDIUM;
 800030c:	2301      	movs	r3, #1
 800030e:	667b      	str	r3, [r7, #100]	@ 0x64
	for(int i = 0; i < 10; i++)
 8000310:	2300      	movs	r3, #0
 8000312:	673b      	str	r3, [r7, #112]	@ 0x70
 8000314:	e00a      	b.n	800032c <smarthome_initialize+0x158>
	{
		uart.pin = i;
 8000316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000318:	65bb      	str	r3, [r7, #88]	@ 0x58
		gpio_init(SMARTHOME_SWITCHES, &uart);
 800031a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800031e:	4619      	mov	r1, r3
 8000320:	483d      	ldr	r0, [pc, #244]	@ (8000418 <smarthome_initialize+0x244>)
 8000322:	f000 fae3 	bl	80008ec <gpio_init>
	for(int i = 0; i < 10; i++)
 8000326:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000328:	3301      	adds	r3, #1
 800032a:	673b      	str	r3, [r7, #112]	@ 0x70
 800032c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800032e:	2b09      	cmp	r3, #9
 8000330:	ddf1      	ble.n	8000316 <smarthome_initialize+0x142>
	}

	usart_type usart1;
	usart1.usart = USART1;
 8000332:	4b3a      	ldr	r3, [pc, #232]	@ (800041c <smarthome_initialize+0x248>)
 8000334:	603b      	str	r3, [r7, #0]
	usart1.type = USART1_TYPE;
 8000336:	2300      	movs	r3, #0
 8000338:	607b      	str	r3, [r7, #4]
	usart1.over8 = USART_OVER8_16;
 800033a:	2300      	movs	r3, #0
 800033c:	813b      	strh	r3, [r7, #8]
	usart1.ue = USART_UE_DISABLED;
 800033e:	2300      	movs	r3, #0
 8000340:	817b      	strh	r3, [r7, #10]
	usart1.m = USART_M_8_BITS;
 8000342:	2300      	movs	r3, #0
 8000344:	81bb      	strh	r3, [r7, #12]
	usart1.wake = USART_WAKE_IDLE_LINE;
 8000346:	2300      	movs	r3, #0
 8000348:	81fb      	strh	r3, [r7, #14]
	usart1.pce = USART_PCE_DISABLED;
 800034a:	2300      	movs	r3, #0
 800034c:	823b      	strh	r3, [r7, #16]
	usart1.ps = USART_PS_EVEN;
 800034e:	2300      	movs	r3, #0
 8000350:	827b      	strh	r3, [r7, #18]
	usart1.peie = USART_PEIE_INHIBITED;
 8000352:	2300      	movs	r3, #0
 8000354:	82bb      	strh	r3, [r7, #20]
	usart1.txeie = USART_TXEIE_INHIBITED;
 8000356:	2300      	movs	r3, #0
 8000358:	82fb      	strh	r3, [r7, #22]
	usart1.tcie = USART_TCIE_INHIBITED;
 800035a:	2300      	movs	r3, #0
 800035c:	833b      	strh	r3, [r7, #24]
	usart1.rxneie = USART_RXNEIE_ENABLED;
 800035e:	2301      	movs	r3, #1
 8000360:	837b      	strh	r3, [r7, #26]
    usart1.idleie = USART_IDLEIE_INHIBITED;
 8000362:	2300      	movs	r3, #0
 8000364:	83bb      	strh	r3, [r7, #28]
	usart1.te = USART_TE_ENABLED;
 8000366:	2301      	movs	r3, #1
 8000368:	83fb      	strh	r3, [r7, #30]
	usart1.re = USART_RE_ENABLED;
 800036a:	2301      	movs	r3, #1
 800036c:	843b      	strh	r3, [r7, #32]
	usart1.rwu = USART_RWU_ACTIVE_MODE;
 800036e:	2300      	movs	r3, #0
 8000370:	847b      	strh	r3, [r7, #34]	@ 0x22
	usart1.sbk = USART_SBK_NO_TRANSMIT;
 8000372:	2300      	movs	r3, #0
 8000374:	84bb      	strh	r3, [r7, #36]	@ 0x24
	usart1.linen = USART_LINEN_DISABLED;
 8000376:	2300      	movs	r3, #0
 8000378:	84fb      	strh	r3, [r7, #38]	@ 0x26
	usart1.stop = USART_STOP_1_BIT;
 800037a:	2300      	movs	r3, #0
 800037c:	853b      	strh	r3, [r7, #40]	@ 0x28
	usart1.clken = USART_CLKEN_DISABLED;
 800037e:	2300      	movs	r3, #0
 8000380:	857b      	strh	r3, [r7, #42]	@ 0x2a
	usart1.cpol = USART_CPOL_LOW;
 8000382:	2300      	movs	r3, #0
 8000384:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	usart1.cpha = USART_CPHA_FIRST_EDGE;
 8000386:	2300      	movs	r3, #0
 8000388:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	usart1.lbcl = USART_LBCL_NOT_OUTPUT;
 800038a:	2300      	movs	r3, #0
 800038c:	863b      	strh	r3, [r7, #48]	@ 0x30
	usart1.lbdie = USART_LBDIE_INHIBITED;
 800038e:	2300      	movs	r3, #0
 8000390:	867b      	strh	r3, [r7, #50]	@ 0x32
	usart1.lbdl = USART_LBDL_10_BIT;
 8000392:	2300      	movs	r3, #0
 8000394:	86bb      	strh	r3, [r7, #52]	@ 0x34
	usart1.add = 0x0;
 8000396:	2300      	movs	r3, #0
 8000398:	86fb      	strh	r3, [r7, #54]	@ 0x36
	usart1.onebit = USART_ONEBIT_THREE_SAMPLE;
 800039a:	2300      	movs	r3, #0
 800039c:	873b      	strh	r3, [r7, #56]	@ 0x38
	usart1.ctsie = USART_CTSIE_INHIBITED;
 800039e:	2300      	movs	r3, #0
 80003a0:	877b      	strh	r3, [r7, #58]	@ 0x3a
	usart1.ctse = USART_CTSE_DISABLED;
 80003a2:	2300      	movs	r3, #0
 80003a4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	usart1.rtse = USART_RTSE_DISABLED;
 80003a6:	2300      	movs	r3, #0
 80003a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	usart1.dmat = USART_DMAT_DISABLED;
 80003aa:	2300      	movs	r3, #0
 80003ac:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	usart1.dmar = USART_DMAR_DISABLED;
 80003b0:	2300      	movs	r3, #0
 80003b2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	usart1.scen = USART_SCEN_DISABLED;
 80003b6:	2300      	movs	r3, #0
 80003b8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	usart1.nack = USART_NACK_DISABLED;
 80003bc:	2300      	movs	r3, #0
 80003be:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	usart1.hdsel = USART_HDSEL_NOT_SELECTED;
 80003c2:	2300      	movs	r3, #0
 80003c4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	usart1.irlp = USART_IRLP_NORMAL_MODE;
 80003c8:	2300      	movs	r3, #0
 80003ca:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	usart1.iren = USART_IREN_DISABLED;
 80003ce:	2300      	movs	r3, #0
 80003d0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	usart1.eie = USART_EIE_INHIBITED;
 80003d4:	2300      	movs	r3, #0
 80003d6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	usart1.div_mantissa = 0x68;
 80003da:	2368      	movs	r3, #104	@ 0x68
 80003dc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	usart1.div_fraction = 0x3;
 80003e0:	2303      	movs	r3, #3
 80003e2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
	usart1.gt = 0x00;
 80003e6:	2300      	movs	r3, #0
 80003e8:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
	usart1.psc = 0x00;
 80003ec:	2300      	movs	r3, #0
 80003ee:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	usart_configure(&usart1);
 80003f2:	463b      	mov	r3, r7
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 fdcc 	bl	8000f92 <usart_configure>
}
 80003fa:	bf00      	nop
 80003fc:	3780      	adds	r7, #128	@ 0x80
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40023800 	.word	0x40023800
 8000408:	40020000 	.word	0x40020000
 800040c:	40020400 	.word	0x40020400
 8000410:	40020800 	.word	0x40020800
 8000414:	40020c00 	.word	0x40020c00
 8000418:	40021000 	.word	0x40021000
 800041c:	40011000 	.word	0x40011000

08000420 <smarthome_configure_interrupts>:

void smarthome_configure_interrupts()
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	usart_enable_interrupt(USART1_IRQn);
 8000424:	2025      	movs	r0, #37	@ 0x25
 8000426:	f001 facd 	bl	80019c4 <usart_enable_interrupt>
	gpio_configure_interrupt(SMARTHOME_THERMOSTAT_THIGH, GPIO_RISING_FALLING_EDGE);
 800042a:	2102      	movs	r1, #2
 800042c:	2003      	movs	r0, #3
 800042e:	f000 fbb1 	bl	8000b94 <gpio_configure_interrupt>
	gpio_enable_interrupt(SMARTHOME_THERMOSTAT_THIGH, EXTI3_IRQn);
 8000432:	2109      	movs	r1, #9
 8000434:	2003      	movs	r0, #3
 8000436:	f000 fc21 	bl	8000c7c <gpio_enable_interrupt>
	gpio_configure_interrupt(SMARTHOME_THERMOSTAT_TLOW, GPIO_RISING_FALLING_EDGE);
 800043a:	2102      	movs	r1, #2
 800043c:	2004      	movs	r0, #4
 800043e:	f000 fba9 	bl	8000b94 <gpio_configure_interrupt>
	gpio_enable_interrupt(SMARTHOME_THERMOSTAT_TLOW, EXTI4_IRQn);
 8000442:	210a      	movs	r1, #10
 8000444:	2004      	movs	r0, #4
 8000446:	f000 fc19 	bl	8000c7c <gpio_enable_interrupt>
	gpio_configure_interrupt(SMARTHOME_ALARM_SMOKE, GPIO_RISING_FALLING_EDGE);
 800044a:	2102      	movs	r1, #2
 800044c:	2000      	movs	r0, #0
 800044e:	f000 fba1 	bl	8000b94 <gpio_configure_interrupt>
	gpio_enable_interrupt(SMARTHOME_ALARM_SMOKE, EXTI0_IRQn);
 8000452:	2106      	movs	r1, #6
 8000454:	2000      	movs	r0, #0
 8000456:	f000 fc11 	bl	8000c7c <gpio_enable_interrupt>
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}

0800045e <smarthome_change_state>:

void smarthome_change_state(uint16_t data)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b082      	sub	sp, #8
 8000462:	af00      	add	r7, sp, #0
 8000464:	4603      	mov	r3, r0
 8000466:	80fb      	strh	r3, [r7, #6]
	if(data & 0x80)
 8000468:	88fb      	ldrh	r3, [r7, #6]
 800046a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800046e:	2b00      	cmp	r3, #0
 8000470:	d004      	beq.n	800047c <smarthome_change_state+0x1e>
	{
		smarthome_change_temperature(data);
 8000472:	88fb      	ldrh	r3, [r7, #6]
 8000474:	4618      	mov	r0, r3
 8000476:	f000 f857 	bl	8000528 <smarthome_change_temperature>
	}
	else
	{
		smarthome_change_device_state(data);
	}
}
 800047a:	e003      	b.n	8000484 <smarthome_change_state+0x26>
		smarthome_change_device_state(data);
 800047c:	88fb      	ldrh	r3, [r7, #6]
 800047e:	4618      	mov	r0, r3
 8000480:	f000 f804 	bl	800048c <smarthome_change_device_state>
}
 8000484:	bf00      	nop
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <smarthome_change_device_state>:


void smarthome_change_device_state(uint16_t data)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	80fb      	strh	r3, [r7, #6]
	if((data & 0x60) == SMARTHOME_CODE_LIGHT_BEDROOM)
 8000496:	88fb      	ldrh	r3, [r7, #6]
 8000498:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800049c:	2b00      	cmp	r3, #0
 800049e:	d10f      	bne.n	80004c0 <smarthome_change_device_state+0x34>
	{
		gpio_write_to_pin(SMARTHOME_LIGHTS, (data & 0x1E) >> 0x1, data & 0x1);
 80004a0:	88fb      	ldrh	r3, [r7, #6]
 80004a2:	105b      	asrs	r3, r3, #1
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	f003 030f 	and.w	r3, r3, #15
 80004aa:	b299      	uxth	r1, r3
 80004ac:	88fb      	ldrh	r3, [r7, #6]
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	f003 0301 	and.w	r3, r3, #1
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	461a      	mov	r2, r3
 80004b8:	4818      	ldr	r0, [pc, #96]	@ (800051c <smarthome_change_device_state+0x90>)
 80004ba:	f000 fb49 	bl	8000b50 <gpio_write_to_pin>
			{
				//invalid code word, ERROR
			}
		}
	}
}
 80004be:	e028      	b.n	8000512 <smarthome_change_device_state+0x86>
		if((data & 0x60) == SMARTHOME_CODE_DOORLOCK_FRONT)
 80004c0:	88fb      	ldrh	r3, [r7, #6]
 80004c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80004c6:	2b20      	cmp	r3, #32
 80004c8:	d10f      	bne.n	80004ea <smarthome_change_device_state+0x5e>
			gpio_write_to_pin(SMARTHOME_DOORLOCKS, (data & 0x1E) >> 0x1, data & 0x1);
 80004ca:	88fb      	ldrh	r3, [r7, #6]
 80004cc:	105b      	asrs	r3, r3, #1
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	f003 030f 	and.w	r3, r3, #15
 80004d4:	b299      	uxth	r1, r3
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	461a      	mov	r2, r3
 80004e2:	480f      	ldr	r0, [pc, #60]	@ (8000520 <smarthome_change_device_state+0x94>)
 80004e4:	f000 fb34 	bl	8000b50 <gpio_write_to_pin>
}
 80004e8:	e013      	b.n	8000512 <smarthome_change_device_state+0x86>
			if((data & 0x60) == SMARTHOME_CODE_SWITCH_IRON)
 80004ea:	88fb      	ldrh	r3, [r7, #6]
 80004ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80004f0:	2b40      	cmp	r3, #64	@ 0x40
 80004f2:	d10e      	bne.n	8000512 <smarthome_change_device_state+0x86>
				gpio_write_to_pin(SMARTHOME_SWITCHES, (data & 0x1E) >> 0x1, data & 0x1);
 80004f4:	88fb      	ldrh	r3, [r7, #6]
 80004f6:	105b      	asrs	r3, r3, #1
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	f003 030f 	and.w	r3, r3, #15
 80004fe:	b299      	uxth	r1, r3
 8000500:	88fb      	ldrh	r3, [r7, #6]
 8000502:	b2db      	uxtb	r3, r3
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	b2db      	uxtb	r3, r3
 800050a:	461a      	mov	r2, r3
 800050c:	4805      	ldr	r0, [pc, #20]	@ (8000524 <smarthome_change_device_state+0x98>)
 800050e:	f000 fb1f 	bl	8000b50 <gpio_write_to_pin>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40020c00 	.word	0x40020c00
 8000520:	40020400 	.word	0x40020400
 8000524:	40021000 	.word	0x40021000

08000528 <smarthome_change_temperature>:

void smarthome_change_temperature(uint16_t data)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]
	uint16_t temp = data & 0x7F;
 8000532:	88fb      	ldrh	r3, [r7, #6]
 8000534:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000538:	81fb      	strh	r3, [r7, #14]
	//send to DQ this temperature
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
	...

08000548 <smarthome_send_requested>:
	info = info >> 8;
	usart_transmit(USART1, info);
}

void smarthome_send_requested(uint16_t data)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	80fb      	strh	r3, [r7, #6]
	if(data == SMARTHOME_CODE_REQUEST_ALL)
 8000552:	88fb      	ldrh	r3, [r7, #6]
 8000554:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000558:	4293      	cmp	r3, r2
 800055a:	f040 80d0 	bne.w	80006fe <smarthome_send_requested+0x1b6>
	{
		uint16_t code;
		for (uint16_t i = 0; i < 8; i++)
 800055e:	2300      	movs	r3, #0
 8000560:	81fb      	strh	r3, [r7, #14]
 8000562:	e01f      	b.n	80005a4 <smarthome_send_requested+0x5c>
		{
			code = gpio_read_from_pin(SMARTHOME_LIGHTS, i);
 8000564:	89fb      	ldrh	r3, [r7, #14]
 8000566:	4619      	mov	r1, r3
 8000568:	4867      	ldr	r0, [pc, #412]	@ (8000708 <smarthome_send_requested+0x1c0>)
 800056a:	f000 fadc 	bl	8000b26 <gpio_read_from_pin>
 800056e:	4603      	mov	r3, r0
 8000570:	813b      	strh	r3, [r7, #8]
			code = code | SMARTHOME_CODE_LIGHT_BEDROOM | (i*2);
 8000572:	89fb      	ldrh	r3, [r7, #14]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	b29b      	uxth	r3, r3
 8000578:	b21a      	sxth	r2, r3
 800057a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800057e:	4313      	orrs	r3, r2
 8000580:	b21b      	sxth	r3, r3
 8000582:	813b      	strh	r3, [r7, #8]
			usart_transmit(USART1, code);
 8000584:	893b      	ldrh	r3, [r7, #8]
 8000586:	4619      	mov	r1, r3
 8000588:	4860      	ldr	r0, [pc, #384]	@ (800070c <smarthome_send_requested+0x1c4>)
 800058a:	f001 f9f2 	bl	8001972 <usart_transmit>
			code = code >> 8;
 800058e:	893b      	ldrh	r3, [r7, #8]
 8000590:	0a1b      	lsrs	r3, r3, #8
 8000592:	813b      	strh	r3, [r7, #8]
			usart_transmit(USART1, code);
 8000594:	893b      	ldrh	r3, [r7, #8]
 8000596:	4619      	mov	r1, r3
 8000598:	485c      	ldr	r0, [pc, #368]	@ (800070c <smarthome_send_requested+0x1c4>)
 800059a:	f001 f9ea 	bl	8001972 <usart_transmit>
		for (uint16_t i = 0; i < 8; i++)
 800059e:	89fb      	ldrh	r3, [r7, #14]
 80005a0:	3301      	adds	r3, #1
 80005a2:	81fb      	strh	r3, [r7, #14]
 80005a4:	89fb      	ldrh	r3, [r7, #14]
 80005a6:	2b07      	cmp	r3, #7
 80005a8:	d9dc      	bls.n	8000564 <smarthome_send_requested+0x1c>
		}
		code = gpio_read_from_pin(SMARTHOME_THERMOSTAT, 0);
 80005aa:	2100      	movs	r1, #0
 80005ac:	4858      	ldr	r0, [pc, #352]	@ (8000710 <smarthome_send_requested+0x1c8>)
 80005ae:	f000 faba 	bl	8000b26 <gpio_read_from_pin>
 80005b2:	4603      	mov	r3, r0
 80005b4:	813b      	strh	r3, [r7, #8]
		code = code | SMARTHOME_CODE_THERMOSTAT_TEMPERATURE;
 80005b6:	893b      	ldrh	r3, [r7, #8]
 80005b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005bc:	813b      	strh	r3, [r7, #8]
		usart_transmit(USART1, code);
 80005be:	893b      	ldrh	r3, [r7, #8]
 80005c0:	4619      	mov	r1, r3
 80005c2:	4852      	ldr	r0, [pc, #328]	@ (800070c <smarthome_send_requested+0x1c4>)
 80005c4:	f001 f9d5 	bl	8001972 <usart_transmit>
		code = code >> 8;
 80005c8:	893b      	ldrh	r3, [r7, #8]
 80005ca:	0a1b      	lsrs	r3, r3, #8
 80005cc:	813b      	strh	r3, [r7, #8]
		usart_transmit(USART1, code);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	4619      	mov	r1, r3
 80005d2:	484e      	ldr	r0, [pc, #312]	@ (800070c <smarthome_send_requested+0x1c4>)
 80005d4:	f001 f9cd 	bl	8001972 <usart_transmit>
		code = gpio_read_from_pin(SMARTHOME_THERMOSTAT, 3);
 80005d8:	2103      	movs	r1, #3
 80005da:	484d      	ldr	r0, [pc, #308]	@ (8000710 <smarthome_send_requested+0x1c8>)
 80005dc:	f000 faa3 	bl	8000b26 <gpio_read_from_pin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	813b      	strh	r3, [r7, #8]
		code = code | SMARTHOME_CODE_HIGH_TEMP;
 80005e4:	893b      	ldrh	r3, [r7, #8]
 80005e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005ea:	f043 0302 	orr.w	r3, r3, #2
 80005ee:	813b      	strh	r3, [r7, #8]
		usart_transmit(USART1, code);
 80005f0:	893b      	ldrh	r3, [r7, #8]
 80005f2:	4619      	mov	r1, r3
 80005f4:	4845      	ldr	r0, [pc, #276]	@ (800070c <smarthome_send_requested+0x1c4>)
 80005f6:	f001 f9bc 	bl	8001972 <usart_transmit>
		code = code >> 8;
 80005fa:	893b      	ldrh	r3, [r7, #8]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	813b      	strh	r3, [r7, #8]
		usart_transmit(USART1, code);
 8000600:	893b      	ldrh	r3, [r7, #8]
 8000602:	4619      	mov	r1, r3
 8000604:	4841      	ldr	r0, [pc, #260]	@ (800070c <smarthome_send_requested+0x1c4>)
 8000606:	f001 f9b4 	bl	8001972 <usart_transmit>
		code = gpio_read_from_pin(SMARTHOME_THERMOSTAT, 4);
 800060a:	2104      	movs	r1, #4
 800060c:	4840      	ldr	r0, [pc, #256]	@ (8000710 <smarthome_send_requested+0x1c8>)
 800060e:	f000 fa8a 	bl	8000b26 <gpio_read_from_pin>
 8000612:	4603      	mov	r3, r0
 8000614:	813b      	strh	r3, [r7, #8]
		code = code | SMARTHOME_CODE_LOW_TEMP;
 8000616:	893b      	ldrh	r3, [r7, #8]
 8000618:	f443 7301 	orr.w	r3, r3, #516	@ 0x204
 800061c:	813b      	strh	r3, [r7, #8]
		usart_transmit(USART1, code);
 800061e:	893b      	ldrh	r3, [r7, #8]
 8000620:	4619      	mov	r1, r3
 8000622:	483a      	ldr	r0, [pc, #232]	@ (800070c <smarthome_send_requested+0x1c4>)
 8000624:	f001 f9a5 	bl	8001972 <usart_transmit>
		code = code >> 8;
 8000628:	893b      	ldrh	r3, [r7, #8]
 800062a:	0a1b      	lsrs	r3, r3, #8
 800062c:	813b      	strh	r3, [r7, #8]
		usart_transmit(USART1, code);
 800062e:	893b      	ldrh	r3, [r7, #8]
 8000630:	4619      	mov	r1, r3
 8000632:	4836      	ldr	r0, [pc, #216]	@ (800070c <smarthome_send_requested+0x1c4>)
 8000634:	f001 f99d 	bl	8001972 <usart_transmit>
		for (uint16_t i = 0; i < 2; i++)
 8000638:	2300      	movs	r3, #0
 800063a:	81bb      	strh	r3, [r7, #12]
 800063c:	e01f      	b.n	800067e <smarthome_send_requested+0x136>
		{
			code = gpio_read_from_pin(SMARTHOME_DOORLOCKS, i);
 800063e:	89bb      	ldrh	r3, [r7, #12]
 8000640:	4619      	mov	r1, r3
 8000642:	4834      	ldr	r0, [pc, #208]	@ (8000714 <smarthome_send_requested+0x1cc>)
 8000644:	f000 fa6f 	bl	8000b26 <gpio_read_from_pin>
 8000648:	4603      	mov	r3, r0
 800064a:	813b      	strh	r3, [r7, #8]
			code = code | SMARTHOME_CODE_DOORLOCK_FRONT | (i*2);
 800064c:	89bb      	ldrh	r3, [r7, #12]
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	b29a      	uxth	r2, r3
 8000652:	893b      	ldrh	r3, [r7, #8]
 8000654:	4313      	orrs	r3, r2
 8000656:	b29b      	uxth	r3, r3
 8000658:	f043 0320 	orr.w	r3, r3, #32
 800065c:	813b      	strh	r3, [r7, #8]
			usart_transmit(USART1, code);
 800065e:	893b      	ldrh	r3, [r7, #8]
 8000660:	4619      	mov	r1, r3
 8000662:	482a      	ldr	r0, [pc, #168]	@ (800070c <smarthome_send_requested+0x1c4>)
 8000664:	f001 f985 	bl	8001972 <usart_transmit>
			code = code >> 8;
 8000668:	893b      	ldrh	r3, [r7, #8]
 800066a:	0a1b      	lsrs	r3, r3, #8
 800066c:	813b      	strh	r3, [r7, #8]
			usart_transmit(USART1, code);
 800066e:	893b      	ldrh	r3, [r7, #8]
 8000670:	4619      	mov	r1, r3
 8000672:	4826      	ldr	r0, [pc, #152]	@ (800070c <smarthome_send_requested+0x1c4>)
 8000674:	f001 f97d 	bl	8001972 <usart_transmit>
		for (uint16_t i = 0; i < 2; i++)
 8000678:	89bb      	ldrh	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	81bb      	strh	r3, [r7, #12]
 800067e:	89bb      	ldrh	r3, [r7, #12]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d9dc      	bls.n	800063e <smarthome_send_requested+0xf6>
		}
		for (uint16_t i = 0; i < 10; i++)
 8000684:	2300      	movs	r3, #0
 8000686:	817b      	strh	r3, [r7, #10]
 8000688:	e01f      	b.n	80006ca <smarthome_send_requested+0x182>
		{
			code = gpio_read_from_pin(SMARTHOME_SWITCHES, i);
 800068a:	897b      	ldrh	r3, [r7, #10]
 800068c:	4619      	mov	r1, r3
 800068e:	4822      	ldr	r0, [pc, #136]	@ (8000718 <smarthome_send_requested+0x1d0>)
 8000690:	f000 fa49 	bl	8000b26 <gpio_read_from_pin>
 8000694:	4603      	mov	r3, r0
 8000696:	813b      	strh	r3, [r7, #8]
			code = code | SMARTHOME_CODE_SWITCH_IRON | (i*2);
 8000698:	897b      	ldrh	r3, [r7, #10]
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	b29a      	uxth	r2, r3
 800069e:	893b      	ldrh	r3, [r7, #8]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006a8:	813b      	strh	r3, [r7, #8]
			usart_transmit(USART1, code);
 80006aa:	893b      	ldrh	r3, [r7, #8]
 80006ac:	4619      	mov	r1, r3
 80006ae:	4817      	ldr	r0, [pc, #92]	@ (800070c <smarthome_send_requested+0x1c4>)
 80006b0:	f001 f95f 	bl	8001972 <usart_transmit>
			code = code >> 8;
 80006b4:	893b      	ldrh	r3, [r7, #8]
 80006b6:	0a1b      	lsrs	r3, r3, #8
 80006b8:	813b      	strh	r3, [r7, #8]
			usart_transmit(USART1, code);
 80006ba:	893b      	ldrh	r3, [r7, #8]
 80006bc:	4619      	mov	r1, r3
 80006be:	4813      	ldr	r0, [pc, #76]	@ (800070c <smarthome_send_requested+0x1c4>)
 80006c0:	f001 f957 	bl	8001972 <usart_transmit>
		for (uint16_t i = 0; i < 10; i++)
 80006c4:	897b      	ldrh	r3, [r7, #10]
 80006c6:	3301      	adds	r3, #1
 80006c8:	817b      	strh	r3, [r7, #10]
 80006ca:	897b      	ldrh	r3, [r7, #10]
 80006cc:	2b09      	cmp	r3, #9
 80006ce:	d9dc      	bls.n	800068a <smarthome_send_requested+0x142>
		}
		code = gpio_read_from_pin(SMARTHOME_ALARMS, 0);
 80006d0:	2100      	movs	r1, #0
 80006d2:	4812      	ldr	r0, [pc, #72]	@ (800071c <smarthome_send_requested+0x1d4>)
 80006d4:	f000 fa27 	bl	8000b26 <gpio_read_from_pin>
 80006d8:	4603      	mov	r3, r0
 80006da:	813b      	strh	r3, [r7, #8]
		code = code | SMARTHOME_CODE_SMOKE;
 80006dc:	893b      	ldrh	r3, [r7, #8]
 80006de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006e2:	813b      	strh	r3, [r7, #8]
		usart_transmit(USART1, code);
 80006e4:	893b      	ldrh	r3, [r7, #8]
 80006e6:	4619      	mov	r1, r3
 80006e8:	4808      	ldr	r0, [pc, #32]	@ (800070c <smarthome_send_requested+0x1c4>)
 80006ea:	f001 f942 	bl	8001972 <usart_transmit>
		code = code >> 8;
 80006ee:	893b      	ldrh	r3, [r7, #8]
 80006f0:	0a1b      	lsrs	r3, r3, #8
 80006f2:	813b      	strh	r3, [r7, #8]
		usart_transmit(USART1, code);
 80006f4:	893b      	ldrh	r3, [r7, #8]
 80006f6:	4619      	mov	r1, r3
 80006f8:	4804      	ldr	r0, [pc, #16]	@ (800070c <smarthome_send_requested+0x1c4>)
 80006fa:	f001 f93a 	bl	8001972 <usart_transmit>
	}
	else
	{

	}
}
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40020c00 	.word	0x40020c00
 800070c:	40011000 	.word	0x40011000
 8000710:	40020000 	.word	0x40020000
 8000714:	40020400 	.word	0x40020400
 8000718:	40021000 	.word	0x40021000
 800071c:	40020800 	.word	0x40020800

08000720 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
	uint16_t data = usart_receive(USART1);
 8000726:	4811      	ldr	r0, [pc, #68]	@ (800076c <USART1_IRQHandler+0x4c>)
 8000728:	f001 f939 	bl	800199e <usart_receive>
 800072c:	4603      	mov	r3, r0
 800072e:	80fb      	strh	r3, [r7, #6]
	data = data | (usart_receive(USART1) << 8);
 8000730:	480e      	ldr	r0, [pc, #56]	@ (800076c <USART1_IRQHandler+0x4c>)
 8000732:	f001 f934 	bl	800199e <usart_receive>
 8000736:	4603      	mov	r3, r0
 8000738:	021b      	lsls	r3, r3, #8
 800073a:	b21a      	sxth	r2, r3
 800073c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000740:	4313      	orrs	r3, r2
 8000742:	b21b      	sxth	r3, r3
 8000744:	80fb      	strh	r3, [r7, #6]

	if(data & 0x100)
 8000746:	88fb      	ldrh	r3, [r7, #6]
 8000748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800074c:	2b00      	cmp	r3, #0
 800074e:	d004      	beq.n	800075a <USART1_IRQHandler+0x3a>
	{
		smarthome_send_requested(data);
 8000750:	88fb      	ldrh	r3, [r7, #6]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fef8 	bl	8000548 <smarthome_send_requested>
	}
	else
	{
		smarthome_change_state(data);
	}
}
 8000758:	e003      	b.n	8000762 <USART1_IRQHandler+0x42>
		smarthome_change_state(data);
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fe7e 	bl	800045e <smarthome_change_state>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40011000 	.word	0x40011000

08000770 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
	uint16_t warning = gpio_read_from_pin(SMARTHOME_ALARMS, SMARTHOME_ALARM_SMOKE);
 8000776:	2100      	movs	r1, #0
 8000778:	4808      	ldr	r0, [pc, #32]	@ (800079c <EXTI0_IRQHandler+0x2c>)
 800077a:	f000 f9d4 	bl	8000b26 <gpio_read_from_pin>
 800077e:	4603      	mov	r3, r0
 8000780:	80fb      	strh	r3, [r7, #6]
	usart_transmit(USART1, SMARTHOME_CODE_SMOKE & warning);
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000788:	b29b      	uxth	r3, r3
 800078a:	4619      	mov	r1, r3
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <EXTI0_IRQHandler+0x30>)
 800078e:	f001 f8f0 	bl	8001972 <usart_transmit>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40020800 	.word	0x40020800
 80007a0:	40011000 	.word	0x40011000

080007a4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
	uint16_t warning = gpio_read_from_pin(SMARTHOME_THERMOSTAT, SMARTHOME_THERMOSTAT_THIGH);
 80007aa:	2103      	movs	r1, #3
 80007ac:	480a      	ldr	r0, [pc, #40]	@ (80007d8 <EXTI3_IRQHandler+0x34>)
 80007ae:	f000 f9ba 	bl	8000b26 <gpio_read_from_pin>
 80007b2:	4603      	mov	r3, r0
 80007b4:	80fb      	strh	r3, [r7, #6]
	usart_transmit(USART1, SMARTHOME_CODE_HIGH_TEMP & warning);
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 80007bc:	f023 0301 	bic.w	r3, r3, #1
 80007c0:	059b      	lsls	r3, r3, #22
 80007c2:	0d9b      	lsrs	r3, r3, #22
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <EXTI3_IRQHandler+0x38>)
 80007ca:	f001 f8d2 	bl	8001972 <usart_transmit>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40020000 	.word	0x40020000
 80007dc:	40011000 	.word	0x40011000

080007e0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
	uint16_t warning = gpio_read_from_pin(SMARTHOME_THERMOSTAT, SMARTHOME_THERMOSTAT_TLOW);
 80007e6:	2104      	movs	r1, #4
 80007e8:	4808      	ldr	r0, [pc, #32]	@ (800080c <EXTI4_IRQHandler+0x2c>)
 80007ea:	f000 f99c 	bl	8000b26 <gpio_read_from_pin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
	usart_transmit(USART1, SMARTHOME_CODE_LOW_TEMP & warning);
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	f403 7301 	and.w	r3, r3, #516	@ 0x204
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	4619      	mov	r1, r3
 80007fc:	4804      	ldr	r0, [pc, #16]	@ (8000810 <EXTI4_IRQHandler+0x30>)
 80007fe:	f001 f8b8 	bl	8001972 <usart_transmit>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40020000 	.word	0x40020000
 8000810:	40011000 	.word	0x40011000

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000818:	f000 f806 	bl	8000828 <SystemClock_Config>
  usart1.psc = 0x00;
  usart_configure(&usart1);
  uint16_t data;*/


  smarthome_initialize();
 800081c:	f7ff fcda 	bl	80001d4 <smarthome_initialize>
  smarthome_configure_interrupts();
 8000820:	f7ff fdfe 	bl	8000420 <smarthome_configure_interrupts>

  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <main+0x10>

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }*/
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <SystemInit+0x20>)
 800083e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000842:	4a05      	ldr	r2, [pc, #20]	@ (8000858 <SystemInit+0x20>)
 8000844:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000848:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800085c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000894 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000860:	f7ff ffea 	bl	8000838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000864:	480c      	ldr	r0, [pc, #48]	@ (8000898 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000866:	490d      	ldr	r1, [pc, #52]	@ (800089c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000868:	4a0d      	ldr	r2, [pc, #52]	@ (80008a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800087c:	4c0a      	ldr	r4, [pc, #40]	@ (80008a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800088a:	f001 f8a9 	bl	80019e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800088e:	f7ff ffc1 	bl	8000814 <main>
  bx  lr    
 8000892:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000894:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80008a0:	08001a48 	.word	0x08001a48
  ldr r2, =_sbss
 80008a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80008a8:	2000001c 	.word	0x2000001c

080008ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC_IRQHandler>
	...

080008b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	db0b      	blt.n	80008da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	f003 021f 	and.w	r2, r3, #31
 80008c8:	4907      	ldr	r1, [pc, #28]	@ (80008e8 <__NVIC_EnableIRQ+0x38>)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	095b      	lsrs	r3, r3, #5
 80008d0:	2001      	movs	r0, #1
 80008d2:	fa00 f202 	lsl.w	r2, r0, r2
 80008d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000e100 	.word	0xe000e100

080008ec <gpio_init>:
}

//**************************************GPIO PIN CONFIGURATION FUNCTIONS****************************************

int gpio_init(GPIO_TypeDef* port, gpio_pin* pin)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	if(gpio_configure_pin_mode(port, pin->pin, pin->mode) != 0)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	b299      	uxth	r1, r3
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	461a      	mov	r2, r3
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f000 f847 	bl	8000996 <gpio_configure_pin_mode>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <gpio_init+0x28>
	{
		return -1;
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
 8000912:	e03c      	b.n	800098e <gpio_init+0xa2>
	}
	if(gpio_configure_pin_output_type(port, pin->pin, pin->output_type) != 0)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	b299      	uxth	r1, r3
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	461a      	mov	r2, r3
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f000 f85b 	bl	80009dc <gpio_configure_pin_output_type>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d002      	beq.n	8000932 <gpio_init+0x46>
	{
		return -1;
 800092c:	f04f 33ff 	mov.w	r3, #4294967295
 8000930:	e02d      	b.n	800098e <gpio_init+0xa2>
	}
	if(gpio_configure_pin_output_speed(port, pin->pin, pin->output_speed) != 0)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	b299      	uxth	r1, r3
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	461a      	mov	r2, r3
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f86d 	bl	8000a1e <gpio_configure_pin_output_speed>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d002      	beq.n	8000950 <gpio_init+0x64>
	{
		return -1;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	e01e      	b.n	800098e <gpio_init+0xa2>
	}
	if(gpio_configure_pin_pull(port, pin->pin, pin->pull) != 0)
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	b299      	uxth	r1, r3
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	691b      	ldr	r3, [r3, #16]
 800095a:	461a      	mov	r2, r3
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f000 f881 	bl	8000a64 <gpio_configure_pin_pull>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <gpio_init+0x82>
	{
		return -1;
 8000968:	f04f 33ff 	mov.w	r3, #4294967295
 800096c:	e00f      	b.n	800098e <gpio_init+0xa2>
	}
	if(gpio_configure_pin_alternate_function(port, pin->pin, pin->alternate_function) != 0)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	b299      	uxth	r1, r3
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	695b      	ldr	r3, [r3, #20]
 8000978:	461a      	mov	r2, r3
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f000 f895 	bl	8000aaa <gpio_configure_pin_alternate_function>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <gpio_init+0xa0>
	{
		return -1;
 8000986:	f04f 33ff 	mov.w	r3, #4294967295
 800098a:	e000      	b.n	800098e <gpio_init+0xa2>
	}
	return 0;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <gpio_configure_pin_mode>:

int gpio_configure_pin_mode(GPIO_TypeDef* port, uint16_t pin, uint32_t mode)
{
 8000996:	b480      	push	{r7}
 8000998:	b085      	sub	sp, #20
 800099a:	af00      	add	r7, sp, #0
 800099c:	60f8      	str	r0, [r7, #12]
 800099e:	460b      	mov	r3, r1
 80009a0:	607a      	str	r2, [r7, #4]
 80009a2:	817b      	strh	r3, [r7, #10]
	port->MODER = port->MODER & ~(0x00000003 << (pin*2));
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	897a      	ldrh	r2, [r7, #10]
 80009aa:	0052      	lsls	r2, r2, #1
 80009ac:	2103      	movs	r1, #3
 80009ae:	fa01 f202 	lsl.w	r2, r1, r2
 80009b2:	43d2      	mvns	r2, r2
 80009b4:	401a      	ands	r2, r3
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	601a      	str	r2, [r3, #0]
	port->MODER = port->MODER | (mode << (pin*2));
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	897b      	ldrh	r3, [r7, #10]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	fa01 f303 	lsl.w	r3, r1, r3
 80009c8:	431a      	orrs	r2, r3
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	601a      	str	r2, [r3, #0]

	return 0;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <gpio_configure_pin_output_type>:

int gpio_configure_pin_output_type(GPIO_TypeDef* port, uint16_t pin, uint32_t type)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	460b      	mov	r3, r1
 80009e6:	607a      	str	r2, [r7, #4]
 80009e8:	817b      	strh	r3, [r7, #10]
	port->OTYPER = port->OTYPER & ~(0x00000001 << pin);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	897a      	ldrh	r2, [r7, #10]
 80009f0:	2101      	movs	r1, #1
 80009f2:	fa01 f202 	lsl.w	r2, r1, r2
 80009f6:	43d2      	mvns	r2, r2
 80009f8:	401a      	ands	r2, r3
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	605a      	str	r2, [r3, #4]
	port->OTYPER = port->OTYPER | (type << pin);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	897b      	ldrh	r3, [r7, #10]
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	605a      	str	r2, [r3, #4]

	return 0;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <gpio_configure_pin_output_speed>:

int gpio_configure_pin_output_speed(GPIO_TypeDef* port, uint16_t pin, uint32_t speed)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b085      	sub	sp, #20
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	60f8      	str	r0, [r7, #12]
 8000a26:	460b      	mov	r3, r1
 8000a28:	607a      	str	r2, [r7, #4]
 8000a2a:	817b      	strh	r3, [r7, #10]
	port->OSPEEDR = port->OSPEEDR & ~(0x00000003 << (pin*2));
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	897a      	ldrh	r2, [r7, #10]
 8000a32:	0052      	lsls	r2, r2, #1
 8000a34:	2103      	movs	r1, #3
 8000a36:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3a:	43d2      	mvns	r2, r2
 8000a3c:	401a      	ands	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	609a      	str	r2, [r3, #8]
	port->OSPEEDR = port->OSPEEDR | (speed << (pin*2));
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	689a      	ldr	r2, [r3, #8]
 8000a46:	897b      	ldrh	r3, [r7, #10]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a50:	431a      	orrs	r2, r3
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	609a      	str	r2, [r3, #8]

	return 0;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <gpio_configure_pin_pull>:

int gpio_configure_pin_pull(GPIO_TypeDef* port, uint16_t pin, uint32_t pull)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	607a      	str	r2, [r7, #4]
 8000a70:	817b      	strh	r3, [r7, #10]
	port->PUPDR = port->PUPDR & ~(0x00000003 << (pin*2));
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	897a      	ldrh	r2, [r7, #10]
 8000a78:	0052      	lsls	r2, r2, #1
 8000a7a:	2103      	movs	r1, #3
 8000a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a80:	43d2      	mvns	r2, r2
 8000a82:	401a      	ands	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	60da      	str	r2, [r3, #12]
	port->PUPDR = port->PUPDR | (pull << (pin*2));
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	68da      	ldr	r2, [r3, #12]
 8000a8c:	897b      	ldrh	r3, [r7, #10]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	431a      	orrs	r2, r3
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	60da      	str	r2, [r3, #12]

	return 0;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <gpio_configure_pin_alternate_function>:

int gpio_configure_pin_alternate_function(GPIO_TypeDef* port, uint16_t pin, uint32_t alt_function)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b085      	sub	sp, #20
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	817b      	strh	r3, [r7, #10]
	if(pin < 8)
 8000ab8:	897b      	ldrh	r3, [r7, #10]
 8000aba:	2b07      	cmp	r3, #7
 8000abc:	d815      	bhi.n	8000aea <gpio_configure_pin_alternate_function+0x40>
	{
		port->AFR[0] = port->AFR[0] & ~(0x0000000F << (pin*4));
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6a1b      	ldr	r3, [r3, #32]
 8000ac2:	897a      	ldrh	r2, [r7, #10]
 8000ac4:	0092      	lsls	r2, r2, #2
 8000ac6:	210f      	movs	r1, #15
 8000ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8000acc:	43d2      	mvns	r2, r2
 8000ace:	401a      	ands	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	621a      	str	r2, [r3, #32]
		port->AFR[0] = port->AFR[0] | (alt_function << (pin*4));
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	6a1a      	ldr	r2, [r3, #32]
 8000ad8:	897b      	ldrh	r3, [r7, #10]
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	6879      	ldr	r1, [r7, #4]
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	621a      	str	r2, [r3, #32]
 8000ae8:	e016      	b.n	8000b18 <gpio_configure_pin_alternate_function+0x6e>
	}
	else
	{
		port->AFR[1] = port->AFR[1] & ~(0x0000000F << ((pin-8)*4));
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aee:	897a      	ldrh	r2, [r7, #10]
 8000af0:	3a08      	subs	r2, #8
 8000af2:	0092      	lsls	r2, r2, #2
 8000af4:	210f      	movs	r1, #15
 8000af6:	fa01 f202 	lsl.w	r2, r1, r2
 8000afa:	43d2      	mvns	r2, r2
 8000afc:	401a      	ands	r2, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	625a      	str	r2, [r3, #36]	@ 0x24
		port->AFR[1] = port->AFR[1] | (alt_function << ((pin-8)*4));
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b06:	897b      	ldrh	r3, [r7, #10]
 8000b08:	3b08      	subs	r3, #8
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	6879      	ldr	r1, [r7, #4]
 8000b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b12:	431a      	orrs	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	return 0;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <gpio_read_from_pin>:

//***********************************GPIO READING AND WRITING FUNCTIONS*************************************

uint8_t gpio_read_from_pin(GPIO_TypeDef* port, uint16_t pin)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	807b      	strh	r3, [r7, #2]
	return ((port->IDR >> pin) & 0x1);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	691a      	ldr	r2, [r3, #16]
 8000b36:	887b      	ldrh	r3, [r7, #2]
 8000b38:	fa22 f303 	lsr.w	r3, r2, r3
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	b2db      	uxtb	r3, r3
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <gpio_write_to_pin>:

int gpio_write_to_pin(GPIO_TypeDef* port, uint16_t pin, uint8_t value)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	807b      	strh	r3, [r7, #2]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	707b      	strb	r3, [r7, #1]
	port->ODR = port->ODR & ~(0x00000001 << pin);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	887a      	ldrh	r2, [r7, #2]
 8000b66:	2101      	movs	r1, #1
 8000b68:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6c:	43d2      	mvns	r2, r2
 8000b6e:	401a      	ands	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	615a      	str	r2, [r3, #20]
	port->ODR = port->ODR | (value << pin);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	7879      	ldrb	r1, [r7, #1]
 8000b7a:	887a      	ldrh	r2, [r7, #2]
 8000b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b80:	431a      	orrs	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	615a      	str	r2, [r3, #20]

	return 0;
 8000b86:	2300      	movs	r3, #0
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <gpio_configure_interrupt>:
}

//*************************************GPIO INTERRUPT HANDLING FUNTIONS***************************************

int gpio_configure_interrupt(uint16_t pin, uint32_t edge)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	80fb      	strh	r3, [r7, #6]
	if(edge == GPIO_RISING_EDGE)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d116      	bne.n	8000bd4 <gpio_configure_interrupt+0x40>
	{
		EXTI->RTSR = EXTI->RTSR & ~(0x00000001 << pin);
 8000ba6:	4b34      	ldr	r3, [pc, #208]	@ (8000c78 <gpio_configure_interrupt+0xe4>)
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	88fa      	ldrh	r2, [r7, #6]
 8000bac:	2101      	movs	r1, #1
 8000bae:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb2:	43d2      	mvns	r2, r2
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4a30      	ldr	r2, [pc, #192]	@ (8000c78 <gpio_configure_interrupt+0xe4>)
 8000bb8:	400b      	ands	r3, r1
 8000bba:	6093      	str	r3, [r2, #8]
		EXTI->RTSR = EXTI->RTSR | (1 << pin);
 8000bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8000c78 <gpio_configure_interrupt+0xe4>)
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	88fa      	ldrh	r2, [r7, #6]
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4a2b      	ldr	r2, [pc, #172]	@ (8000c78 <gpio_configure_interrupt+0xe4>)
 8000bcc:	430b      	orrs	r3, r1
 8000bce:	6093      	str	r3, [r2, #8]

		return 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	e04a      	b.n	8000c6a <gpio_configure_interrupt+0xd6>
	}
	else if(edge == GPIO_FALLING_EDGE)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d116      	bne.n	8000c08 <gpio_configure_interrupt+0x74>
	{
		EXTI->FTSR = EXTI->FTSR & ~(0x00000001 << pin);
 8000bda:	4b27      	ldr	r3, [pc, #156]	@ (8000c78 <gpio_configure_interrupt+0xe4>)
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	88fa      	ldrh	r2, [r7, #6]
 8000be0:	2101      	movs	r1, #1
 8000be2:	fa01 f202 	lsl.w	r2, r1, r2
 8000be6:	43d2      	mvns	r2, r2
 8000be8:	4611      	mov	r1, r2
 8000bea:	4a23      	ldr	r2, [pc, #140]	@ (8000c78 <gpio_configure_interrupt+0xe4>)
 8000bec:	400b      	ands	r3, r1
 8000bee:	60d3      	str	r3, [r2, #12]
		EXTI->FTSR = EXTI->FTSR | (1 << pin);
 8000bf0:	4b21      	ldr	r3, [pc, #132]	@ (8000c78 <gpio_configure_interrupt+0xe4>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	88fa      	ldrh	r2, [r7, #6]
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8000c78 <gpio_configure_interrupt+0xe4>)
 8000c00:	430b      	orrs	r3, r1
 8000c02:	60d3      	str	r3, [r2, #12]

		return 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	e030      	b.n	8000c6a <gpio_configure_interrupt+0xd6>
	}
	else if(edge == GPIO_RISING_FALLING_EDGE)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d12b      	bne.n	8000c66 <gpio_configure_interrupt+0xd2>
	{
		EXTI->RTSR = EXTI->RTSR & ~(0x00000001 << pin);
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <gpio_configure_interrupt+0xe4>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	88fa      	ldrh	r2, [r7, #6]
 8000c14:	2101      	movs	r1, #1
 8000c16:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1a:	43d2      	mvns	r2, r2
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4a16      	ldr	r2, [pc, #88]	@ (8000c78 <gpio_configure_interrupt+0xe4>)
 8000c20:	400b      	ands	r3, r1
 8000c22:	6093      	str	r3, [r2, #8]
		EXTI->RTSR = EXTI->RTSR | (1 << pin);
 8000c24:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <gpio_configure_interrupt+0xe4>)
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	88fa      	ldrh	r2, [r7, #6]
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c30:	4611      	mov	r1, r2
 8000c32:	4a11      	ldr	r2, [pc, #68]	@ (8000c78 <gpio_configure_interrupt+0xe4>)
 8000c34:	430b      	orrs	r3, r1
 8000c36:	6093      	str	r3, [r2, #8]
		EXTI->FTSR = EXTI->FTSR & ~(0x00000001 << pin);
 8000c38:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <gpio_configure_interrupt+0xe4>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	88fa      	ldrh	r2, [r7, #6]
 8000c3e:	2101      	movs	r1, #1
 8000c40:	fa01 f202 	lsl.w	r2, r1, r2
 8000c44:	43d2      	mvns	r2, r2
 8000c46:	4611      	mov	r1, r2
 8000c48:	4a0b      	ldr	r2, [pc, #44]	@ (8000c78 <gpio_configure_interrupt+0xe4>)
 8000c4a:	400b      	ands	r3, r1
 8000c4c:	60d3      	str	r3, [r2, #12]
		EXTI->FTSR = EXTI->FTSR | (1 << pin);
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <gpio_configure_interrupt+0xe4>)
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	88fa      	ldrh	r2, [r7, #6]
 8000c54:	2101      	movs	r1, #1
 8000c56:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4a06      	ldr	r2, [pc, #24]	@ (8000c78 <gpio_configure_interrupt+0xe4>)
 8000c5e:	430b      	orrs	r3, r1
 8000c60:	60d3      	str	r3, [r2, #12]

		return 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	e001      	b.n	8000c6a <gpio_configure_interrupt+0xd6>
	}
	else
	{
		return -1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40013c00 	.word	0x40013c00

08000c7c <gpio_enable_interrupt>:

int gpio_enable_interrupt(uint16_t pin, IRQn_Type irq)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	460a      	mov	r2, r1
 8000c86:	80fb      	strh	r3, [r7, #6]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	717b      	strb	r3, [r7, #5]
	EXTI->IMR = EXTI->IMR & ~(0x00000001 << pin);
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <gpio_enable_interrupt+0x50>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	88fa      	ldrh	r2, [r7, #6]
 8000c92:	2101      	movs	r1, #1
 8000c94:	fa01 f202 	lsl.w	r2, r1, r2
 8000c98:	43d2      	mvns	r2, r2
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000ccc <gpio_enable_interrupt+0x50>)
 8000c9e:	400b      	ands	r3, r1
 8000ca0:	6013      	str	r3, [r2, #0]
	EXTI->IMR = EXTI->IMR | (1 << pin);
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <gpio_enable_interrupt+0x50>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	88fa      	ldrh	r2, [r7, #6]
 8000ca8:	2101      	movs	r1, #1
 8000caa:	fa01 f202 	lsl.w	r2, r1, r2
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ccc <gpio_enable_interrupt+0x50>)
 8000cb2:	430b      	orrs	r3, r1
 8000cb4:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(irq);
 8000cb6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fdf8 	bl	80008b0 <__NVIC_EnableIRQ>

	return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40013c00 	.word	0x40013c00

08000cd0 <__NVIC_EnableIRQ>:
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4907      	ldr	r1, [pc, #28]	@ (8000d08 <__NVIC_EnableIRQ+0x38>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <usart_choose_type>:
#include <STM32F401VE_USART_driver.h>

//*********************************SPI CONFIGURATION FUCTIONS********************************************************

void usart_choose_type(uint32_t usart)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	switch(usart)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d017      	beq.n	8000d4a <usart_choose_type+0x3e>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d81b      	bhi.n	8000d58 <usart_choose_type+0x4c>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <usart_choose_type+0x22>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d007      	beq.n	8000d3c <usart_choose_type+0x30>
	case USART6_TYPE:
	{
		RCC->APB2ENR = RCC->APB2ENR | USART6EN;
	}break;
	}
}
 8000d2c:	e014      	b.n	8000d58 <usart_choose_type+0x4c>
		RCC->APB2ENR = RCC->APB2ENR | USART1EN;
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <usart_choose_type+0x58>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	4a0c      	ldr	r2, [pc, #48]	@ (8000d64 <usart_choose_type+0x58>)
 8000d34:	f043 0310 	orr.w	r3, r3, #16
 8000d38:	6453      	str	r3, [r2, #68]	@ 0x44
	}break;
 8000d3a:	e00d      	b.n	8000d58 <usart_choose_type+0x4c>
		RCC->APB1ENR = RCC->APB1ENR | USART2EN;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <usart_choose_type+0x58>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d40:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <usart_choose_type+0x58>)
 8000d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d46:	6413      	str	r3, [r2, #64]	@ 0x40
	}break;
 8000d48:	e006      	b.n	8000d58 <usart_choose_type+0x4c>
		RCC->APB2ENR = RCC->APB2ENR | USART6EN;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <usart_choose_type+0x58>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	4a05      	ldr	r2, [pc, #20]	@ (8000d64 <usart_choose_type+0x58>)
 8000d50:	f043 0320 	orr.w	r3, r3, #32
 8000d54:	6453      	str	r3, [r2, #68]	@ 0x44
	}break;
 8000d56:	bf00      	nop
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	40023800 	.word	0x40023800

08000d68 <usart_configure_cr1>:

void usart_configure_cr1(USART_TypeDef* type, uint16_t over8, uint16_t ue, uint16_t m, uint16_t wake, uint16_t pce, uint16_t ps, uint16_t peie, uint16_t txeie, uint16_t tcie, uint16_t rxneie, uint16_t idleie, uint16_t te, uint16_t re, uint16_t rwu, uint16_t sbk)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	4608      	mov	r0, r1
 8000d72:	4611      	mov	r1, r2
 8000d74:	461a      	mov	r2, r3
 8000d76:	4603      	mov	r3, r0
 8000d78:	817b      	strh	r3, [r7, #10]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	813b      	strh	r3, [r7, #8]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	80fb      	strh	r3, [r7, #6]
	usart_cr1_configure_over8(type, over8);
 8000d82:	897b      	ldrh	r3, [r7, #10]
 8000d84:	4619      	mov	r1, r3
 8000d86:	68f8      	ldr	r0, [r7, #12]
 8000d88:	f000 f9d0 	bl	800112c <usart_cr1_configure_over8>
	usart_cr1_configure_ue(type, ue);
 8000d8c:	893b      	ldrh	r3, [r7, #8]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f000 f9e4 	bl	800115e <usart_cr1_configure_ue>
	usart_cr1_configure_m(type, m);
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f000 f9f8 	bl	8001190 <usart_cr1_configure_m>
	usart_cr1_configure_wake(type, wake);
 8000da0:	8b3b      	ldrh	r3, [r7, #24]
 8000da2:	4619      	mov	r1, r3
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f000 fa0c 	bl	80011c2 <usart_cr1_configure_wake>
	usart_cr1_configure_pce(type, pce);
 8000daa:	8bbb      	ldrh	r3, [r7, #28]
 8000dac:	4619      	mov	r1, r3
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	f000 fa20 	bl	80011f4 <usart_cr1_configure_pce>
	usart_cr1_configure_ps(type, ps);
 8000db4:	8c3b      	ldrh	r3, [r7, #32]
 8000db6:	4619      	mov	r1, r3
 8000db8:	68f8      	ldr	r0, [r7, #12]
 8000dba:	f000 fa34 	bl	8001226 <usart_cr1_configure_ps>
	usart_cr1_configure_peie(type, peie);
 8000dbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	68f8      	ldr	r0, [r7, #12]
 8000dc4:	f000 fa48 	bl	8001258 <usart_cr1_configure_peie>
	usart_cr1_configure_txeie(type, txeie);
 8000dc8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	68f8      	ldr	r0, [r7, #12]
 8000dce:	f000 fa5c 	bl	800128a <usart_cr1_configure_txeie>
	usart_cr1_configure_tcie(type, tcie);
 8000dd2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f000 fa70 	bl	80012bc <usart_cr1_configure_tcie>
	usart_cr1_configure_rxneie(type, rxneie);
 8000ddc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000dde:	4619      	mov	r1, r3
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f000 fa84 	bl	80012ee <usart_cr1_configure_rxneie>
	usart_cr1_configure_idleie(type, idleie);
 8000de6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000de8:	4619      	mov	r1, r3
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f000 fa98 	bl	8001320 <usart_cr1_configure_idleie>
	usart_cr1_configure_te(type, te);
 8000df0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000df2:	4619      	mov	r1, r3
 8000df4:	68f8      	ldr	r0, [r7, #12]
 8000df6:	f000 faac 	bl	8001352 <usart_cr1_configure_te>
	usart_cr1_configure_re(type, re);
 8000dfa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	f000 fac0 	bl	8001384 <usart_cr1_configure_re>
	usart_cr1_configure_rwu(type, rwu);
 8000e04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000e08:	4619      	mov	r1, r3
 8000e0a:	68f8      	ldr	r0, [r7, #12]
 8000e0c:	f000 fad3 	bl	80013b6 <usart_cr1_configure_rwu>
	usart_cr1_configure_sbk(type, sbk);
 8000e10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000e14:	4619      	mov	r1, r3
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f000 fae6 	bl	80013e8 <usart_cr1_configure_sbk>
}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <usart_configure_cr2>:

void usart_configure_cr2(USART_TypeDef* type, uint16_t linen, uint16_t stop, uint16_t clken, uint16_t cpol, uint16_t cpha, uint16_t lbcl, uint16_t lbdie, uint16_t lbdl, uint16_t add)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	4611      	mov	r1, r2
 8000e30:	461a      	mov	r2, r3
 8000e32:	4603      	mov	r3, r0
 8000e34:	817b      	strh	r3, [r7, #10]
 8000e36:	460b      	mov	r3, r1
 8000e38:	813b      	strh	r3, [r7, #8]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	80fb      	strh	r3, [r7, #6]
	usart_cr2_configure_linen(type, linen);
 8000e3e:	897b      	ldrh	r3, [r7, #10]
 8000e40:	4619      	mov	r1, r3
 8000e42:	68f8      	ldr	r0, [r7, #12]
 8000e44:	f000 fae8 	bl	8001418 <usart_cr2_configure_linen>
	usart_cr2_configure_stop(type, stop);
 8000e48:	893b      	ldrh	r3, [r7, #8]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f000 fafc 	bl	800144a <usart_cr2_configure_stop>
	usart_cr2_configure_clken(type, clken);
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	4619      	mov	r1, r3
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	f000 fb10 	bl	800147c <usart_cr2_configure_clken>
	usart_cr2_configure_cpol(type, cpol);
 8000e5c:	8b3b      	ldrh	r3, [r7, #24]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	68f8      	ldr	r0, [r7, #12]
 8000e62:	f000 fb24 	bl	80014ae <usart_cr2_configure_cpol>
	usart_cr2_configure_cpha(type, cpha);
 8000e66:	8bbb      	ldrh	r3, [r7, #28]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f000 fb38 	bl	80014e0 <usart_cr2_configure_cpha>
	usart_cr2_configure_lbcl(type, lbcl);
 8000e70:	8c3b      	ldrh	r3, [r7, #32]
 8000e72:	4619      	mov	r1, r3
 8000e74:	68f8      	ldr	r0, [r7, #12]
 8000e76:	f000 fb4c 	bl	8001512 <usart_cr2_configure_lbcl>
	usart_cr2_configure_lbdie(type, lbdie);
 8000e7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	68f8      	ldr	r0, [r7, #12]
 8000e80:	f000 fb60 	bl	8001544 <usart_cr2_configure_lbdie>
	usart_cr2_configure_lbdl(type, lbdl);
 8000e84:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000e86:	4619      	mov	r1, r3
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f000 fb74 	bl	8001576 <usart_cr2_configure_lbdl>
	usart_cr2_configure_add(type, add);
 8000e8e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000e90:	4619      	mov	r1, r3
 8000e92:	68f8      	ldr	r0, [r7, #12]
 8000e94:	f000 fb88 	bl	80015a8 <usart_cr2_configure_add>
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <usart_configure_cr3>:

void usart_configure_cr3(USART_TypeDef* type, uint16_t onebit, uint16_t ctsie, uint16_t ctse, uint16_t rtse, uint16_t dmat, uint16_t dmar, uint16_t scen, uint16_t nack, uint16_t hdsel, uint16_t irlp, uint16_t iren, uint16_t eie)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	4611      	mov	r1, r2
 8000eac:	461a      	mov	r2, r3
 8000eae:	4603      	mov	r3, r0
 8000eb0:	817b      	strh	r3, [r7, #10]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	813b      	strh	r3, [r7, #8]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	80fb      	strh	r3, [r7, #6]
	usart_cr3_configure_onebit(type, onebit);
 8000eba:	897b      	ldrh	r3, [r7, #10]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f000 fb8a 	bl	80015d8 <usart_cr3_configure_onebit>
	usart_cr3_configure_ctsie(type, ctsie);
 8000ec4:	893b      	ldrh	r3, [r7, #8]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f000 fb9e 	bl	800160a <usart_cr3_configure_ctsie>
	usart_cr3_configure_ctse(type, ctse);
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f000 fbb2 	bl	800163c <usart_cr3_configure_ctse>
	usart_cr3_configure_rtse(type, rtse);
 8000ed8:	8b3b      	ldrh	r3, [r7, #24]
 8000eda:	4619      	mov	r1, r3
 8000edc:	68f8      	ldr	r0, [r7, #12]
 8000ede:	f000 fbc6 	bl	800166e <usart_cr3_configure_rtse>
	usart_cr3_configure_dmat(type, dmat);
 8000ee2:	8bbb      	ldrh	r3, [r7, #28]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	68f8      	ldr	r0, [r7, #12]
 8000ee8:	f000 fbda 	bl	80016a0 <usart_cr3_configure_dmat>
	usart_cr3_configure_dmar(type, dmar);
 8000eec:	8c3b      	ldrh	r3, [r7, #32]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f000 fbee 	bl	80016d2 <usart_cr3_configure_dmar>
	usart_cr3_configure_scen(type, scen);
 8000ef6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f000 fc02 	bl	8001704 <usart_cr3_configure_scen>
	usart_cr3_configure_nack(type, nack);
 8000f00:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000f02:	4619      	mov	r1, r3
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f000 fc16 	bl	8001736 <usart_cr3_configure_nack>
	usart_cr3_configure_hdsel(type, hdsel);
 8000f0a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f000 fc2a 	bl	8001768 <usart_cr3_configure_hdsel>
	usart_cr3_configure_irlp(type, irlp);
 8000f14:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000f16:	4619      	mov	r1, r3
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f000 fc3e 	bl	800179a <usart_cr3_configure_irlp>
	usart_cr3_configure_iren(type, iren);
 8000f1e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000f20:	4619      	mov	r1, r3
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f000 fc52 	bl	80017cc <usart_cr3_configure_iren>
	usart_cr3_configure_eie(type, eie);
 8000f28:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f000 fc66 	bl	80017fe <usart_cr3_configure_eie>
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <usart_configure_brr>:

void usart_configure_brr(USART_TypeDef* type, uint16_t div_mantissa, uint16_t div_fraction)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	460b      	mov	r3, r1
 8000f44:	807b      	strh	r3, [r7, #2]
 8000f46:	4613      	mov	r3, r2
 8000f48:	803b      	strh	r3, [r7, #0]
	usart_brr_configure_div_mantissa(type, div_mantissa);
 8000f4a:	887b      	ldrh	r3, [r7, #2]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 fc6d 	bl	800182e <usart_brr_configure_div_mantissa>
	usart_brr_configure_div_fraction(type, div_fraction);
 8000f54:	883b      	ldrh	r3, [r7, #0]
 8000f56:	4619      	mov	r1, r3
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 fc83 	bl	8001864 <usart_brr_configure_div_fraction>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <usart_configure_gtpr>:

void usart_configure_gtpr(USART_TypeDef* type, uint16_t gt, uint16_t psc)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	807b      	strh	r3, [r7, #2]
 8000f72:	4613      	mov	r3, r2
 8000f74:	803b      	strh	r3, [r7, #0]
	usart_gtpr_configure_gt(type, gt);
 8000f76:	887b      	ldrh	r3, [r7, #2]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 fc8a 	bl	8001894 <usart_gtpr_configure_gt>
	usart_gtpr_configure_psc(type, psc);
 8000f80:	883b      	ldrh	r3, [r7, #0]
 8000f82:	4619      	mov	r1, r3
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 fc9e 	bl	80018c6 <usart_gtpr_configure_psc>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <usart_configure>:

void usart_configure(usart_type* usart)
{
 8000f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f96:	b094      	sub	sp, #80	@ 0x50
 8000f98:	af0c      	add	r7, sp, #48	@ 0x30
 8000f9a:	61f8      	str	r0, [r7, #28]
	usart_choose_type(usart->type);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff feb3 	bl	8000d0c <usart_choose_type>
	usart_cr1_configure_ue(usart->usart, 0x0);
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 f8d6 	bl	800115e <usart_cr1_configure_ue>
	usart_configure_brr(usart->usart, usart->div_mantissa, usart->div_fraction);
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	6818      	ldr	r0, [r3, #0]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	f7ff ffb9 	bl	8000f3a <usart_configure_brr>
	usart_configure_cr1(usart->usart, usart->over8, usart->ue, usart->m, usart->wake, usart->pce, usart->ps, usart->peie, usart->txeie, usart->tcie, usart->rxneie, usart->idleie, usart->te, usart->re, usart->rwu, usart->sbk);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61bb      	str	r3, [r7, #24]
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	89d8      	ldrh	r0, [r3, #14]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	8a1c      	ldrh	r4, [r3, #16]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	8a5d      	ldrh	r5, [r3, #18]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	8a9e      	ldrh	r6, [r3, #20]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	8ada      	ldrh	r2, [r3, #22]
 8000ff4:	617a      	str	r2, [r7, #20]
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	8b19      	ldrh	r1, [r3, #24]
 8000ffa:	6139      	str	r1, [r7, #16]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	8b5b      	ldrh	r3, [r3, #26]
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	8b9a      	ldrh	r2, [r3, #28]
 8001006:	60ba      	str	r2, [r7, #8]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	8bd9      	ldrh	r1, [r3, #30]
 800100c:	6079      	str	r1, [r7, #4]
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	8c19      	ldrh	r1, [r3, #32]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800101a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800101c:	920a      	str	r2, [sp, #40]	@ 0x28
 800101e:	9109      	str	r1, [sp, #36]	@ 0x24
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	9108      	str	r1, [sp, #32]
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	9207      	str	r2, [sp, #28]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	9306      	str	r3, [sp, #24]
 800102c:	6939      	ldr	r1, [r7, #16]
 800102e:	9105      	str	r1, [sp, #20]
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	9204      	str	r2, [sp, #16]
 8001034:	9603      	str	r6, [sp, #12]
 8001036:	9502      	str	r5, [sp, #8]
 8001038:	9401      	str	r4, [sp, #4]
 800103a:	9000      	str	r0, [sp, #0]
 800103c:	4643      	mov	r3, r8
 800103e:	4672      	mov	r2, lr
 8001040:	4661      	mov	r1, ip
 8001042:	69b8      	ldr	r0, [r7, #24]
 8001044:	f7ff fe90 	bl	8000d68 <usart_configure_cr1>
	usart_configure_cr2(usart->usart, usart->linen, usart->stop, usart->clken, usart->cpol, usart->cpha, usart->lbcl, usart->lbdie, usart->lbdl, usart->add);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	681e      	ldr	r6, [r3, #0]
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f8b3 c026 	ldrh.w	ip, [r3, #38]	@ 0x26
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	f8b3 e028 	ldrh.w	lr, [r3, #40]	@ 0x28
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f8b3 802a 	ldrh.w	r8, [r3, #42]	@ 0x2a
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001062:	69fa      	ldr	r2, [r7, #28]
 8001064:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 8001066:	69f9      	ldr	r1, [r7, #28]
 8001068:	8e09      	ldrh	r1, [r1, #48]	@ 0x30
 800106a:	69f8      	ldr	r0, [r7, #28]
 800106c:	8e40      	ldrh	r0, [r0, #50]	@ 0x32
 800106e:	69fc      	ldr	r4, [r7, #28]
 8001070:	8ea4      	ldrh	r4, [r4, #52]	@ 0x34
 8001072:	69fd      	ldr	r5, [r7, #28]
 8001074:	8eed      	ldrh	r5, [r5, #54]	@ 0x36
 8001076:	9505      	str	r5, [sp, #20]
 8001078:	9404      	str	r4, [sp, #16]
 800107a:	9003      	str	r0, [sp, #12]
 800107c:	9102      	str	r1, [sp, #8]
 800107e:	9201      	str	r2, [sp, #4]
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	4643      	mov	r3, r8
 8001084:	4672      	mov	r2, lr
 8001086:	4661      	mov	r1, ip
 8001088:	4630      	mov	r0, r6
 800108a:	f7ff fecb 	bl	8000e24 <usart_configure_cr2>
	usart_configure_cr3(usart->usart, usart->onebit, usart->ctsie, usart->ctse, usart->rtse, usart->dmat, usart->dmar, usart->scen, usart->nack, usart->hdsel, usart->irlp, usart->iren, usart->eie);
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f8b3 c038 	ldrh.w	ip, [r3, #56]	@ 0x38
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	f8b3 e03a 	ldrh.w	lr, [r3, #58]	@ 0x3a
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f8b3 803c 	ldrh.w	r8, [r3, #60]	@ 0x3c
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 80010b0:	617a      	str	r2, [r7, #20]
 80010b2:	69f9      	ldr	r1, [r7, #28]
 80010b4:	f8b1 1042 	ldrh.w	r1, [r1, #66]	@ 0x42
 80010b8:	69f8      	ldr	r0, [r7, #28]
 80010ba:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
 80010be:	69fc      	ldr	r4, [r7, #28]
 80010c0:	f8b4 4046 	ldrh.w	r4, [r4, #70]	@ 0x46
 80010c4:	69fd      	ldr	r5, [r7, #28]
 80010c6:	f8b5 5048 	ldrh.w	r5, [r5, #72]	@ 0x48
 80010ca:	69fe      	ldr	r6, [r7, #28]
 80010cc:	f8b6 604a 	ldrh.w	r6, [r6, #74]	@ 0x4a
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 80010d6:	613a      	str	r2, [r7, #16]
 80010d8:	69fa      	ldr	r2, [r7, #28]
 80010da:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 80010de:	9208      	str	r2, [sp, #32]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	9207      	str	r2, [sp, #28]
 80010e4:	9606      	str	r6, [sp, #24]
 80010e6:	9505      	str	r5, [sp, #20]
 80010e8:	9404      	str	r4, [sp, #16]
 80010ea:	9003      	str	r0, [sp, #12]
 80010ec:	9102      	str	r1, [sp, #8]
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	9201      	str	r2, [sp, #4]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	4643      	mov	r3, r8
 80010f6:	4672      	mov	r2, lr
 80010f8:	4661      	mov	r1, ip
 80010fa:	69b8      	ldr	r0, [r7, #24]
 80010fc:	f7ff fed0 	bl	8000ea0 <usart_configure_cr3>
	usart_configure_gtpr(usart->usart, usart->gt, usart->psc);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f8b3 1054 	ldrh.w	r1, [r3, #84]	@ 0x54
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001110:	461a      	mov	r2, r3
 8001112:	f7ff ff28 	bl	8000f66 <usart_configure_gtpr>
	usart_cr1_configure_ue(usart->usart, 0x1);
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2101      	movs	r1, #1
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f81e 	bl	800115e <usart_cr1_configure_ue>
}
 8001122:	bf00      	nop
 8001124:	3720      	adds	r7, #32
 8001126:	46bd      	mov	sp, r7
 8001128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800112c <usart_cr1_configure_over8>:

void usart_cr1_configure_over8(USART_TypeDef* type, uint16_t over8)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << USART_OVER8);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	60da      	str	r2, [r3, #12]
	type->CR1 = type->CR1 | (over8 << USART_OVER8);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	03db      	lsls	r3, r3, #15
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	60da      	str	r2, [r3, #12]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <usart_cr1_configure_ue>:

void usart_cr1_configure_ue(USART_TypeDef* type, uint16_t ue)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	460b      	mov	r3, r1
 8001168:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << USART_UE);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60da      	str	r2, [r3, #12]
	type->CR1 = type->CR1 | (ue << USART_UE);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	035b      	lsls	r3, r3, #13
 800117e:	431a      	orrs	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	60da      	str	r2, [r3, #12]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <usart_cr1_configure_m>:

void usart_cr1_configure_m(USART_TypeDef* type, uint16_t m)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << USART_M);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	60da      	str	r2, [r3, #12]
	type->CR1 = type->CR1 | (m << USART_M);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	031b      	lsls	r3, r3, #12
 80011b0:	431a      	orrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60da      	str	r2, [r3, #12]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <usart_cr1_configure_wake>:

void usart_cr1_configure_wake(USART_TypeDef* type, uint16_t wake)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	460b      	mov	r3, r1
 80011cc:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << USART_WAKE);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60da      	str	r2, [r3, #12]
	type->CR1 = type->CR1 | (wake << USART_WAKE);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	02db      	lsls	r3, r3, #11
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	60da      	str	r2, [r3, #12]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <usart_cr1_configure_pce>:

void usart_cr1_configure_pce(USART_TypeDef* type, uint16_t pce)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << USART_PCE);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	60da      	str	r2, [r3, #12]
	type->CR1 = type->CR1 | (pce << USART_PCE);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	887b      	ldrh	r3, [r7, #2]
 8001212:	029b      	lsls	r3, r3, #10
 8001214:	431a      	orrs	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60da      	str	r2, [r3, #12]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <usart_cr1_configure_ps>:

void usart_cr1_configure_ps(USART_TypeDef* type, uint16_t ps)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << USART_PS);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60da      	str	r2, [r3, #12]
	type->CR1 = type->CR1 | (ps << USART_PS);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	025b      	lsls	r3, r3, #9
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	60da      	str	r2, [r3, #12]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <usart_cr1_configure_peie>:

void usart_cr1_configure_peie(USART_TypeDef* type, uint16_t peie)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << USART_PEIE);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	60da      	str	r2, [r3, #12]
	type->CR1 = type->CR1 | (peie << USART_PEIE);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60da      	str	r2, [r3, #12]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <usart_cr1_configure_txeie>:

void usart_cr1_configure_txeie(USART_TypeDef* type, uint16_t txeie)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << USART_TXEIE);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60da      	str	r2, [r3, #12]
	type->CR1 = type->CR1 | (txeie << USART_TXEIE);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	01db      	lsls	r3, r3, #7
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	60da      	str	r2, [r3, #12]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <usart_cr1_configure_tcie>:

void usart_cr1_configure_tcie(USART_TypeDef* type, uint16_t tcie)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << USART_TCIE);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	60da      	str	r2, [r3, #12]
	type->CR1 = type->CR1 | (tcie << USART_TCIE);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	019b      	lsls	r3, r3, #6
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	60da      	str	r2, [r3, #12]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <usart_cr1_configure_rxneie>:

void usart_cr1_configure_rxneie(USART_TypeDef* type, uint16_t rxneie)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << USART_RXNEIE);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	f023 0220 	bic.w	r2, r3, #32
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	60da      	str	r2, [r3, #12]
	type->CR1 = type->CR1 | (rxneie << USART_RXNEIE);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	015b      	lsls	r3, r3, #5
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	60da      	str	r2, [r3, #12]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <usart_cr1_configure_idleie>:

void usart_cr1_configure_idleie(USART_TypeDef* type, uint16_t idleie)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << USART_IDLEIE);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f023 0210 	bic.w	r2, r3, #16
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	60da      	str	r2, [r3, #12]
	type->CR1 = type->CR1 | (idleie << USART_IDLEIE);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	887b      	ldrh	r3, [r7, #2]
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	60da      	str	r2, [r3, #12]
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <usart_cr1_configure_te>:

void usart_cr1_configure_te(USART_TypeDef* type, uint16_t te)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << USART_TE);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	f023 0208 	bic.w	r2, r3, #8
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	60da      	str	r2, [r3, #12]
	type->CR1 = type->CR1 | (te << USART_TE);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	887b      	ldrh	r3, [r7, #2]
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	60da      	str	r2, [r3, #12]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <usart_cr1_configure_re>:

void usart_cr1_configure_re(USART_TypeDef* type, uint16_t re)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << USART_RE);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	f023 0204 	bic.w	r2, r3, #4
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	60da      	str	r2, [r3, #12]
	type->CR1 = type->CR1 | (re << USART_RE);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	887b      	ldrh	r3, [r7, #2]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60da      	str	r2, [r3, #12]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <usart_cr1_configure_rwu>:

void usart_cr1_configure_rwu(USART_TypeDef* type, uint16_t rwu)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << USART_RWU);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	f023 0202 	bic.w	r2, r3, #2
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	60da      	str	r2, [r3, #12]
	type->CR1 = type->CR1 | (rwu << USART_RWU);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	887b      	ldrh	r3, [r7, #2]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	60da      	str	r2, [r3, #12]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <usart_cr1_configure_sbk>:

void usart_cr1_configure_sbk(USART_TypeDef* type, uint16_t sbk)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
	type->CR1 = type->CR1 & ~(0x0001 << USART_SBK);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	f023 0201 	bic.w	r2, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	60da      	str	r2, [r3, #12]
	type->CR1 = type->CR1 | (sbk << USART_SBK);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	887b      	ldrh	r3, [r7, #2]
 8001406:	431a      	orrs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	60da      	str	r2, [r3, #12]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <usart_cr2_configure_linen>:

void usart_cr2_configure_linen(USART_TypeDef* type, uint16_t linen)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << USART_LINEN);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	611a      	str	r2, [r3, #16]
	type->CR2 = type->CR2 | (linen << USART_LINEN);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691a      	ldr	r2, [r3, #16]
 8001434:	887b      	ldrh	r3, [r7, #2]
 8001436:	039b      	lsls	r3, r3, #14
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	611a      	str	r2, [r3, #16]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <usart_cr2_configure_stop>:

void usart_cr2_configure_stop(USART_TypeDef* type, uint16_t stop)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	460b      	mov	r3, r1
 8001454:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0003 << USART_STOP);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	611a      	str	r2, [r3, #16]
	type->CR2 = type->CR2 | (stop << USART_STOP);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691a      	ldr	r2, [r3, #16]
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	031b      	lsls	r3, r3, #12
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	611a      	str	r2, [r3, #16]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <usart_cr2_configure_clken>:

void usart_cr2_configure_clken(USART_TypeDef* type, uint16_t clken)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << USART_CLKEN);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	611a      	str	r2, [r3, #16]
	type->CR2 = type->CR2 | (clken << USART_CLKEN);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	02db      	lsls	r3, r3, #11
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	611a      	str	r2, [r3, #16]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <usart_cr2_configure_cpol>:

void usart_cr2_configure_cpol(USART_TypeDef* type, uint16_t cpol)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	460b      	mov	r3, r1
 80014b8:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << USART_CPOL);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	611a      	str	r2, [r3, #16]
	type->CR2 = type->CR2 | (cpol << USART_CPOL);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691a      	ldr	r2, [r3, #16]
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	029b      	lsls	r3, r3, #10
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	611a      	str	r2, [r3, #16]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <usart_cr2_configure_cpha>:

void usart_cr2_configure_cpha(USART_TypeDef* type, uint16_t cpha)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << USART_CPHA);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	611a      	str	r2, [r3, #16]
	type->CR2 = type->CR2 | (cpha << USART_CPHA);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	887b      	ldrh	r3, [r7, #2]
 80014fe:	025b      	lsls	r3, r3, #9
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	611a      	str	r2, [r3, #16]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <usart_cr2_configure_lbcl>:

void usart_cr2_configure_lbcl(USART_TypeDef* type, uint16_t lbcl)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	460b      	mov	r3, r1
 800151c:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << USART_LBCL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	611a      	str	r2, [r3, #16]
	type->CR2 = type->CR2 | (lbcl << USART_LBCL);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691a      	ldr	r2, [r3, #16]
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	611a      	str	r2, [r3, #16]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <usart_cr2_configure_lbdie>:

void usart_cr2_configure_lbdie(USART_TypeDef* type, uint16_t lbdie)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << USART_LBDIE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	611a      	str	r2, [r3, #16]
	type->CR2 = type->CR2 | (lbdie << USART_LBDIE);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691a      	ldr	r2, [r3, #16]
 8001560:	887b      	ldrh	r3, [r7, #2]
 8001562:	019b      	lsls	r3, r3, #6
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	611a      	str	r2, [r3, #16]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <usart_cr2_configure_lbdl>:

void usart_cr2_configure_lbdl(USART_TypeDef* type, uint16_t lbdl)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x0001 << USART_LBDL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	f023 0220 	bic.w	r2, r3, #32
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	611a      	str	r2, [r3, #16]
	type->CR2 = type->CR2 | (lbdl << USART_LBDL);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	015b      	lsls	r3, r3, #5
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	611a      	str	r2, [r3, #16]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <usart_cr2_configure_add>:

void usart_cr2_configure_add(USART_TypeDef* type, uint16_t add)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
	type->CR2 = type->CR2 & ~(0x000F << USART_ADD);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	f023 020f 	bic.w	r2, r3, #15
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	611a      	str	r2, [r3, #16]
	type->CR2 = type->CR2 | (add << USART_ADD);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	887b      	ldrh	r3, [r7, #2]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	611a      	str	r2, [r3, #16]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <usart_cr3_configure_onebit>:

void usart_cr3_configure_onebit(USART_TypeDef* type, uint16_t onebit)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
	type->CR3 = type->CR3 & ~(0x0001 << USART_ONEBIT);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	615a      	str	r2, [r3, #20]
	type->CR3 = type->CR3 | (onebit << USART_ONEBIT);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695a      	ldr	r2, [r3, #20]
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	02db      	lsls	r3, r3, #11
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	615a      	str	r2, [r3, #20]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <usart_cr3_configure_ctsie>:

void usart_cr3_configure_ctsie(USART_TypeDef* type, uint16_t ctsie)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	460b      	mov	r3, r1
 8001614:	807b      	strh	r3, [r7, #2]
	type->CR3 = type->CR3 & ~(0x0001 << USART_CTSIE);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	615a      	str	r2, [r3, #20]
	type->CR3 = type->CR3 | (ctsie << USART_CTSIE);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695a      	ldr	r2, [r3, #20]
 8001626:	887b      	ldrh	r3, [r7, #2]
 8001628:	029b      	lsls	r3, r3, #10
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	615a      	str	r2, [r3, #20]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <usart_cr3_configure_ctse>:

void usart_cr3_configure_ctse(USART_TypeDef* type, uint16_t ctse)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
	type->CR3 = type->CR3 & ~(0x0001 << USART_CTSE);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	615a      	str	r2, [r3, #20]
	type->CR3 = type->CR3 | (ctse << USART_CTSE);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	695a      	ldr	r2, [r3, #20]
 8001658:	887b      	ldrh	r3, [r7, #2]
 800165a:	025b      	lsls	r3, r3, #9
 800165c:	431a      	orrs	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	615a      	str	r2, [r3, #20]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <usart_cr3_configure_rtse>:

void usart_cr3_configure_rtse(USART_TypeDef* type, uint16_t rtse)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	460b      	mov	r3, r1
 8001678:	807b      	strh	r3, [r7, #2]
	type->CR3 = type->CR3 & ~(0x0001 << USART_RTSE);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	615a      	str	r2, [r3, #20]
	type->CR3 = type->CR3 | (rtse << USART_RTSE);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	887b      	ldrh	r3, [r7, #2]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	615a      	str	r2, [r3, #20]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <usart_cr3_configure_dmat>:

void usart_cr3_configure_dmat(USART_TypeDef* type, uint16_t dmat)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
	type->CR3 = type->CR3 & ~(0x0001 << USART_DMAT);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	615a      	str	r2, [r3, #20]
	type->CR3 = type->CR3 | (dmat << USART_DMAT);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695a      	ldr	r2, [r3, #20]
 80016bc:	887b      	ldrh	r3, [r7, #2]
 80016be:	01db      	lsls	r3, r3, #7
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	615a      	str	r2, [r3, #20]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <usart_cr3_configure_dmar>:

void usart_cr3_configure_dmar(USART_TypeDef* type, uint16_t dmar)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	460b      	mov	r3, r1
 80016dc:	807b      	strh	r3, [r7, #2]
	type->CR3 = type->CR3 & ~(0x0001 << USART_DMAR);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	615a      	str	r2, [r3, #20]
	type->CR3 = type->CR3 | (dmar << USART_DMAR);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	887b      	ldrh	r3, [r7, #2]
 80016f0:	019b      	lsls	r3, r3, #6
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	615a      	str	r2, [r3, #20]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <usart_cr3_configure_scen>:

void usart_cr3_configure_scen(USART_TypeDef* type, uint16_t scen)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
	type->CR3 = type->CR3 & ~(0x0001 << USART_SCEN);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	f023 0220 	bic.w	r2, r3, #32
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	615a      	str	r2, [r3, #20]
	type->CR3 = type->CR3 | (scen << USART_SCEN);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	695a      	ldr	r2, [r3, #20]
 8001720:	887b      	ldrh	r3, [r7, #2]
 8001722:	015b      	lsls	r3, r3, #5
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	615a      	str	r2, [r3, #20]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <usart_cr3_configure_nack>:

void usart_cr3_configure_nack(USART_TypeDef* type, uint16_t nack)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	460b      	mov	r3, r1
 8001740:	807b      	strh	r3, [r7, #2]
	type->CR3 = type->CR3 & ~(0x0001 << USART_NACK);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f023 0210 	bic.w	r2, r3, #16
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	615a      	str	r2, [r3, #20]
	type->CR3 = type->CR3 | (nack << USART_NACK);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	615a      	str	r2, [r3, #20]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <usart_cr3_configure_hdsel>:

void usart_cr3_configure_hdsel(USART_TypeDef* type, uint16_t hdsel)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]
	type->CR3 = type->CR3 & ~(0x0001 << USART_HDSEL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	f023 0208 	bic.w	r2, r3, #8
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	615a      	str	r2, [r3, #20]
	type->CR3 = type->CR3 | (hdsel << USART_HDSEL);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695a      	ldr	r2, [r3, #20]
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	431a      	orrs	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	615a      	str	r2, [r3, #20]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <usart_cr3_configure_irlp>:

void usart_cr3_configure_irlp(USART_TypeDef* type, uint16_t irlp)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	460b      	mov	r3, r1
 80017a4:	807b      	strh	r3, [r7, #2]
	type->CR3 = type->CR3 & ~(0x0001 << USART_IRLP);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	f023 0204 	bic.w	r2, r3, #4
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	615a      	str	r2, [r3, #20]
	type->CR3 = type->CR3 | (irlp << USART_IRLP);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	887b      	ldrh	r3, [r7, #2]
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	615a      	str	r2, [r3, #20]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <usart_cr3_configure_iren>:

void usart_cr3_configure_iren(USART_TypeDef* type, uint16_t iren)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	807b      	strh	r3, [r7, #2]
	type->CR3 = type->CR3 & ~(0x0001 << USART_IREN);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	f023 0202 	bic.w	r2, r3, #2
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	615a      	str	r2, [r3, #20]
	type->CR3 = type->CR3 | (iren << USART_IREN);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	887b      	ldrh	r3, [r7, #2]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	615a      	str	r2, [r3, #20]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <usart_cr3_configure_eie>:

void usart_cr3_configure_eie(USART_TypeDef* type, uint16_t eie)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	460b      	mov	r3, r1
 8001808:	807b      	strh	r3, [r7, #2]
	type->CR3 = type->CR3 & ~(0x0001 << USART_EIE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f023 0201 	bic.w	r2, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	615a      	str	r2, [r3, #20]
	type->CR3 = type->CR3 | (eie << USART_EIE);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	887b      	ldrh	r3, [r7, #2]
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	615a      	str	r2, [r3, #20]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <usart_brr_configure_div_mantissa>:

void usart_brr_configure_div_mantissa(USART_TypeDef* type, uint16_t div_mantissa)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	460b      	mov	r3, r1
 8001838:	807b      	strh	r3, [r7, #2]
	type->BRR = type->BRR & ~(0x0FFF << USART_DIV_Mantissa);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001842:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6093      	str	r3, [r2, #8]
	type->BRR = type->BRR | (div_mantissa << USART_DIV_Mantissa);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	887b      	ldrh	r3, [r7, #2]
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	609a      	str	r2, [r3, #8]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <usart_brr_configure_div_fraction>:

void usart_brr_configure_div_fraction(USART_TypeDef* type, uint16_t div_fraction)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
	type->BRR = type->BRR & ~(0x000F << USART_DIV_Fraction);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f023 020f 	bic.w	r2, r3, #15
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	609a      	str	r2, [r3, #8]
	type->BRR = type->BRR | (div_fraction << USART_DIV_Fraction);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	887b      	ldrh	r3, [r7, #2]
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	609a      	str	r2, [r3, #8]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <usart_gtpr_configure_gt>:

void usart_gtpr_configure_gt(USART_TypeDef* type, uint16_t gt)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
	type->GTPR = type->GTPR & ~(0x00FF << USART_GT);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	619a      	str	r2, [r3, #24]
	type->GTPR = type->GTPR | (gt << USART_GT);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699a      	ldr	r2, [r3, #24]
 80018b0:	887b      	ldrh	r3, [r7, #2]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	619a      	str	r2, [r3, #24]
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <usart_gtpr_configure_psc>:

void usart_gtpr_configure_psc(USART_TypeDef* type, uint16_t psc)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	460b      	mov	r3, r1
 80018d0:	807b      	strh	r3, [r7, #2]
	type->GTPR = type->GTPR & ~(0x00FF << USART_PSC);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	619a      	str	r2, [r3, #24]
	type->GTPR = type->GTPR | (psc << USART_PSC);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699a      	ldr	r2, [r3, #24]
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	431a      	orrs	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	619a      	str	r2, [r3, #24]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <usart_sr_check_txe>:
{
	return ((type->SR & (0x0001 << USART_LBD)) >> USART_LBD);
}

uint16_t usart_sr_check_txe(USART_TypeDef* type)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
	return ((type->SR & (0x0001 << USART_TXE)) >> USART_TXE);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	09db      	lsrs	r3, r3, #7
 8001904:	b29b      	uxth	r3, r3
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	b29b      	uxth	r3, r3
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <usart_sr_check_rxne>:
{
	return ((type->SR & (0x0001 << USART_TC)) >> USART_TC);
}

uint16_t usart_sr_check_rxne(USART_TypeDef* type)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	return ((type->SR & (0x0001 << USART_RXNE)) >> USART_RXNE);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	095b      	lsrs	r3, r3, #5
 8001926:	b29b      	uxth	r3, r3
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	b29b      	uxth	r3, r3
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <usart_dr_write>:
}

//*****************************************************USART TRANSFER FUNCTIONS***************************************

void usart_dr_write(USART_TypeDef* type, uint16_t data)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	807b      	strh	r3, [r7, #2]
	type->DR = data;
 8001946:	887a      	ldrh	r2, [r7, #2]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	605a      	str	r2, [r3, #4]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <usart_dr_read>:

uint16_t usart_dr_read(USART_TypeDef* type)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	return type->DR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	b29b      	uxth	r3, r3
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <usart_transmit>:

void usart_transmit(USART_TypeDef* type, uint16_t data)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	807b      	strh	r3, [r7, #2]
	while(usart_sr_check_txe(type) == USART_TXE_NO_TRANSFER);
 800197e:	bf00      	nop
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ffb8 	bl	80018f6 <usart_sr_check_txe>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f9      	beq.n	8001980 <usart_transmit+0xe>
	usart_dr_write(type, data);
 800198c:	887b      	ldrh	r3, [r7, #2]
 800198e:	4619      	mov	r1, r3
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ffd2 	bl	800193a <usart_dr_write>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <usart_receive>:

uint16_t usart_receive(USART_TypeDef* type)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
	while(usart_sr_check_rxne(type) == USART_RXNE_NO_RECEIVED);
 80019a6:	bf00      	nop
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ffb5 	bl	8001918 <usart_sr_check_rxne>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f9      	beq.n	80019a8 <usart_receive+0xa>
	return usart_dr_read(type);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ffcf 	bl	8001958 <usart_dr_read>
 80019ba:	4603      	mov	r3, r0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <usart_enable_interrupt>:

//*********************************************USART INTERRUPT HANDLING***********************************************

void usart_enable_interrupt(IRQn_Type irq)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
	NVIC_EnableIRQ(irq);
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f97c 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <__libc_init_array>:
 80019e0:	b570      	push	{r4, r5, r6, lr}
 80019e2:	4d0d      	ldr	r5, [pc, #52]	@ (8001a18 <__libc_init_array+0x38>)
 80019e4:	4c0d      	ldr	r4, [pc, #52]	@ (8001a1c <__libc_init_array+0x3c>)
 80019e6:	1b64      	subs	r4, r4, r5
 80019e8:	10a4      	asrs	r4, r4, #2
 80019ea:	2600      	movs	r6, #0
 80019ec:	42a6      	cmp	r6, r4
 80019ee:	d109      	bne.n	8001a04 <__libc_init_array+0x24>
 80019f0:	4d0b      	ldr	r5, [pc, #44]	@ (8001a20 <__libc_init_array+0x40>)
 80019f2:	4c0c      	ldr	r4, [pc, #48]	@ (8001a24 <__libc_init_array+0x44>)
 80019f4:	f000 f818 	bl	8001a28 <_init>
 80019f8:	1b64      	subs	r4, r4, r5
 80019fa:	10a4      	asrs	r4, r4, #2
 80019fc:	2600      	movs	r6, #0
 80019fe:	42a6      	cmp	r6, r4
 8001a00:	d105      	bne.n	8001a0e <__libc_init_array+0x2e>
 8001a02:	bd70      	pop	{r4, r5, r6, pc}
 8001a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a08:	4798      	blx	r3
 8001a0a:	3601      	adds	r6, #1
 8001a0c:	e7ee      	b.n	80019ec <__libc_init_array+0xc>
 8001a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a12:	4798      	blx	r3
 8001a14:	3601      	adds	r6, #1
 8001a16:	e7f2      	b.n	80019fe <__libc_init_array+0x1e>
 8001a18:	08001a40 	.word	0x08001a40
 8001a1c:	08001a40 	.word	0x08001a40
 8001a20:	08001a40 	.word	0x08001a40
 8001a24:	08001a44 	.word	0x08001a44

08001a28 <_init>:
 8001a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a2a:	bf00      	nop
 8001a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a2e:	bc08      	pop	{r3}
 8001a30:	469e      	mov	lr, r3
 8001a32:	4770      	bx	lr

08001a34 <_fini>:
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	bf00      	nop
 8001a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a3a:	bc08      	pop	{r3}
 8001a3c:	469e      	mov	lr, r3
 8001a3e:	4770      	bx	lr
