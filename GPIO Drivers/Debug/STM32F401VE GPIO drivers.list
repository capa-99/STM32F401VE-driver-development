
STM32F401VE GPIO drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007dc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000970  08000970  00001970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000984  08000984  0000198c  2**0
                  CONTENTS
  4 .ARM          00000000  08000984  08000984  0000198c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000984  0800098c  0000198c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000984  08000984  00001984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000988  08000988  00001988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000198c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800098c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800098c  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015e5  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005da  00000000  00000000  00002fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  00003580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000010b  00000000  00000000  00003700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dee5  00000000  00000000  0000380b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b34  00000000  00000000  000116f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000505ed  00000000  00000000  00013224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00063811  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000049c  00000000  00000000  00063854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00063cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000958 	.word	0x08000958

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000958 	.word	0x08000958

080001d4 <disp_initialize>:
uint32_t disp_current_digit;

//*********************************************DISPLAY FUNCTIONS***************************************************

void disp_initialize()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af00      	add	r7, sp, #0
	RCC->AHB1ENR = RCC->AHB1ENR | 0x8;
 80001da:	4b20      	ldr	r3, [pc, #128]	@ (800025c <disp_initialize+0x88>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001de:	4a1f      	ldr	r2, [pc, #124]	@ (800025c <disp_initialize+0x88>)
 80001e0:	f043 0308 	orr.w	r3, r3, #8
 80001e4:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR = RCC->AHB1ENR | 0x1;
 80001e6:	4b1d      	ldr	r3, [pc, #116]	@ (800025c <disp_initialize+0x88>)
 80001e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001ea:	4a1c      	ldr	r2, [pc, #112]	@ (800025c <disp_initialize+0x88>)
 80001ec:	f043 0301 	orr.w	r3, r3, #1
 80001f0:	6313      	str	r3, [r2, #48]	@ 0x30
	gpio_pin port;
	port.mode = GPIO_PIN_MODE_OUTPUT;
 80001f2:	2301      	movs	r3, #1
 80001f4:	607b      	str	r3, [r7, #4]
	port.output_type = GPIO_PIN_OUTPUT_TYPE_PUSH_PULL;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60bb      	str	r3, [r7, #8]
	port.output_speed = GPIO_PIN_OUTPUT_SPEED_MEDIUM;
 80001fa:	2301      	movs	r3, #1
 80001fc:	60fb      	str	r3, [r7, #12]
	port.pull = GPIO_PIN_PULL_NONE;
 80001fe:	2300      	movs	r3, #0
 8000200:	613b      	str	r3, [r7, #16]
	port.alternate_function = GPIO_PIN_ALTERNATE_FUNCTION_AF0_SYSTEM;
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 8; i++)
 8000206:	2300      	movs	r3, #0
 8000208:	61fb      	str	r3, [r7, #28]
 800020a:	e009      	b.n	8000220 <disp_initialize+0x4c>
	{
		port.pin = i;
 800020c:	69fb      	ldr	r3, [r7, #28]
 800020e:	603b      	str	r3, [r7, #0]
		gpio_init(GPIOD, &port);
 8000210:	463b      	mov	r3, r7
 8000212:	4619      	mov	r1, r3
 8000214:	4812      	ldr	r0, [pc, #72]	@ (8000260 <disp_initialize+0x8c>)
 8000216:	f000 f959 	bl	80004cc <gpio_init>
	for(int i = 0; i < 8; i++)
 800021a:	69fb      	ldr	r3, [r7, #28]
 800021c:	3301      	adds	r3, #1
 800021e:	61fb      	str	r3, [r7, #28]
 8000220:	69fb      	ldr	r3, [r7, #28]
 8000222:	2b07      	cmp	r3, #7
 8000224:	ddf2      	ble.n	800020c <disp_initialize+0x38>
	}
	port.mode = GPIO_PIN_MODE_INPUT;
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 4; i++)
 800022a:	2300      	movs	r3, #0
 800022c:	61bb      	str	r3, [r7, #24]
 800022e:	e009      	b.n	8000244 <disp_initialize+0x70>
	{
		port.pin = i;
 8000230:	69bb      	ldr	r3, [r7, #24]
 8000232:	603b      	str	r3, [r7, #0]
		gpio_init(GPIOA, &port);
 8000234:	463b      	mov	r3, r7
 8000236:	4619      	mov	r1, r3
 8000238:	480a      	ldr	r0, [pc, #40]	@ (8000264 <disp_initialize+0x90>)
 800023a:	f000 f947 	bl	80004cc <gpio_init>
	for(int i = 0; i < 4; i++)
 800023e:	69bb      	ldr	r3, [r7, #24]
 8000240:	3301      	adds	r3, #1
 8000242:	61bb      	str	r3, [r7, #24]
 8000244:	69bb      	ldr	r3, [r7, #24]
 8000246:	2b03      	cmp	r3, #3
 8000248:	ddf2      	ble.n	8000230 <disp_initialize+0x5c>
	}
	disp_configure_interrupts();
 800024a:	f000 f80f 	bl	800026c <disp_configure_interrupts>
	disp_current_digit = 0;
 800024e:	4b06      	ldr	r3, [pc, #24]	@ (8000268 <disp_initialize+0x94>)
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
}
 8000254:	bf00      	nop
 8000256:	3720      	adds	r7, #32
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40023800 	.word	0x40023800
 8000260:	40020c00 	.word	0x40020c00
 8000264:	40020000 	.word	0x40020000
 8000268:	2000001c 	.word	0x2000001c

0800026c <disp_configure_interrupts>:

void disp_configure_interrupts()
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	gpio_configure_interrupt(DISP_MODE_AUTO, GPIO_FALLING_EDGE);
 8000270:	2101      	movs	r1, #1
 8000272:	2000      	movs	r0, #0
 8000274:	f000 fa8a 	bl	800078c <gpio_configure_interrupt>
	gpio_enable_interrupt(DISP_MODE_AUTO, EXTI0_IRQn);
 8000278:	2106      	movs	r1, #6
 800027a:	2000      	movs	r0, #0
 800027c:	f000 fafa 	bl	8000874 <gpio_enable_interrupt>
	gpio_configure_interrupt(DISP_MODE_UP, GPIO_FALLING_EDGE);
 8000280:	2101      	movs	r1, #1
 8000282:	2001      	movs	r0, #1
 8000284:	f000 fa82 	bl	800078c <gpio_configure_interrupt>
	gpio_enable_interrupt(DISP_MODE_UP, EXTI1_IRQn);
 8000288:	2107      	movs	r1, #7
 800028a:	2001      	movs	r0, #1
 800028c:	f000 faf2 	bl	8000874 <gpio_enable_interrupt>
	gpio_configure_interrupt(DISP_MODE_DOWN, GPIO_FALLING_EDGE);
 8000290:	2101      	movs	r1, #1
 8000292:	2002      	movs	r0, #2
 8000294:	f000 fa7a 	bl	800078c <gpio_configure_interrupt>
	gpio_enable_interrupt(DISP_MODE_DOWN, EXTI2_IRQn);
 8000298:	2108      	movs	r1, #8
 800029a:	2002      	movs	r0, #2
 800029c:	f000 faea 	bl	8000874 <gpio_enable_interrupt>
	gpio_configure_interrupt(DISP_MODE_RESET, GPIO_FALLING_EDGE);
 80002a0:	2101      	movs	r1, #1
 80002a2:	2003      	movs	r0, #3
 80002a4:	f000 fa72 	bl	800078c <gpio_configure_interrupt>
	gpio_enable_interrupt(DISP_MODE_RESET, EXTI3_IRQn);
 80002a8:	2109      	movs	r1, #9
 80002aa:	2003      	movs	r0, #3
 80002ac:	f000 fae2 	bl	8000874 <gpio_enable_interrupt>
}
 80002b0:	bf00      	nop
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	gpio_clear_interrupt(DISP_MODE_AUTO);
 80002b8:	2000      	movs	r0, #0
 80002ba:	f000 fb05 	bl	80008c8 <gpio_clear_interrupt>
	disp_auto_count();
 80002be:	f000 f831 	bl	8000324 <disp_auto_count>
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80002c6:	b580      	push	{r7, lr}
 80002c8:	af00      	add	r7, sp, #0
	gpio_clear_interrupt(DISP_MODE_UP);
 80002ca:	2001      	movs	r0, #1
 80002cc:	f000 fafc 	bl	80008c8 <gpio_clear_interrupt>
	disp_count_up();
 80002d0:	f000 f856 	bl	8000380 <disp_count_up>
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	gpio_clear_interrupt(DISP_MODE_DOWN);
 80002dc:	2002      	movs	r0, #2
 80002de:	f000 faf3 	bl	80008c8 <gpio_clear_interrupt>
	disp_count_down();
 80002e2:	f000 f865 	bl	80003b0 <disp_count_down>
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}

080002ea <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80002ea:	b580      	push	{r7, lr}
 80002ec:	af00      	add	r7, sp, #0
	gpio_clear_interrupt(DISP_MODE_RESET);
 80002ee:	2003      	movs	r0, #3
 80002f0:	f000 faea 	bl	80008c8 <gpio_clear_interrupt>
	disp_reset();
 80002f4:	f000 f874 	bl	80003e0 <disp_reset>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}

080002fc <disp_show_number>:

void disp_show_number(int n)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	gpio_write_to_port(GPIOD, DISP_DIGITS[n]);
 8000304:	4a05      	ldr	r2, [pc, #20]	@ (800031c <disp_show_number+0x20>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800030c:	4619      	mov	r1, r3
 800030e:	4804      	ldr	r0, [pc, #16]	@ (8000320 <disp_show_number+0x24>)
 8000310:	f000 fa18 	bl	8000744 <gpio_write_to_port>
}
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	08000970 	.word	0x08000970
 8000320:	40020c00 	.word	0x40020c00

08000324 <disp_auto_count>:

void disp_auto_count()
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
	while(1)
	{
		for(int i = 0; i < 10; i++)
 800032a:	2300      	movs	r3, #0
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	e01b      	b.n	8000368 <disp_auto_count+0x44>
		{
			disp_show_number(i);
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f7ff ffe3 	bl	80002fc <disp_show_number>
			for(int j = 0; j < 10000; j++)
 8000336:	2300      	movs	r3, #0
 8000338:	603b      	str	r3, [r7, #0]
 800033a:	e00d      	b.n	8000358 <disp_auto_count+0x34>
			{
				if(gpio_read_from_pin(GPIOA, DISP_MODE_AUTO) != 0)
 800033c:	2100      	movs	r1, #0
 800033e:	480e      	ldr	r0, [pc, #56]	@ (8000378 <disp_auto_count+0x54>)
 8000340:	f000 f9c9 	bl	80006d6 <gpio_read_from_pin>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d003      	beq.n	8000352 <disp_auto_count+0x2e>
				{
					disp_current_digit = i;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a0b      	ldr	r2, [pc, #44]	@ (800037c <disp_auto_count+0x58>)
 800034e:	6013      	str	r3, [r2, #0]
					return;
 8000350:	e00e      	b.n	8000370 <disp_auto_count+0x4c>
			for(int j = 0; j < 10000; j++)
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800035e:	4293      	cmp	r3, r2
 8000360:	ddec      	ble.n	800033c <disp_auto_count+0x18>
		for(int i = 0; i < 10; i++)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	3301      	adds	r3, #1
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b09      	cmp	r3, #9
 800036c:	dde0      	ble.n	8000330 <disp_auto_count+0xc>
 800036e:	e7dc      	b.n	800032a <disp_auto_count+0x6>
				}
			}
		}
	}
}
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40020000 	.word	0x40020000
 800037c:	2000001c 	.word	0x2000001c

08000380 <disp_count_up>:

void disp_count_up()
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	if(disp_current_digit == 9)
 8000384:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <disp_count_up+0x2c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b09      	cmp	r3, #9
 800038a:	d102      	bne.n	8000392 <disp_count_up+0x12>
	{
		disp_current_digit = 8;
 800038c:	4b07      	ldr	r3, [pc, #28]	@ (80003ac <disp_count_up+0x2c>)
 800038e:	2208      	movs	r2, #8
 8000390:	601a      	str	r2, [r3, #0]
	}
	disp_current_digit++;
 8000392:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <disp_count_up+0x2c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	3301      	adds	r3, #1
 8000398:	4a04      	ldr	r2, [pc, #16]	@ (80003ac <disp_count_up+0x2c>)
 800039a:	6013      	str	r3, [r2, #0]
	disp_show_number(disp_current_digit);
 800039c:	4b03      	ldr	r3, [pc, #12]	@ (80003ac <disp_count_up+0x2c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff ffab 	bl	80002fc <disp_show_number>
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	2000001c 	.word	0x2000001c

080003b0 <disp_count_down>:

void disp_count_down()
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	if(disp_current_digit == 0)
 80003b4:	4b09      	ldr	r3, [pc, #36]	@ (80003dc <disp_count_down+0x2c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d102      	bne.n	80003c2 <disp_count_down+0x12>
	{
		disp_current_digit = 1;
 80003bc:	4b07      	ldr	r3, [pc, #28]	@ (80003dc <disp_count_down+0x2c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
	}
	disp_current_digit--;
 80003c2:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <disp_count_down+0x2c>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	4a04      	ldr	r2, [pc, #16]	@ (80003dc <disp_count_down+0x2c>)
 80003ca:	6013      	str	r3, [r2, #0]
	disp_show_number(disp_current_digit);
 80003cc:	4b03      	ldr	r3, [pc, #12]	@ (80003dc <disp_count_down+0x2c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ff93 	bl	80002fc <disp_show_number>
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	2000001c 	.word	0x2000001c

080003e0 <disp_reset>:

void disp_reset()
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	disp_show_number(0);
 80003e4:	2000      	movs	r0, #0
 80003e6:	f7ff ff89 	bl	80002fc <disp_show_number>
	disp_current_digit = 0;
 80003ea:	4b02      	ldr	r3, [pc, #8]	@ (80003f4 <disp_reset+0x14>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	2000001c 	.word	0x2000001c

080003f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f804 	bl	8000408 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  disp_initialize();
 8000400:	f7ff fee8 	bl	80001d4 <disp_initialize>

  while (1)
 8000404:	bf00      	nop
 8000406:	e7fd      	b.n	8000404 <main+0xc>

08000408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }*/
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
	...

08000418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800041c:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <SystemInit+0x20>)
 800041e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000422:	4a05      	ldr	r2, [pc, #20]	@ (8000438 <SystemInit+0x20>)
 8000424:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000428:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	e000ed00 	.word	0xe000ed00

0800043c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800043c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000474 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000440:	f7ff ffea 	bl	8000418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000444:	480c      	ldr	r0, [pc, #48]	@ (8000478 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000446:	490d      	ldr	r1, [pc, #52]	@ (800047c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000448:	4a0d      	ldr	r2, [pc, #52]	@ (8000480 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800044a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800044c:	e002      	b.n	8000454 <LoopCopyDataInit>

0800044e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000452:	3304      	adds	r3, #4

08000454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000458:	d3f9      	bcc.n	800044e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800045a:	4a0a      	ldr	r2, [pc, #40]	@ (8000484 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800045c:	4c0a      	ldr	r4, [pc, #40]	@ (8000488 <LoopFillZerobss+0x22>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000460:	e001      	b.n	8000466 <LoopFillZerobss>

08000462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000464:	3204      	adds	r2, #4

08000466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000468:	d3fb      	bcc.n	8000462 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800046a:	f000 fa51 	bl	8000910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800046e:	f7ff ffc3 	bl	80003f8 <main>
  bx  lr    
 8000472:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000474:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800047c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000480:	0800098c 	.word	0x0800098c
  ldr r2, =_sbss
 8000484:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000488:	20000020 	.word	0x20000020

0800048c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800048c:	e7fe      	b.n	800048c <ADC_IRQHandler>
	...

08000490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800049a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	db0b      	blt.n	80004ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	f003 021f 	and.w	r2, r3, #31
 80004a8:	4907      	ldr	r1, [pc, #28]	@ (80004c8 <__NVIC_EnableIRQ+0x38>)
 80004aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ae:	095b      	lsrs	r3, r3, #5
 80004b0:	2001      	movs	r0, #1
 80004b2:	fa00 f202 	lsl.w	r2, r0, r2
 80004b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	e000e100 	.word	0xe000e100

080004cc <gpio_init>:
}

//**************************************GPIO PIN CONFIGURATION FUNCTIONS****************************************

int gpio_init(GPIO_TypeDef* port, gpio_pin* pin)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
	if(gpio_configure_pin_mode(port, pin->pin, pin->mode) != 0)
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	b299      	uxth	r1, r3
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	461a      	mov	r2, r3
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f000 f847 	bl	8000576 <gpio_configure_pin_mode>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d002      	beq.n	80004f4 <gpio_init+0x28>
	{
		return -1;
 80004ee:	f04f 33ff 	mov.w	r3, #4294967295
 80004f2:	e03c      	b.n	800056e <gpio_init+0xa2>
	}
	if(gpio_configure_pin_output_type(port, pin->pin, pin->output_type) != 0)
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	b299      	uxth	r1, r3
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	461a      	mov	r2, r3
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f000 f85b 	bl	80005bc <gpio_configure_pin_output_type>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d002      	beq.n	8000512 <gpio_init+0x46>
	{
		return -1;
 800050c:	f04f 33ff 	mov.w	r3, #4294967295
 8000510:	e02d      	b.n	800056e <gpio_init+0xa2>
	}
	if(gpio_configure_pin_output_speed(port, pin->pin, pin->output_speed) != 0)
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	b299      	uxth	r1, r3
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	461a      	mov	r2, r3
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f000 f86d 	bl	80005fe <gpio_configure_pin_output_speed>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <gpio_init+0x64>
	{
		return -1;
 800052a:	f04f 33ff 	mov.w	r3, #4294967295
 800052e:	e01e      	b.n	800056e <gpio_init+0xa2>
	}
	if(gpio_configure_pin_pull(port, pin->pin, pin->pull) != 0)
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	b299      	uxth	r1, r3
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	691b      	ldr	r3, [r3, #16]
 800053a:	461a      	mov	r2, r3
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 f881 	bl	8000644 <gpio_configure_pin_pull>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d002      	beq.n	800054e <gpio_init+0x82>
	{
		return -1;
 8000548:	f04f 33ff 	mov.w	r3, #4294967295
 800054c:	e00f      	b.n	800056e <gpio_init+0xa2>
	}
	if(gpio_configure_pin_alternate_function(port, pin->pin, pin->alternate_function) != 0)
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	b299      	uxth	r1, r3
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	461a      	mov	r2, r3
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f000 f895 	bl	800068a <gpio_configure_pin_alternate_function>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d002      	beq.n	800056c <gpio_init+0xa0>
	{
		return -1;
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
 800056a:	e000      	b.n	800056e <gpio_init+0xa2>
	}
	return 0;
 800056c:	2300      	movs	r3, #0
}
 800056e:	4618      	mov	r0, r3
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <gpio_configure_pin_mode>:

int gpio_configure_pin_mode(GPIO_TypeDef* port, uint16_t pin, uint32_t mode)
{
 8000576:	b480      	push	{r7}
 8000578:	b085      	sub	sp, #20
 800057a:	af00      	add	r7, sp, #0
 800057c:	60f8      	str	r0, [r7, #12]
 800057e:	460b      	mov	r3, r1
 8000580:	607a      	str	r2, [r7, #4]
 8000582:	817b      	strh	r3, [r7, #10]
	port->MODER = port->MODER & ~(0x00000003 << (pin*2));
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	897a      	ldrh	r2, [r7, #10]
 800058a:	0052      	lsls	r2, r2, #1
 800058c:	2103      	movs	r1, #3
 800058e:	fa01 f202 	lsl.w	r2, r1, r2
 8000592:	43d2      	mvns	r2, r2
 8000594:	401a      	ands	r2, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	601a      	str	r2, [r3, #0]
	port->MODER = port->MODER | (mode << (pin*2));
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	897b      	ldrh	r3, [r7, #10]
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	fa01 f303 	lsl.w	r3, r1, r3
 80005a8:	431a      	orrs	r2, r3
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	601a      	str	r2, [r3, #0]

	return 0;
 80005ae:	2300      	movs	r3, #0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <gpio_configure_pin_output_type>:

int gpio_configure_pin_output_type(GPIO_TypeDef* port, uint16_t pin, uint32_t type)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	460b      	mov	r3, r1
 80005c6:	607a      	str	r2, [r7, #4]
 80005c8:	817b      	strh	r3, [r7, #10]
	port->OTYPER = port->OTYPER & ~(0x00000001 << pin);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	897a      	ldrh	r2, [r7, #10]
 80005d0:	2101      	movs	r1, #1
 80005d2:	fa01 f202 	lsl.w	r2, r1, r2
 80005d6:	43d2      	mvns	r2, r2
 80005d8:	401a      	ands	r2, r3
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	605a      	str	r2, [r3, #4]
	port->OTYPER = port->OTYPER | (type << pin);
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	685a      	ldr	r2, [r3, #4]
 80005e2:	897b      	ldrh	r3, [r7, #10]
 80005e4:	6879      	ldr	r1, [r7, #4]
 80005e6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ea:	431a      	orrs	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	605a      	str	r2, [r3, #4]

	return 0;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <gpio_configure_pin_output_speed>:

int gpio_configure_pin_output_speed(GPIO_TypeDef* port, uint16_t pin, uint32_t speed)
{
 80005fe:	b480      	push	{r7}
 8000600:	b085      	sub	sp, #20
 8000602:	af00      	add	r7, sp, #0
 8000604:	60f8      	str	r0, [r7, #12]
 8000606:	460b      	mov	r3, r1
 8000608:	607a      	str	r2, [r7, #4]
 800060a:	817b      	strh	r3, [r7, #10]
	port->OSPEEDR = port->OSPEEDR & ~(0x00000003 << (pin*2));
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	897a      	ldrh	r2, [r7, #10]
 8000612:	0052      	lsls	r2, r2, #1
 8000614:	2103      	movs	r1, #3
 8000616:	fa01 f202 	lsl.w	r2, r1, r2
 800061a:	43d2      	mvns	r2, r2
 800061c:	401a      	ands	r2, r3
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	609a      	str	r2, [r3, #8]
	port->OSPEEDR = port->OSPEEDR | (speed << (pin*2));
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	689a      	ldr	r2, [r3, #8]
 8000626:	897b      	ldrh	r3, [r7, #10]
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	fa01 f303 	lsl.w	r3, r1, r3
 8000630:	431a      	orrs	r2, r3
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	609a      	str	r2, [r3, #8]

	return 0;
 8000636:	2300      	movs	r3, #0
}
 8000638:	4618      	mov	r0, r3
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <gpio_configure_pin_pull>:

int gpio_configure_pin_pull(GPIO_TypeDef* port, uint16_t pin, uint32_t pull)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	460b      	mov	r3, r1
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	817b      	strh	r3, [r7, #10]
	port->PUPDR = port->PUPDR & ~(0x00000003 << (pin*2));
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	897a      	ldrh	r2, [r7, #10]
 8000658:	0052      	lsls	r2, r2, #1
 800065a:	2103      	movs	r1, #3
 800065c:	fa01 f202 	lsl.w	r2, r1, r2
 8000660:	43d2      	mvns	r2, r2
 8000662:	401a      	ands	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	60da      	str	r2, [r3, #12]
	port->PUPDR = port->PUPDR | (pull << (pin*2));
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	68da      	ldr	r2, [r3, #12]
 800066c:	897b      	ldrh	r3, [r7, #10]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	6879      	ldr	r1, [r7, #4]
 8000672:	fa01 f303 	lsl.w	r3, r1, r3
 8000676:	431a      	orrs	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	60da      	str	r2, [r3, #12]

	return 0;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <gpio_configure_pin_alternate_function>:

int gpio_configure_pin_alternate_function(GPIO_TypeDef* port, uint16_t pin, uint32_t alt_function)
{
 800068a:	b480      	push	{r7}
 800068c:	b085      	sub	sp, #20
 800068e:	af00      	add	r7, sp, #0
 8000690:	60f8      	str	r0, [r7, #12]
 8000692:	460b      	mov	r3, r1
 8000694:	607a      	str	r2, [r7, #4]
 8000696:	817b      	strh	r3, [r7, #10]
	if(pin < 8)
 8000698:	897b      	ldrh	r3, [r7, #10]
 800069a:	2b07      	cmp	r3, #7
 800069c:	d814      	bhi.n	80006c8 <gpio_configure_pin_alternate_function+0x3e>
	{
		port->AFR[0] = port->AFR[0] & ~(0x0000000F << (pin*4));
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	6a1b      	ldr	r3, [r3, #32]
 80006a2:	897a      	ldrh	r2, [r7, #10]
 80006a4:	0092      	lsls	r2, r2, #2
 80006a6:	210f      	movs	r1, #15
 80006a8:	fa01 f202 	lsl.w	r2, r1, r2
 80006ac:	43d2      	mvns	r2, r2
 80006ae:	401a      	ands	r2, r3
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	621a      	str	r2, [r3, #32]
		port->AFR[0] = port->AFR[0] | (alt_function << (pin*4));
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	6a1a      	ldr	r2, [r3, #32]
 80006b8:	897b      	ldrh	r3, [r7, #10]
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	6879      	ldr	r1, [r7, #4]
 80006be:	fa01 f303 	lsl.w	r3, r1, r3
 80006c2:	431a      	orrs	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	621a      	str	r2, [r3, #32]
	{
		//port->AFR[1] = port-AFR[1] & ~(0x0000000F << (pin*4));
		//port->AFR[1] = port->AFR[1] | (alt_function << (pin*4));
	}

	return 0;
 80006c8:	2300      	movs	r3, #0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <gpio_read_from_pin>:

//***********************************GPIO READING AND WRITING FUNCTIONS*************************************

uint8_t gpio_read_from_pin(GPIO_TypeDef* port, uint16_t pin)
{
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	460b      	mov	r3, r1
 80006e0:	807b      	strh	r3, [r7, #2]
	return ((port->IDR >> pin) & 0x1);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	691a      	ldr	r2, [r3, #16]
 80006e6:	887b      	ldrh	r3, [r7, #2]
 80006e8:	fa22 f303 	lsr.w	r3, r2, r3
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	b2db      	uxtb	r3, r3
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <gpio_write_to_pin>:

int gpio_write_to_pin(GPIO_TypeDef* port, uint16_t pin, uint8_t value)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	807b      	strh	r3, [r7, #2]
 800070c:	4613      	mov	r3, r2
 800070e:	707b      	strb	r3, [r7, #1]
	port->ODR = port->ODR & ~(0x00000001 << pin);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	887a      	ldrh	r2, [r7, #2]
 8000716:	2101      	movs	r1, #1
 8000718:	fa01 f202 	lsl.w	r2, r1, r2
 800071c:	43d2      	mvns	r2, r2
 800071e:	401a      	ands	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	615a      	str	r2, [r3, #20]
	port->ODR = port->ODR | (value << pin);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	7879      	ldrb	r1, [r7, #1]
 800072a:	887a      	ldrh	r2, [r7, #2]
 800072c:	fa01 f202 	lsl.w	r2, r1, r2
 8000730:	431a      	orrs	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	615a      	str	r2, [r3, #20]

	return 0;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <gpio_write_to_port>:
	}
	return value;
}

int gpio_write_to_port(GPIO_TypeDef* port, uint16_t value)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	for(int i = 0; i < 15; i++)
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	e011      	b.n	800077a <gpio_write_to_port+0x36>
	{
		tmp = value % 2;
 8000756:	887b      	ldrh	r3, [r7, #2]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	817b      	strh	r3, [r7, #10]
		gpio_write_to_pin(port, i, tmp);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	b29b      	uxth	r3, r3
 8000762:	897a      	ldrh	r2, [r7, #10]
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	4619      	mov	r1, r3
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ffc9 	bl	8000700 <gpio_write_to_pin>
		value = value >> 1;
 800076e:	887b      	ldrh	r3, [r7, #2]
 8000770:	085b      	lsrs	r3, r3, #1
 8000772:	807b      	strh	r3, [r7, #2]
	for(int i = 0; i < 15; i++)
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3301      	adds	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2b0e      	cmp	r3, #14
 800077e:	ddea      	ble.n	8000756 <gpio_write_to_port+0x12>
	}

	return 0;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <gpio_configure_interrupt>:

//*************************************GPIO INTERRUPT HANDLING FUNTIONS***************************************

int gpio_configure_interrupt(uint16_t pin, uint32_t edge)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	6039      	str	r1, [r7, #0]
 8000796:	80fb      	strh	r3, [r7, #6]
	if(edge == GPIO_RISING_EDGE)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d116      	bne.n	80007cc <gpio_configure_interrupt+0x40>
	{
		EXTI->RTSR = EXTI->RTSR & ~(0x00000001 << pin);
 800079e:	4b34      	ldr	r3, [pc, #208]	@ (8000870 <gpio_configure_interrupt+0xe4>)
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	88fa      	ldrh	r2, [r7, #6]
 80007a4:	2101      	movs	r1, #1
 80007a6:	fa01 f202 	lsl.w	r2, r1, r2
 80007aa:	43d2      	mvns	r2, r2
 80007ac:	4611      	mov	r1, r2
 80007ae:	4a30      	ldr	r2, [pc, #192]	@ (8000870 <gpio_configure_interrupt+0xe4>)
 80007b0:	400b      	ands	r3, r1
 80007b2:	6093      	str	r3, [r2, #8]
		EXTI->RTSR = EXTI->RTSR | (1 << pin);
 80007b4:	4b2e      	ldr	r3, [pc, #184]	@ (8000870 <gpio_configure_interrupt+0xe4>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	88fa      	ldrh	r2, [r7, #6]
 80007ba:	2101      	movs	r1, #1
 80007bc:	fa01 f202 	lsl.w	r2, r1, r2
 80007c0:	4611      	mov	r1, r2
 80007c2:	4a2b      	ldr	r2, [pc, #172]	@ (8000870 <gpio_configure_interrupt+0xe4>)
 80007c4:	430b      	orrs	r3, r1
 80007c6:	6093      	str	r3, [r2, #8]

		return 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	e04a      	b.n	8000862 <gpio_configure_interrupt+0xd6>
	}
	else if(edge == GPIO_FALLING_EDGE)
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d116      	bne.n	8000800 <gpio_configure_interrupt+0x74>
	{
		EXTI->FTSR = EXTI->FTSR & ~(0x00000001 << pin);
 80007d2:	4b27      	ldr	r3, [pc, #156]	@ (8000870 <gpio_configure_interrupt+0xe4>)
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	88fa      	ldrh	r2, [r7, #6]
 80007d8:	2101      	movs	r1, #1
 80007da:	fa01 f202 	lsl.w	r2, r1, r2
 80007de:	43d2      	mvns	r2, r2
 80007e0:	4611      	mov	r1, r2
 80007e2:	4a23      	ldr	r2, [pc, #140]	@ (8000870 <gpio_configure_interrupt+0xe4>)
 80007e4:	400b      	ands	r3, r1
 80007e6:	60d3      	str	r3, [r2, #12]
		EXTI->FTSR = EXTI->FTSR | (1 << pin);
 80007e8:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <gpio_configure_interrupt+0xe4>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	88fa      	ldrh	r2, [r7, #6]
 80007ee:	2101      	movs	r1, #1
 80007f0:	fa01 f202 	lsl.w	r2, r1, r2
 80007f4:	4611      	mov	r1, r2
 80007f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000870 <gpio_configure_interrupt+0xe4>)
 80007f8:	430b      	orrs	r3, r1
 80007fa:	60d3      	str	r3, [r2, #12]

		return 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	e030      	b.n	8000862 <gpio_configure_interrupt+0xd6>
	}
	else if(edge == GPIO_RISING_FALLING_EDGE)
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	2b02      	cmp	r3, #2
 8000804:	d12b      	bne.n	800085e <gpio_configure_interrupt+0xd2>
	{
		EXTI->RTSR = EXTI->RTSR & ~(0x00000001 << pin);
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <gpio_configure_interrupt+0xe4>)
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	88fa      	ldrh	r2, [r7, #6]
 800080c:	2101      	movs	r1, #1
 800080e:	fa01 f202 	lsl.w	r2, r1, r2
 8000812:	43d2      	mvns	r2, r2
 8000814:	4611      	mov	r1, r2
 8000816:	4a16      	ldr	r2, [pc, #88]	@ (8000870 <gpio_configure_interrupt+0xe4>)
 8000818:	400b      	ands	r3, r1
 800081a:	6093      	str	r3, [r2, #8]
		EXTI->RTSR = EXTI->RTSR | (1 << pin);
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <gpio_configure_interrupt+0xe4>)
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	88fa      	ldrh	r2, [r7, #6]
 8000822:	2101      	movs	r1, #1
 8000824:	fa01 f202 	lsl.w	r2, r1, r2
 8000828:	4611      	mov	r1, r2
 800082a:	4a11      	ldr	r2, [pc, #68]	@ (8000870 <gpio_configure_interrupt+0xe4>)
 800082c:	430b      	orrs	r3, r1
 800082e:	6093      	str	r3, [r2, #8]
		EXTI->FTSR = EXTI->FTSR & ~(0x00000001 << pin);
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <gpio_configure_interrupt+0xe4>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	88fa      	ldrh	r2, [r7, #6]
 8000836:	2101      	movs	r1, #1
 8000838:	fa01 f202 	lsl.w	r2, r1, r2
 800083c:	43d2      	mvns	r2, r2
 800083e:	4611      	mov	r1, r2
 8000840:	4a0b      	ldr	r2, [pc, #44]	@ (8000870 <gpio_configure_interrupt+0xe4>)
 8000842:	400b      	ands	r3, r1
 8000844:	60d3      	str	r3, [r2, #12]
		EXTI->FTSR = EXTI->FTSR | (1 << pin);
 8000846:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <gpio_configure_interrupt+0xe4>)
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	88fa      	ldrh	r2, [r7, #6]
 800084c:	2101      	movs	r1, #1
 800084e:	fa01 f202 	lsl.w	r2, r1, r2
 8000852:	4611      	mov	r1, r2
 8000854:	4a06      	ldr	r2, [pc, #24]	@ (8000870 <gpio_configure_interrupt+0xe4>)
 8000856:	430b      	orrs	r3, r1
 8000858:	60d3      	str	r3, [r2, #12]

		return 0;
 800085a:	2300      	movs	r3, #0
 800085c:	e001      	b.n	8000862 <gpio_configure_interrupt+0xd6>
	}
	else
	{
		return -1;
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40013c00 	.word	0x40013c00

08000874 <gpio_enable_interrupt>:

int gpio_enable_interrupt(uint16_t pin, IRQn_Type irq)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	460a      	mov	r2, r1
 800087e:	80fb      	strh	r3, [r7, #6]
 8000880:	4613      	mov	r3, r2
 8000882:	717b      	strb	r3, [r7, #5]
	EXTI->IMR = EXTI->IMR & ~(0x00000001 << pin);
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <gpio_enable_interrupt+0x50>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	88fa      	ldrh	r2, [r7, #6]
 800088a:	2101      	movs	r1, #1
 800088c:	fa01 f202 	lsl.w	r2, r1, r2
 8000890:	43d2      	mvns	r2, r2
 8000892:	4611      	mov	r1, r2
 8000894:	4a0b      	ldr	r2, [pc, #44]	@ (80008c4 <gpio_enable_interrupt+0x50>)
 8000896:	400b      	ands	r3, r1
 8000898:	6013      	str	r3, [r2, #0]
	EXTI->IMR = EXTI->IMR | (1 << pin);
 800089a:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <gpio_enable_interrupt+0x50>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	88fa      	ldrh	r2, [r7, #6]
 80008a0:	2101      	movs	r1, #1
 80008a2:	fa01 f202 	lsl.w	r2, r1, r2
 80008a6:	4611      	mov	r1, r2
 80008a8:	4a06      	ldr	r2, [pc, #24]	@ (80008c4 <gpio_enable_interrupt+0x50>)
 80008aa:	430b      	orrs	r3, r1
 80008ac:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(irq);
 80008ae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fdec 	bl	8000490 <__NVIC_EnableIRQ>

	return 0;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40013c00 	.word	0x40013c00

080008c8 <gpio_clear_interrupt>:

int gpio_clear_interrupt(uint16_t pin)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	80fb      	strh	r3, [r7, #6]
	if(EXTI->PR & (1 << pin))
 80008d2:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <gpio_clear_interrupt+0x44>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	88fa      	ldrh	r2, [r7, #6]
 80008d8:	2101      	movs	r1, #1
 80008da:	fa01 f202 	lsl.w	r2, r1, r2
 80008de:	4013      	ands	r3, r2
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d00b      	beq.n	80008fc <gpio_clear_interrupt+0x34>
	{
		EXTI->PR = EXTI->PR | (1 << pin);
 80008e4:	4b09      	ldr	r3, [pc, #36]	@ (800090c <gpio_clear_interrupt+0x44>)
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	88fa      	ldrh	r2, [r7, #6]
 80008ea:	2101      	movs	r1, #1
 80008ec:	fa01 f202 	lsl.w	r2, r1, r2
 80008f0:	4611      	mov	r1, r2
 80008f2:	4a06      	ldr	r2, [pc, #24]	@ (800090c <gpio_clear_interrupt+0x44>)
 80008f4:	430b      	orrs	r3, r1
 80008f6:	6153      	str	r3, [r2, #20]

		return 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	e000      	b.n	80008fe <gpio_clear_interrupt+0x36>
	}

	return 0;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40013c00 	.word	0x40013c00

08000910 <__libc_init_array>:
 8000910:	b570      	push	{r4, r5, r6, lr}
 8000912:	4d0d      	ldr	r5, [pc, #52]	@ (8000948 <__libc_init_array+0x38>)
 8000914:	4c0d      	ldr	r4, [pc, #52]	@ (800094c <__libc_init_array+0x3c>)
 8000916:	1b64      	subs	r4, r4, r5
 8000918:	10a4      	asrs	r4, r4, #2
 800091a:	2600      	movs	r6, #0
 800091c:	42a6      	cmp	r6, r4
 800091e:	d109      	bne.n	8000934 <__libc_init_array+0x24>
 8000920:	4d0b      	ldr	r5, [pc, #44]	@ (8000950 <__libc_init_array+0x40>)
 8000922:	4c0c      	ldr	r4, [pc, #48]	@ (8000954 <__libc_init_array+0x44>)
 8000924:	f000 f818 	bl	8000958 <_init>
 8000928:	1b64      	subs	r4, r4, r5
 800092a:	10a4      	asrs	r4, r4, #2
 800092c:	2600      	movs	r6, #0
 800092e:	42a6      	cmp	r6, r4
 8000930:	d105      	bne.n	800093e <__libc_init_array+0x2e>
 8000932:	bd70      	pop	{r4, r5, r6, pc}
 8000934:	f855 3b04 	ldr.w	r3, [r5], #4
 8000938:	4798      	blx	r3
 800093a:	3601      	adds	r6, #1
 800093c:	e7ee      	b.n	800091c <__libc_init_array+0xc>
 800093e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000942:	4798      	blx	r3
 8000944:	3601      	adds	r6, #1
 8000946:	e7f2      	b.n	800092e <__libc_init_array+0x1e>
 8000948:	08000984 	.word	0x08000984
 800094c:	08000984 	.word	0x08000984
 8000950:	08000984 	.word	0x08000984
 8000954:	08000988 	.word	0x08000988

08000958 <_init>:
 8000958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800095a:	bf00      	nop
 800095c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800095e:	bc08      	pop	{r3}
 8000960:	469e      	mov	lr, r3
 8000962:	4770      	bx	lr

08000964 <_fini>:
 8000964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000966:	bf00      	nop
 8000968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800096a:	bc08      	pop	{r3}
 800096c:	469e      	mov	lr, r3
 800096e:	4770      	bx	lr
